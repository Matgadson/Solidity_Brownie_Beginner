{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,+BAA+B,EAAE,MAAM,sBAAsB,CAAC;AACvE,OAAO,EAAE,sCAAsC,EAAE,MAAM,kBAAkB,CAAC;AAC1E,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,CAAC,MAAM,KAAK,CAAC;AAEpB,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,KAAK,CAAC;IAC5C,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;QAClB,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;KAC1B,CAAC;IACF,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;KAChB,CAAC;IACF,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;QAClB,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;KAC1B,CAAC;IACF,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;QAClB,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;KAChB,CAAC;CACH,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,2BAA2B,GACtC,sCAAsC,EAAE;KACrC,IAAI,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;KAC3B,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAEjC,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAE5D,MAAM,CAAC,MAAM,uCAAuC,GAClD,2BAA2B,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC","sourcesContent":["import { LightAccountFactoryConfigSchema } from \"@alchemy/aa-accounts\";\nimport { createSmartAccountProviderConfigSchema } from \"@alchemy/aa-core\";\nimport { Alchemy } from \"alchemy-sdk\";\nimport z from \"zod\";\n\nexport const ConnectionConfigSchema = z.union([\n  z.object({\n    rpcUrl: z.never().optional(),\n    apiKey: z.string(),\n    jwt: z.never().optional(),\n  }),\n  z.object({\n    rpcUrl: z.never().optional(),\n    apiKey: z.never().optional(),\n    jwt: z.string(),\n  }),\n  z.object({\n    rpcUrl: z.string(),\n    apiKey: z.never().optional(),\n    jwt: z.never().optional(),\n  }),\n  z.object({\n    rpcUrl: z.string(),\n    apiKey: z.never().optional(),\n    jwt: z.string(),\n  }),\n]);\n\nexport const AlchemyProviderConfigSchema =\n  createSmartAccountProviderConfigSchema()\n    .omit({ rpcProvider: true })\n    .and(ConnectionConfigSchema);\n\nexport const AlchemySdkClientSchema = z.instanceof(Alchemy);\n\nexport const LightAccountAlchemyProviderConfigSchema =\n  AlchemyProviderConfigSchema.and(LightAccountFactoryConfigSchema);\n"]}