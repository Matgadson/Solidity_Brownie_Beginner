"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightAccountAlchemyProviderConfigSchema = exports.AlchemySdkClientSchema = exports.AlchemyProviderConfigSchema = exports.ConnectionConfigSchema = void 0;
const aa_accounts_1 = require("@alchemy/aa-accounts");
const aa_core_1 = require("@alchemy/aa-core");
const alchemy_sdk_1 = require("alchemy-sdk");
const zod_1 = __importDefault(require("zod"));
exports.ConnectionConfigSchema = zod_1.default.union([
    zod_1.default.object({
        rpcUrl: zod_1.default.never().optional(),
        apiKey: zod_1.default.string(),
        jwt: zod_1.default.never().optional(),
    }),
    zod_1.default.object({
        rpcUrl: zod_1.default.never().optional(),
        apiKey: zod_1.default.never().optional(),
        jwt: zod_1.default.string(),
    }),
    zod_1.default.object({
        rpcUrl: zod_1.default.string(),
        apiKey: zod_1.default.never().optional(),
        jwt: zod_1.default.never().optional(),
    }),
    zod_1.default.object({
        rpcUrl: zod_1.default.string(),
        apiKey: zod_1.default.never().optional(),
        jwt: zod_1.default.string(),
    }),
]);
exports.AlchemyProviderConfigSchema = (0, aa_core_1.createSmartAccountProviderConfigSchema)()
    .omit({ rpcProvider: true })
    .and(exports.ConnectionConfigSchema);
exports.AlchemySdkClientSchema = zod_1.default.instanceof(alchemy_sdk_1.Alchemy);
exports.LightAccountAlchemyProviderConfigSchema = exports.AlchemyProviderConfigSchema.and(aa_accounts_1.LightAccountFactoryConfigSchema);
//# sourceMappingURL=schema.js.map