import BigNumber from "bignumber.js";
import { BrowserProvider, Contract } from "ethers";
import log from "loglevel";

import { ecr20Abi } from "../utils/abis";

export interface ITokenOptions {
  address: string;
  symbol: string;
  decimals: number;
  name: string;
  provider: BrowserProvider;
}

export class TokenHandler {
  public address: string;

  public symbol: string;

  public decimals: number;

  public name: string;

  public contract: Contract;

  constructor({ address, symbol, decimals, name, provider }: ITokenOptions) {
    this.address = address;

    this.contract = new Contract(address, ecr20Abi, provider);
    this.symbol = symbol;
    this.decimals = decimals;
    this.name = name;
  }

  public async getSymbol(): Promise<string> {
    if (!this.symbol || this.symbol === "ERC20") this.symbol = await this.contract.symbol();
    return this.symbol;
  }

  public async getDecimals(): Promise<number> {
    try {
      if (!this.decimals) this.decimals = await this.contract.decimals();
      return this.decimals;
    } catch (error) {
      log.warn(`Could not get decimals for token ${this.address}`, error);
      return 0;
    }
  }

  public async getName(): Promise<string> {
    if (!this.name) this.name = await this.contract.name();
    return this.name;
  }

  public async getUserBalance(userAddress: string) {
    if (!this.decimals) await this.getDecimals();
    const balance = await this.contract.balanceOf(userAddress);
    return new BigNumber(balance).toString(16);
  }
}
