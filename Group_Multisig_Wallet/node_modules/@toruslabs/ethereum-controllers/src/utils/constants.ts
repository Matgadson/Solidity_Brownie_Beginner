import { EthereumProviderConfig } from "./interfaces";

export const LOCALHOST = "localhost";

export const CONTRACT_TYPE_ETH = "eth";
export const CONTRACT_TYPE_ERC20 = "erc20";
export const CONTRACT_TYPE_ERC721 = "erc721";
export const CONTRACT_TYPE_ERC1155 = "erc1155";

export const ERC1155_INTERFACE_ID = "0xd9b67a26";
export const ERC721_INTERFACE_ID = "0x80ac58cd";
export const ERC721_METADATA_INTERFACE_ID = "0x5b5e139f";
export const ERC721_ENUMERABLE_INTERFACE_ID = "0x780e9d63";

export const MAINNET_CHAIN_ID = "0x1";
export const POLYGON_CHAIN_ID = "0x89";
export const BSC_MAINNET_CHAIN_ID = "0x38";
export const AVALANCHE_MAINNET_CHAIN_ID = "0xa86a";
export const XDAI_CHAIN_ID = "0x64";
export const ARBITRUM_MAINNET_CHAIN_ID = "0xa4b1";
export const OPTIMISM_MAINNET_CHAIN_ID = "0xa";
export const CELO_MAINNET_CHAIN_ID = "0xa4ec";

export const GOERLI_CHAIN_ID = "0x5";
export const SEPOLIA_CHAIN_ID = "0xaa36a7";
export const POLYGON_MUMBAI_CHAIN_ID = "0x13881";
export const BSC_TESTNET_CHAIN_ID = "0x61";
export const AVALANCHE_TESTNET_CHAIN_ID = "0xa869";
export const ARBITRUM_TESTNET_CHAIN_ID = "0x66eeb";
export const OPTIMISM_TESTNET_CHAIN_ID = "0x1a4";

export const SUPPORTED_NETWORKS: Record<string, EthereumProviderConfig> = {
  [MAINNET_CHAIN_ID]: {
    blockExplorerUrl: "https://etherscan.io",
    chainId: MAINNET_CHAIN_ID,
    displayName: "Main Ethereum Network",
    logo: "eth.svg",
    rpcTarget: `https://mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
  },
  [POLYGON_CHAIN_ID]: {
    blockExplorerUrl: "https://polygonscan.com",
    chainId: POLYGON_CHAIN_ID,
    displayName: "Polygon Mainnet",
    logo: "matic-network-logo.svg",
    rpcTarget: `https://polygon-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "MATIC",
    tickerName: "Matic Network Token",
  },
  [BSC_MAINNET_CHAIN_ID]: {
    blockExplorerUrl: "https://bscscan.com",
    chainId: BSC_MAINNET_CHAIN_ID,
    displayName: "Binance Smart Chain Mainnet",
    logo: "bnb.png",
    rpcTarget: `https://bsc-dataseed.binance.org`,
    ticker: "BNB",
    tickerName: "Binance Coin",
  },
  [AVALANCHE_MAINNET_CHAIN_ID]: {
    blockExplorerUrl: "https://snowtrace.io",
    chainId: AVALANCHE_MAINNET_CHAIN_ID,
    displayName: "Avalanche Mainnet C-Chain",
    logo: "avax.svg",
    rpcTarget: `https://api.avax.network/ext/bc/C/rpc`,
    ticker: "AVAX",
    tickerName: "Avalanche",
  },
  [OPTIMISM_MAINNET_CHAIN_ID]: {
    blockExplorerUrl: "https://optimistic.etherscan.io",
    chainId: OPTIMISM_MAINNET_CHAIN_ID,
    displayName: "Optimism",
    logo: "optimism.svg",
    rpcTarget: `https://optimism-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
  },
  [CELO_MAINNET_CHAIN_ID]: {
    blockExplorerUrl: "https://explorer.celo.org",
    chainId: CELO_MAINNET_CHAIN_ID,
    displayName: "Celo Mainnet",
    logo: "celo.svg",
    rpcTarget: `https://celo-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "CELO",
    tickerName: "Celo",
  },
  [ARBITRUM_MAINNET_CHAIN_ID]: {
    blockExplorerUrl: "https://arbiscan.io",
    chainId: ARBITRUM_MAINNET_CHAIN_ID,
    displayName: "Arbitrum One",
    logo: "eth.svg",
    rpcTarget: `https://arbitrum-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
  },
  [XDAI_CHAIN_ID]: {
    blockExplorerUrl: "https://blockscout.com/poa/xdai",
    chainId: XDAI_CHAIN_ID,
    displayName: "xDai",
    logo: "xdai.svg",
    rpcTarget: `https://rpc.gnosischain.com`,
    ticker: "DAI",
    tickerName: "xDai Network Token",
  },
  [GOERLI_CHAIN_ID]: {
    blockExplorerUrl: "https://goerli.etherscan.io",
    chainId: GOERLI_CHAIN_ID,
    displayName: "Goerli Test Network",
    logo: "eth.svg",
    rpcTarget: `https://goerli.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true,
  },
  [SEPOLIA_CHAIN_ID]: {
    blockExplorerUrl: "https://sepolia.etherscan.io",
    chainId: SEPOLIA_CHAIN_ID,
    displayName: "Sepolia Test Network",
    logo: "eth.svg",
    rpcTarget: `https://sepolia.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true,
  },
  [POLYGON_MUMBAI_CHAIN_ID]: {
    blockExplorerUrl: "https://mumbai.polygonscan.com",
    chainId: POLYGON_MUMBAI_CHAIN_ID,
    displayName: "Polygon Mumbai",
    logo: "matic-network-logo.svg",
    rpcTarget: `https://polygon-mumbai.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "MATIC",
    tickerName: "Matic Network Token",
    isTestnet: true,
  },
  [BSC_TESTNET_CHAIN_ID]: {
    blockExplorerUrl: "https://testnet.bscscan.com",
    chainId: BSC_TESTNET_CHAIN_ID,
    displayName: "Binance Smart Chain Testnet",
    logo: "bnb.png",
    rpcTarget: `https://data-seed-prebsc-1-s1.binance.org:8545`,
    ticker: "BNB",
    tickerName: "Binance Coin",
    isTestnet: true,
  },
  [AVALANCHE_TESTNET_CHAIN_ID]: {
    blockExplorerUrl: "https://testnet.snowtrace.io",
    chainId: AVALANCHE_TESTNET_CHAIN_ID,
    displayName: "Avalanche Testnet C-Chain",
    logo: "avax.png",
    rpcTarget: `https://api.avax-test.network/ext/bc/C/rpc`,
    ticker: "AVAX",
    tickerName: "Avalanche",
    isTestnet: true,
  },
  [ARBITRUM_TESTNET_CHAIN_ID]: {
    blockExplorerUrl: "https://testnet.arbiscan.io",
    chainId: ARBITRUM_TESTNET_CHAIN_ID,
    displayName: "Arbitrum Goerli",
    logo: "eth.svg",
    rpcTarget: `https://arbitrum-rinkeby.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true,
  },
  [OPTIMISM_TESTNET_CHAIN_ID]: {
    blockExplorerUrl: "https://goerli-optimism.etherscan.io",
    chainId: OPTIMISM_TESTNET_CHAIN_ID,
    displayName: "Optimism Goerli",
    logo: "optimism.svg",
    rpcTarget: `https://optimism-goerli.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true,
  },
};

export const METHOD_TYPES = {
  GET_ACCOUNTS: "eth_accounts",
  ETH_TRANSACTION: "eth_sendTransaction",
  ETH_REQUEST_ACCOUNTS: "eth_requestAccounts",
  ETH_SEND_RAW_TRANSACTION: "eth_sendRawTransaction",
  ETH_SIGN: "eth_sign",
  ETH_SIGN_TYPED_DATA: "eth_signTypedData",
  ETH_SIGN_TYPED_DATA_V3: "eth_signTypedData_v3",
  ETH_SIGN_TYPED_DATA_V4: "eth_signTypedData_v4",
  PERSONAL_SIGN: "personal_sign",
  ETH_GET_TRANSACTION_COUNT: "eth_getTransactionCount",
  ETH_GET_TRANSACTION_BY_HASH: "eth_getTransactionByHash",
  ETH_GET_ENCRYPTION_PUBLIC_KEY: "eth_getEncryptionPublicKey",
  ETH_DECRYPT: "eth_decrypt",
  ETH_GET_TRANSACTION_RECEIPT: "eth_getTransactionReceipt",
  WATCH_ASSET: "wallet_watchAsset",
  ETH_GET_BLOCK_BY_HASH: "eth_getBlockByHash",
  ETH_GET_CODE: "eth_getCode",
  ETH_GET_GAS_PRICE: "eth_gasPrice",
  SWITCH_CHAIN: "wallet_switchEthereumChain",
  ADD_CHAIN: "wallet_addEthereumChain",
} as const;

export const TRANSACTION_ENVELOPE_TYPES = {
  LEGACY: "0x0",
  ACCESS_LIST: "0x1",
  FEE_MARKET: "0x2",
} as const;

export const GAS_ESTIMATE_TYPES = {
  // Fee Market describes the way gas is set after the london hardfork, and was
  // defined by EIP-1559.
  FEE_MARKET: "fee-market",
  // Legacy describes gasPrice estimates from before london hardfork, when the
  // user is connected to mainnet and are presented with fast/average/slow
  // estimate levels to choose from.
  LEGACY: "legacy",
  // EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post
  // london this value should only be used for legacy type transactions when on
  // networks that support EIP-1559. This type of estimate is the most accurate
  // to display on custom networks that don't support EIP-1559.
  ETH_GASPRICE: "eth_gasPrice",
  // NoEstimate describes the state of the controller before receiving its first
  // estimate.
  NONE: "none",
} as const;

// https://help.optimism.io/hc/en-us/articles/4411895794715-Transaction-fees
export const CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP: Record<string, number> = {
  [OPTIMISM_MAINNET_CHAIN_ID]: 1,
  [OPTIMISM_TESTNET_CHAIN_ID]: 1,
};

export const OLD_ERC721_LIST: Record<string, { name?: string; logo?: string; erc20?: boolean; symbol?: string; decimals?: number }> = {
  "0x06012c8cf97bead5deae237070f9587f8e7a266d": {
    name: "Cryptokitties",
    logo: "dapp-cryptokitty.svg",
    erc20: true,
    symbol: "CK",
    decimals: 0,
  },
};

export const TEST_CHAINS = [GOERLI_CHAIN_ID, SEPOLIA_CHAIN_ID];

export const ETHERSCAN_SUPPORTED_CHAINS = [
  MAINNET_CHAIN_ID,
  GOERLI_CHAIN_ID,
  SEPOLIA_CHAIN_ID,
  BSC_MAINNET_CHAIN_ID,
  BSC_TESTNET_CHAIN_ID,
  OPTIMISM_MAINNET_CHAIN_ID,
  OPTIMISM_TESTNET_CHAIN_ID,
  AVALANCHE_MAINNET_CHAIN_ID,
  AVALANCHE_TESTNET_CHAIN_ID,
  ARBITRUM_MAINNET_CHAIN_ID,
  ARBITRUM_TESTNET_CHAIN_ID,
  POLYGON_CHAIN_ID,
  POLYGON_MUMBAI_CHAIN_ID,
  CELO_MAINNET_CHAIN_ID,
];

export const SIMPLEHASH_SUPPORTED_CHAINS = [
  MAINNET_CHAIN_ID,
  POLYGON_CHAIN_ID,
  POLYGON_MUMBAI_CHAIN_ID,
  BSC_MAINNET_CHAIN_ID,
  BSC_TESTNET_CHAIN_ID,
  ARBITRUM_MAINNET_CHAIN_ID,
  ARBITRUM_TESTNET_CHAIN_ID,
  OPTIMISM_MAINNET_CHAIN_ID,
  OPTIMISM_TESTNET_CHAIN_ID,
  CELO_MAINNET_CHAIN_ID,
  AVALANCHE_MAINNET_CHAIN_ID,
  AVALANCHE_TESTNET_CHAIN_ID,
  GOERLI_CHAIN_ID,
];

export const COINGECKO_SUPPORTED_CURRENCIES = new Set([
  "btc",
  "eth",
  "ltc",
  "bch",
  "bnb",
  "eos",
  "xrp",
  "xlm",
  "link",
  "dot",
  "yfi",
  "usd",
  "aed",
  "ars",
  "aud",
  "bdt",
  "bhd",
  "bmd",
  "brl",
  "cad",
  "chf",
  "clp",
  "cny",
  "czk",
  "dkk",
  "eur",
  "gbp",
  "hkd",
  "huf",
  "idr",
  "ils",
  "inr",
  "jpy",
  "krw",
  "kwd",
  "lkr",
  "mmk",
  "mxn",
  "myr",
  "ngn",
  "nok",
  "nzd",
  "php",
  "pkr",
  "pln",
  "rub",
  "sar",
  "sek",
  "sgd",
  "thb",
  "try",
  "twd",
  "uah",
  "vef",
  "vnd",
  "zar",
  "xdr",
  "xag",
  "xau",
  "bits",
  "sats",
]);

export const COINGECKO_PLATFORMS_CHAIN_CODE_MAP: Record<string, { platform: string; currency: string }> = {
  [POLYGON_CHAIN_ID]: {
    platform: "polygon-pos",
    currency: "matic",
  },
  [BSC_MAINNET_CHAIN_ID]: {
    platform: "binance-smart-chain",
    currency: "bnb",
  },
  [MAINNET_CHAIN_ID]: {
    platform: "ethereum",
    currency: "eth",
  },
  [ARBITRUM_MAINNET_CHAIN_ID]: {
    platform: "arbitrum-one",
    currency: "eth",
  },
  [OPTIMISM_MAINNET_CHAIN_ID]: {
    platform: "optimistic-ethereum",
    currency: "eth",
  },
  [CELO_MAINNET_CHAIN_ID]: {
    platform: "celo",
    currency: "celo",
  },
  [XDAI_CHAIN_ID]: {
    platform: "xdai",
    currency: "xDAI",
  },
  [AVALANCHE_MAINNET_CHAIN_ID]: {
    platform: "avalanche",
    currency: "avax",
  },
};

export const MessageStatus = {
  UNAPPROVED: "unapproved",
  SIGNED: "signed",
  PENDING: "pending",
  APPROVED: "approved",
  REJECTED: "rejected",
  FAILED: "failed",
} as const;

export const MESSAGE_EVENTS = {
  UNAPPROVED_MESSAGE: "unapprovedMessage",
};
