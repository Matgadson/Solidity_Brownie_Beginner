import { get } from "@toruslabs/http-helpers";
import { SafeEventEmitterProvider } from "@toruslabs/openlogin-jrpc";
import BigNumber from "bignumber.js";

import { METHOD_TYPES } from "../utils/constants";
import { decGWEIToHexWEI, hexWEIToDecGWEI } from "../utils/conversionUtils";
import {
  EthereumGasFeeEstimates,
  EthereumLegacyGasFeeEstimates,
  GasEstimatesAPIResponse,
  GasEstimatesLegacyAPIResponse,
  GasFeeTimeBounds,
} from "./IGasFeeController";

export function normalizeGWEIDecimalNumbers(n: string | number): number | BigNumber {
  const numberAsWEIHex = decGWEIToHexWEI(new BigNumber(n));
  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);
  return numberAsGWEI;
}

export async function fetchGasEstimates(url: string): Promise<EthereumGasFeeEstimates> {
  const estimates = await get<GasEstimatesAPIResponse>(url);
  const normalizedEstimates = {
    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee).toString(10),
    low: {
      ...estimates.low,
      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas).toString(10),
      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas).toString(10),
    },
    medium: {
      ...estimates.medium,
      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas).toString(10),
      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas).toString(10),
    },
    high: {
      ...estimates.high,
      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas).toString(10),
      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas).toString(10),
    },
  };
  return normalizedEstimates;
}

export interface FeeHistoryResponse {
  baseFeePerGas: string[];
  gasUsedRatio: string[];
  oldestBlock: string;
  reward: string[][];
}

export async function fetchGasEstimatesViaEthFeeHistory(provider: SafeEventEmitterProvider): Promise<EthereumGasFeeEstimates> {
  const noOfBlocks = 10;
  const newestBlock = "latest";
  // get the 10, 50 and 95th percentile of the tip fees from the last 10 blocks
  const percentileValues = [10, 50, 95];
  const feeHistory = await provider.request<[number, string, number[]], FeeHistoryResponse>({
    method: "eth_feeHistory",
    params: [noOfBlocks, newestBlock, percentileValues],
  });
  // this is in hex wei
  const finalBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];
  // this is in hex wei
  const priorityFeeCalcs = feeHistory.reward.reduce(
    (acc, curr) => {
      return {
        slow: acc.slow.plus(new BigNumber(curr[0], 16)),
        average: acc.average.plus(new BigNumber(curr[1], 16)),
        fast: acc.fast.plus(new BigNumber(curr[2], 16)),
      };
    },
    { slow: new BigNumber(0), average: new BigNumber(0), fast: new BigNumber(0) }
  );
  return {
    estimatedBaseFee: hexWEIToDecGWEI(finalBaseFeePerGas).toString(10),
    high: {
      maxWaitTimeEstimate: 30_000,
      minWaitTimeEstimate: 15_000,
      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.plus(finalBaseFeePerGas).toString(16)).toString(),
      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.toString(16)).toString(),
    },
    medium: {
      maxWaitTimeEstimate: 45_000,
      minWaitTimeEstimate: 15_000,
      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.plus(finalBaseFeePerGas).toString(16)).toString(),
      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.toString(16)).toString(),
    },
    low: {
      maxWaitTimeEstimate: 60_000,
      minWaitTimeEstimate: 15_000,
      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.plus(finalBaseFeePerGas).toString(16)).toString(),
      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.toString(16)).toString(),
    },
  };
}

/**
 * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium
 * high values from that API.
 */
export async function fetchLegacyGasPriceEstimates(url: string): Promise<EthereumLegacyGasFeeEstimates> {
  const result = await get<GasEstimatesLegacyAPIResponse>(url, {
    referrer: url,
    referrerPolicy: "no-referrer-when-downgrade",
    method: "GET",
  });
  // this returns decimal gwei
  return {
    low: result.SafeGasPrice,
    medium: result.ProposeGasPrice,
    high: result.FastGasPrice,
  };
}

export async function fetchEthGasPriceEstimate(provider: SafeEventEmitterProvider): Promise<{ gasPrice: string }> {
  const gasPrice = await provider.request<never, string>({ method: METHOD_TYPES.ETH_GET_GAS_PRICE });
  return {
    gasPrice: hexWEIToDecGWEI(gasPrice).toString(),
  };
}

export function calculateTimeEstimate(
  maxPriorityFeePerGas: string,
  maxFeePerGas: string,
  gasFeeEstimates: EthereumGasFeeEstimates
): GasFeeTimeBounds {
  // all are in dec gwei
  const { low, medium, high, estimatedBaseFee } = gasFeeEstimates;

  const maxPriorityFeePerGasInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(maxPriorityFeePerGas)), 16);
  const maxFeePerGasInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(maxFeePerGas)), 16);
  const estimatedBaseFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(estimatedBaseFee)), 16);

  const effectiveMaxPriorityFee = BigNumber.min(maxPriorityFeePerGasInWEI, maxFeePerGasInWEI.minus(estimatedBaseFeeInWEI));

  const lowMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(low.suggestedMaxPriorityFeePerGas)), 16);
  const mediumMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(medium.suggestedMaxPriorityFeePerGas)), 16);
  const highMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(high.suggestedMaxPriorityFeePerGas)), 16);

  let lowerTimeBound: null | number;
  let upperTimeBound: string | number;

  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {
    lowerTimeBound = null;
    upperTimeBound = "unknown";
  } else if (effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) && effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)) {
    lowerTimeBound = low.minWaitTimeEstimate;
    upperTimeBound = low.maxWaitTimeEstimate;
  } else if (effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) && effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)) {
    lowerTimeBound = medium.minWaitTimeEstimate;
    upperTimeBound = medium.maxWaitTimeEstimate;
  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {
    lowerTimeBound = high.minWaitTimeEstimate;
    upperTimeBound = high.maxWaitTimeEstimate;
  } else {
    lowerTimeBound = 0;
    upperTimeBound = high.maxWaitTimeEstimate;
  }

  return {
    lowerTimeBound,
    upperTimeBound,
  };
}
