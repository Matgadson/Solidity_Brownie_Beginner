import jsonDiffer, { Operation } from "fast-json-patch";
import { cloneDeep } from "lodash";

import { EthereumTransactionMeta } from "../utils/interfaces";

/**
  Generates an array of history objects sense the previous state.
  The object has the keys
    op (the operation performed),
    path (the key and if a nested object then each key will be seperated with a `/`)
    value
  with the first entry having the note and a timestamp when the change took place
*/
function generateHistoryEntry(previousState: Record<string, unknown>, newState: Record<string, unknown>, note?: string): Record<string, unknown>[] {
  const entry = jsonDiffer.compare(previousState, newState) as unknown as Record<string, unknown>[];
  // Add a note to the first op, since it breaks if we append it to the entry
  if (entry[0]) {
    if (note) {
      entry[0].note = note;
    }

    entry[0].timestamp = Date.now();
  }
  return entry;
}

/**
  Recovers previous txMeta state obj
*/
function replayHistory(_shortHistory: Record<string, unknown>[]): Record<string, unknown> {
  const shortHistory = cloneDeep(_shortHistory);
  return shortHistory.reduce((val: Record<string, unknown>, entry: unknown) => jsonDiffer.applyPatch(val, entry as Operation[]).newDocument);
}

function snapshotFromTxMeta(txMeta: EthereumTransactionMeta): EthereumTransactionMeta {
  const shallow = { ...txMeta };
  delete shallow.history;
  return cloneDeep(shallow);
}

export { generateHistoryEntry, replayHistory, snapshotFromTxMeta };
