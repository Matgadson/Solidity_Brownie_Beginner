import { BaseConfig } from "@toruslabs/base-controllers";
import { JRPCRequest } from "@toruslabs/openlogin-jrpc";
import KeyringController from "../Keyring/KeyringController";
import NetworkController from "../Network/NetworkController";
import { DecryptMessage, DecryptMessageParams, Message, UserRequestApprovalParams } from "../utils/interfaces";
import AbstractMessageController, { MessageControllerState } from "./AbstractMessageController";
export declare class DecryptMessageController extends AbstractMessageController<DecryptMessage, DecryptMessageParams> {
    name: string;
    protected decryptMessage: KeyringController["decryptMessage"];
    constructor({ config, state, decryptMessage, getNetworkIdentifier, }: {
        config: Partial<BaseConfig>;
        state: Partial<MessageControllerState<Message>>;
        decryptMessage: KeyringController["decryptMessage"];
        getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    });
    processDecryptMessage(messageId: string): Promise<string>;
    addNewUnapprovedMessage(messageParams: DecryptMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    addUnapprovedMessage(messageParams: DecryptMessageParams, req?: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    prepMessageForSigning(messageParams: DecryptMessageParams): Promise<DecryptMessageParams>;
}
