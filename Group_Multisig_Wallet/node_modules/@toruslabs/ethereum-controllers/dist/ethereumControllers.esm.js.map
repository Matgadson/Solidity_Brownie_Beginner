{"version":3,"file":"ethereumControllers.esm.js","sources":["../src/utils/abis.ts","../src/utils/constants.ts","../src/utils/contractAddresses.ts","../src/Account/AccountTrackerController.ts","../src/utils/helpers.ts","../src/Block/PollingBlockTracker.ts","../src/Currency/CurrencyController.ts","../src/utils/conversionUtils.ts","../src/Gas/gasUtil.ts","../src/Gas/GasFeeController.ts","../src/Keyring/KeyringController.ts","../src/Message/AbstractMessageController.ts","../src/Message/utils.ts","../src/Message/AddChainController.ts","../src/Message/DecryptMessageController.ts","../src/Message/EncryptionPublicKeyController.ts","../src/Message/MessageController.ts","../src/Message/PersonalMessageController.ts","../src/Message/SwitchChainController.ts","../src/Message/TypedMessageController.ts","../src/Network/createEthereumMiddleware.ts","../src/Network/createJsonRpcClient.ts","../src/Network/NetworkController.ts","../src/Nfts/NftHandler.ts","../src/Nfts/NftsController.ts","../src/Preferences/PreferencesController.ts","../src/Tokens/TokenHandler.ts","../src/Tokens/TokenRatesController.ts","../src/Tokens/TokensController.ts","../src/Transaction/NonceTracker.ts","../src/Transaction/PendingTransactionTracker.ts","../src/Transaction/TransactionGasUtil.ts","../src/Transaction/TransactionStateHistoryHelper.ts","../src/Transaction/TransactionUtils.ts","../src/Transaction/TransactionStateManager.ts","../src/Transaction/TransactionController.ts"],"sourcesContent":["export const ecr20Abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"success\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"success\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"success\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_extraData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"approveAndCall\",\n    outputs: [\n      {\n        name: \"success\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"remaining\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        name: \"_initialAmount\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_tokenName\",\n        type: \"string\",\n      },\n      {\n        name: \"_decimalUnits\",\n        type: \"uint8\",\n      },\n      {\n        name: \"_tokenSymbol\",\n        type: \"string\",\n      },\n    ],\n    type: \"constructor\",\n  },\n  {\n    payable: false,\n    type: \"fallback\",\n  },\n];\n\nexport const erc721Abi = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"interfaceID\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"_name\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_approved\",\n        type: \"address\",\n      },\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenOfOwnerByIndex\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenByIndex\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"_symbol\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport const erc1155Abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"_owners\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"_ids\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"balanceOfBatch\",\n    outputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"isOperator\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_id\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"_interfaceID\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"uri\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport const singleBalanceCheckerAbi = [\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"tokenBalance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"users\",\n        type: \"address[]\",\n      },\n      {\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"balances\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","import { EthereumProviderConfig } from \"./interfaces\";\n\nexport const LOCALHOST = \"localhost\";\n\nexport const CONTRACT_TYPE_ETH = \"eth\";\nexport const CONTRACT_TYPE_ERC20 = \"erc20\";\nexport const CONTRACT_TYPE_ERC721 = \"erc721\";\nexport const CONTRACT_TYPE_ERC1155 = \"erc1155\";\n\nexport const ERC1155_INTERFACE_ID = \"0xd9b67a26\";\nexport const ERC721_INTERFACE_ID = \"0x80ac58cd\";\nexport const ERC721_METADATA_INTERFACE_ID = \"0x5b5e139f\";\nexport const ERC721_ENUMERABLE_INTERFACE_ID = \"0x780e9d63\";\n\nexport const MAINNET_CHAIN_ID = \"0x1\";\nexport const POLYGON_CHAIN_ID = \"0x89\";\nexport const BSC_MAINNET_CHAIN_ID = \"0x38\";\nexport const AVALANCHE_MAINNET_CHAIN_ID = \"0xa86a\";\nexport const XDAI_CHAIN_ID = \"0x64\";\nexport const ARBITRUM_MAINNET_CHAIN_ID = \"0xa4b1\";\nexport const OPTIMISM_MAINNET_CHAIN_ID = \"0xa\";\nexport const CELO_MAINNET_CHAIN_ID = \"0xa4ec\";\n\nexport const GOERLI_CHAIN_ID = \"0x5\";\nexport const SEPOLIA_CHAIN_ID = \"0xaa36a7\";\nexport const POLYGON_MUMBAI_CHAIN_ID = \"0x13881\";\nexport const BSC_TESTNET_CHAIN_ID = \"0x61\";\nexport const AVALANCHE_TESTNET_CHAIN_ID = \"0xa869\";\nexport const ARBITRUM_TESTNET_CHAIN_ID = \"0x66eeb\";\nexport const OPTIMISM_TESTNET_CHAIN_ID = \"0x1a4\";\n\nexport const SUPPORTED_NETWORKS: Record<string, EthereumProviderConfig> = {\n  [MAINNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://etherscan.io\",\n    chainId: MAINNET_CHAIN_ID,\n    displayName: \"Main Ethereum Network\",\n    logo: \"eth.svg\",\n    rpcTarget: `https://mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"ETH\",\n    tickerName: \"Ethereum\",\n  },\n  [POLYGON_CHAIN_ID]: {\n    blockExplorerUrl: \"https://polygonscan.com\",\n    chainId: POLYGON_CHAIN_ID,\n    displayName: \"Polygon Mainnet\",\n    logo: \"matic-network-logo.svg\",\n    rpcTarget: `https://polygon-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"MATIC\",\n    tickerName: \"Matic Network Token\",\n  },\n  [BSC_MAINNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://bscscan.com\",\n    chainId: BSC_MAINNET_CHAIN_ID,\n    displayName: \"Binance Smart Chain Mainnet\",\n    logo: \"bnb.png\",\n    rpcTarget: `https://bsc-dataseed.binance.org`,\n    ticker: \"BNB\",\n    tickerName: \"Binance Coin\",\n  },\n  [AVALANCHE_MAINNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://snowtrace.io\",\n    chainId: AVALANCHE_MAINNET_CHAIN_ID,\n    displayName: \"Avalanche Mainnet C-Chain\",\n    logo: \"avax.svg\",\n    rpcTarget: `https://api.avax.network/ext/bc/C/rpc`,\n    ticker: \"AVAX\",\n    tickerName: \"Avalanche\",\n  },\n  [OPTIMISM_MAINNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://optimistic.etherscan.io\",\n    chainId: OPTIMISM_MAINNET_CHAIN_ID,\n    displayName: \"Optimism\",\n    logo: \"optimism.svg\",\n    rpcTarget: `https://optimism-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"ETH\",\n    tickerName: \"Ethereum\",\n  },\n  [CELO_MAINNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://explorer.celo.org\",\n    chainId: CELO_MAINNET_CHAIN_ID,\n    displayName: \"Celo Mainnet\",\n    logo: \"celo.svg\",\n    rpcTarget: `https://celo-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"CELO\",\n    tickerName: \"Celo\",\n  },\n  [ARBITRUM_MAINNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://arbiscan.io\",\n    chainId: ARBITRUM_MAINNET_CHAIN_ID,\n    displayName: \"Arbitrum One\",\n    logo: \"eth.svg\",\n    rpcTarget: `https://arbitrum-mainnet.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"ETH\",\n    tickerName: \"Ethereum\",\n  },\n  [XDAI_CHAIN_ID]: {\n    blockExplorerUrl: \"https://blockscout.com/poa/xdai\",\n    chainId: XDAI_CHAIN_ID,\n    displayName: \"xDai\",\n    logo: \"xdai.svg\",\n    rpcTarget: `https://rpc.gnosischain.com`,\n    ticker: \"DAI\",\n    tickerName: \"xDai Network Token\",\n  },\n  [GOERLI_CHAIN_ID]: {\n    blockExplorerUrl: \"https://goerli.etherscan.io\",\n    chainId: GOERLI_CHAIN_ID,\n    displayName: \"Goerli Test Network\",\n    logo: \"eth.svg\",\n    rpcTarget: `https://goerli.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"ETH\",\n    tickerName: \"Ethereum\",\n    isTestnet: true,\n  },\n  [SEPOLIA_CHAIN_ID]: {\n    blockExplorerUrl: \"https://sepolia.etherscan.io\",\n    chainId: SEPOLIA_CHAIN_ID,\n    displayName: \"Sepolia Test Network\",\n    logo: \"eth.svg\",\n    rpcTarget: `https://sepolia.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"ETH\",\n    tickerName: \"Ethereum\",\n    isTestnet: true,\n  },\n  [POLYGON_MUMBAI_CHAIN_ID]: {\n    blockExplorerUrl: \"https://mumbai.polygonscan.com\",\n    chainId: POLYGON_MUMBAI_CHAIN_ID,\n    displayName: \"Polygon Mumbai\",\n    logo: \"matic-network-logo.svg\",\n    rpcTarget: `https://polygon-mumbai.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"MATIC\",\n    tickerName: \"Matic Network Token\",\n    isTestnet: true,\n  },\n  [BSC_TESTNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://testnet.bscscan.com\",\n    chainId: BSC_TESTNET_CHAIN_ID,\n    displayName: \"Binance Smart Chain Testnet\",\n    logo: \"bnb.png\",\n    rpcTarget: `https://data-seed-prebsc-1-s1.binance.org:8545`,\n    ticker: \"BNB\",\n    tickerName: \"Binance Coin\",\n    isTestnet: true,\n  },\n  [AVALANCHE_TESTNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://testnet.snowtrace.io\",\n    chainId: AVALANCHE_TESTNET_CHAIN_ID,\n    displayName: \"Avalanche Testnet C-Chain\",\n    logo: \"avax.png\",\n    rpcTarget: `https://api.avax-test.network/ext/bc/C/rpc`,\n    ticker: \"AVAX\",\n    tickerName: \"Avalanche\",\n    isTestnet: true,\n  },\n  [ARBITRUM_TESTNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://testnet.arbiscan.io\",\n    chainId: ARBITRUM_TESTNET_CHAIN_ID,\n    displayName: \"Arbitrum Goerli\",\n    logo: \"eth.svg\",\n    rpcTarget: `https://arbitrum-rinkeby.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"ETH\",\n    tickerName: \"Ethereum\",\n    isTestnet: true,\n  },\n  [OPTIMISM_TESTNET_CHAIN_ID]: {\n    blockExplorerUrl: \"https://goerli-optimism.etherscan.io\",\n    chainId: OPTIMISM_TESTNET_CHAIN_ID,\n    displayName: \"Optimism Goerli\",\n    logo: \"optimism.svg\",\n    rpcTarget: `https://optimism-goerli.infura.io/v3/${process.env.VITE_APP_INFURA_PROJECT_KEY}`,\n    ticker: \"ETH\",\n    tickerName: \"Ethereum\",\n    isTestnet: true,\n  },\n};\n\nexport const METHOD_TYPES = {\n  GET_ACCOUNTS: \"eth_accounts\",\n  ETH_TRANSACTION: \"eth_sendTransaction\",\n  ETH_REQUEST_ACCOUNTS: \"eth_requestAccounts\",\n  ETH_SEND_RAW_TRANSACTION: \"eth_sendRawTransaction\",\n  ETH_SIGN: \"eth_sign\",\n  ETH_SIGN_TYPED_DATA: \"eth_signTypedData\",\n  ETH_SIGN_TYPED_DATA_V3: \"eth_signTypedData_v3\",\n  ETH_SIGN_TYPED_DATA_V4: \"eth_signTypedData_v4\",\n  PERSONAL_SIGN: \"personal_sign\",\n  ETH_GET_TRANSACTION_COUNT: \"eth_getTransactionCount\",\n  ETH_GET_TRANSACTION_BY_HASH: \"eth_getTransactionByHash\",\n  ETH_GET_ENCRYPTION_PUBLIC_KEY: \"eth_getEncryptionPublicKey\",\n  ETH_DECRYPT: \"eth_decrypt\",\n  ETH_GET_TRANSACTION_RECEIPT: \"eth_getTransactionReceipt\",\n  WATCH_ASSET: \"wallet_watchAsset\",\n  ETH_GET_BLOCK_BY_HASH: \"eth_getBlockByHash\",\n  ETH_GET_CODE: \"eth_getCode\",\n  ETH_GET_GAS_PRICE: \"eth_gasPrice\",\n  SWITCH_CHAIN: \"wallet_switchEthereumChain\",\n  ADD_CHAIN: \"wallet_addEthereumChain\",\n} as const;\n\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n} as const;\n\nexport const GAS_ESTIMATE_TYPES = {\n  // Fee Market describes the way gas is set after the london hardfork, and was\n  // defined by EIP-1559.\n  FEE_MARKET: \"fee-market\",\n  // Legacy describes gasPrice estimates from before london hardfork, when the\n  // user is connected to mainnet and are presented with fast/average/slow\n  // estimate levels to choose from.\n  LEGACY: \"legacy\",\n  // EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post\n  // london this value should only be used for legacy type transactions when on\n  // networks that support EIP-1559. This type of estimate is the most accurate\n  // to display on custom networks that don't support EIP-1559.\n  ETH_GASPRICE: \"eth_gasPrice\",\n  // NoEstimate describes the state of the controller before receiving its first\n  // estimate.\n  NONE: \"none\",\n} as const;\n\n// https://help.optimism.io/hc/en-us/articles/4411895794715-Transaction-fees\nexport const CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP: Record<string, number> = {\n  [OPTIMISM_MAINNET_CHAIN_ID]: 1,\n  [OPTIMISM_TESTNET_CHAIN_ID]: 1,\n};\n\nexport const OLD_ERC721_LIST: Record<string, { name?: string; logo?: string; erc20?: boolean; symbol?: string; decimals?: number }> = {\n  \"0x06012c8cf97bead5deae237070f9587f8e7a266d\": {\n    name: \"Cryptokitties\",\n    logo: \"dapp-cryptokitty.svg\",\n    erc20: true,\n    symbol: \"CK\",\n    decimals: 0,\n  },\n};\n\nexport const TEST_CHAINS = [GOERLI_CHAIN_ID, SEPOLIA_CHAIN_ID];\n\nexport const ETHERSCAN_SUPPORTED_CHAINS = [\n  MAINNET_CHAIN_ID,\n  GOERLI_CHAIN_ID,\n  SEPOLIA_CHAIN_ID,\n  BSC_MAINNET_CHAIN_ID,\n  BSC_TESTNET_CHAIN_ID,\n  OPTIMISM_MAINNET_CHAIN_ID,\n  OPTIMISM_TESTNET_CHAIN_ID,\n  AVALANCHE_MAINNET_CHAIN_ID,\n  AVALANCHE_TESTNET_CHAIN_ID,\n  ARBITRUM_MAINNET_CHAIN_ID,\n  ARBITRUM_TESTNET_CHAIN_ID,\n  POLYGON_CHAIN_ID,\n  POLYGON_MUMBAI_CHAIN_ID,\n  CELO_MAINNET_CHAIN_ID,\n];\n\nexport const SIMPLEHASH_SUPPORTED_CHAINS = [\n  MAINNET_CHAIN_ID,\n  POLYGON_CHAIN_ID,\n  POLYGON_MUMBAI_CHAIN_ID,\n  BSC_MAINNET_CHAIN_ID,\n  BSC_TESTNET_CHAIN_ID,\n  ARBITRUM_MAINNET_CHAIN_ID,\n  ARBITRUM_TESTNET_CHAIN_ID,\n  OPTIMISM_MAINNET_CHAIN_ID,\n  OPTIMISM_TESTNET_CHAIN_ID,\n  CELO_MAINNET_CHAIN_ID,\n  AVALANCHE_MAINNET_CHAIN_ID,\n  AVALANCHE_TESTNET_CHAIN_ID,\n  GOERLI_CHAIN_ID,\n];\n\nexport const COINGECKO_SUPPORTED_CURRENCIES = new Set([\n  \"btc\",\n  \"eth\",\n  \"ltc\",\n  \"bch\",\n  \"bnb\",\n  \"eos\",\n  \"xrp\",\n  \"xlm\",\n  \"link\",\n  \"dot\",\n  \"yfi\",\n  \"usd\",\n  \"aed\",\n  \"ars\",\n  \"aud\",\n  \"bdt\",\n  \"bhd\",\n  \"bmd\",\n  \"brl\",\n  \"cad\",\n  \"chf\",\n  \"clp\",\n  \"cny\",\n  \"czk\",\n  \"dkk\",\n  \"eur\",\n  \"gbp\",\n  \"hkd\",\n  \"huf\",\n  \"idr\",\n  \"ils\",\n  \"inr\",\n  \"jpy\",\n  \"krw\",\n  \"kwd\",\n  \"lkr\",\n  \"mmk\",\n  \"mxn\",\n  \"myr\",\n  \"ngn\",\n  \"nok\",\n  \"nzd\",\n  \"php\",\n  \"pkr\",\n  \"pln\",\n  \"rub\",\n  \"sar\",\n  \"sek\",\n  \"sgd\",\n  \"thb\",\n  \"try\",\n  \"twd\",\n  \"uah\",\n  \"vef\",\n  \"vnd\",\n  \"zar\",\n  \"xdr\",\n  \"xag\",\n  \"xau\",\n  \"bits\",\n  \"sats\",\n]);\n\nexport const COINGECKO_PLATFORMS_CHAIN_CODE_MAP: Record<string, { platform: string; currency: string }> = {\n  [POLYGON_CHAIN_ID]: {\n    platform: \"polygon-pos\",\n    currency: \"matic\",\n  },\n  [BSC_MAINNET_CHAIN_ID]: {\n    platform: \"binance-smart-chain\",\n    currency: \"bnb\",\n  },\n  [MAINNET_CHAIN_ID]: {\n    platform: \"ethereum\",\n    currency: \"eth\",\n  },\n  [ARBITRUM_MAINNET_CHAIN_ID]: {\n    platform: \"arbitrum-one\",\n    currency: \"eth\",\n  },\n  [OPTIMISM_MAINNET_CHAIN_ID]: {\n    platform: \"optimistic-ethereum\",\n    currency: \"eth\",\n  },\n  [CELO_MAINNET_CHAIN_ID]: {\n    platform: \"celo\",\n    currency: \"celo\",\n  },\n  [XDAI_CHAIN_ID]: {\n    platform: \"xdai\",\n    currency: \"xDAI\",\n  },\n  [AVALANCHE_MAINNET_CHAIN_ID]: {\n    platform: \"avalanche\",\n    currency: \"avax\",\n  },\n};\n\nexport const MessageStatus = {\n  UNAPPROVED: \"unapproved\",\n  SIGNED: \"signed\",\n  PENDING: \"pending\",\n  APPROVED: \"approved\",\n  REJECTED: \"rejected\",\n  FAILED: \"failed\",\n} as const;\n\nexport const MESSAGE_EVENTS = {\n  UNAPPROVED_MESSAGE: \"unapprovedMessage\",\n};\n","import {\n  ARBITRUM_MAINNET_CHAIN_ID,\n  AVALANCHE_MAINNET_CHAIN_ID,\n  BSC_MAINNET_CHAIN_ID,\n  GOERLI_CHAIN_ID,\n  MAINNET_CHAIN_ID,\n  OPTIMISM_MAINNET_CHAIN_ID,\n  POLYGON_CHAIN_ID,\n} from \"../utils/constants\";\n\nexport const SINGLE_CALL_BALANCES_ADDRESSES: Record<string, string> = {\n  [MAINNET_CHAIN_ID]: \"0xb1f8e55c7f64d203c1400b9d8555d050f94adf39\",\n  [GOERLI_CHAIN_ID]: \"0x9788C4E93f9002a7ad8e72633b11E8d1ecd51f9b\",\n  // [SEPOLIA_CHAIN_ID]: SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA,\n  // [FANTOM_CHAIN_ID]: \"0x07f697424ABe762bB808c109860c04eA488ff92B\",\n  [BSC_MAINNET_CHAIN_ID]: \"0x2352c63A83f9Fd126af8676146721Fa00924d7e4\",\n  [OPTIMISM_MAINNET_CHAIN_ID]: \"0xB1c568e9C3E6bdaf755A60c7418C269eb11524FC\",\n  [POLYGON_CHAIN_ID]: \"0x2352c63A83f9Fd126af8676146721Fa00924d7e4\",\n  [AVALANCHE_MAINNET_CHAIN_ID]: \"0xD023D153a0DFa485130ECFdE2FAA7e612EF94818\",\n  [ARBITRUM_MAINNET_CHAIN_ID]: \"0x151E24A486D7258dd7C33Fb67E4bB01919B7B32c\",\n};\n","import { AccountTrackerConfig, AccountTrackerState, BaseController, IAccountTrackerController, PreferencesState } from \"@toruslabs/base-controllers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { Mutex } from \"async-mutex\";\nimport { BrowserProvider, Contract, toQuantity } from \"ethers\";\nimport log from \"loglevel\";\n\nimport PollingBlockTracker from \"../Block/PollingBlockTracker\";\nimport NetworkController from \"../Network/NetworkController\";\nimport { singleBalanceCheckerAbi } from \"../utils/abis\";\nimport { SINGLE_CALL_BALANCES_ADDRESSES } from \"../utils/contractAddresses\";\nimport { EthereumBlock, ExtendedAddressPreferences } from \"../utils/interfaces\";\n\ninterface AccountTrackerControllerOptions {\n  config: AccountTrackerConfig<EthereumBlock>;\n  state: Partial<AccountTrackerState>;\n  provider: SafeEventEmitterProvider;\n  blockTracker?: PollingBlockTracker;\n  getIdentities: () => PreferencesState<ExtendedAddressPreferences>[\"identities\"];\n  onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;\n  getCurrentChainId: NetworkController[\"getNetworkIdentifier\"];\n}\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n/**\n * Tracks accounts based on blocks.\n * If block tracker provides latest block, we query accounts from it.\n * Preferences state changes also retrigger accounts update.\n * Network state changes also retrigger accounts update.\n */\nclass AccountTrackerController\n  extends BaseController<AccountTrackerConfig<EthereumBlock>, AccountTrackerState>\n  implements IAccountTrackerController<AccountTrackerConfig<EthereumBlock>, AccountTrackerState>\n{\n  private provider!: SafeEventEmitterProvider;\n\n  private blockTracker!: PollingBlockTracker;\n\n  private mutex = new Mutex();\n\n  private ethersProvider!: BrowserProvider;\n\n  private getIdentities!: AccountTrackerControllerOptions[\"getIdentities\"];\n\n  private getCurrentChainId: NetworkController[\"getNetworkIdentifier\"];\n\n  constructor({\n    config,\n    state,\n    provider,\n    blockTracker,\n    getIdentities,\n    onPreferencesStateChange,\n    getCurrentChainId,\n  }: AccountTrackerControllerOptions) {\n    super({ config, state });\n    this.defaultState = {\n      accounts: {},\n    };\n    this.defaultConfig = {\n      _currentBlock: null,\n    };\n    this.initialize();\n    this.provider = provider;\n    this.blockTracker = blockTracker;\n    this.ethersProvider = new BrowserProvider(this.provider, \"any\");\n\n    // Initiate block tracker internal tracking.\n    this.blockTracker.on(\"latest\", (block: EthereumBlock) => {\n      this.configure({ _currentBlock: block });\n      this.refresh();\n    });\n\n    this.getIdentities = getIdentities;\n    this.getCurrentChainId = getCurrentChainId;\n\n    onPreferencesStateChange(() => {\n      log.info(\"onPreferencesStateChange called\");\n      const refreshNeeded = this.syncAccounts();\n      if (refreshNeeded) this.refresh();\n    });\n  }\n\n  syncAccounts(): boolean {\n    const { accounts } = this.state;\n    const addresses = Object.keys(this.getIdentities());\n    const existing = Object.keys(accounts);\n    const newAddresses = addresses.filter((address) => existing.indexOf(address) === -1);\n    const oldAddresses = existing.filter((address) => addresses.indexOf(address) === -1);\n    let isUpdated = false;\n    newAddresses.forEach((address) => {\n      isUpdated = true;\n      accounts[address] = { balance: \"0x0\" };\n    });\n    oldAddresses.forEach((address) => {\n      isUpdated = true;\n      delete accounts[address];\n    });\n    this.update({ accounts: { ...accounts } });\n    return isUpdated;\n  }\n\n  async refresh(): Promise<void> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const currentBlock = this.config._currentBlock;\n      if (!currentBlock) return;\n      this._updateAccounts();\n    } catch (error) {\n    } finally {\n      releaseLock();\n    }\n  }\n\n  private async _updateAccounts(): Promise<void> {\n    const { accounts } = this.state;\n    const addresses = Object.keys(accounts);\n    const chainId = this.getCurrentChainId();\n    if (chainId === \"loading\") return;\n\n    if (addresses.length > 0) {\n      if (SINGLE_CALL_BALANCES_ADDRESSES[chainId]) {\n        await this._updateAccountsViaBalanceChecker(addresses, SINGLE_CALL_BALANCES_ADDRESSES[chainId]);\n        return;\n      }\n      log.info(\"falling back to ethQuery.getBalance\");\n      await Promise.all(addresses.map((x) => this._updateAccount(x)));\n    }\n  }\n\n  private async _updateAccount(address: string): Promise<void> {\n    const balance = await this.provider.request<[string, string], string>({ method: \"eth_getBalance\", params: [address, \"latest\"] });\n    const { accounts } = this.state;\n    if (!accounts[address]) return;\n    accounts[address] = { balance: toQuantity(balance) };\n    this.update({ accounts });\n  }\n\n  private async _updateAccountsViaBalanceChecker(addresses: string[], deployedContractAddress: string) {\n    const ethContract = new Contract(deployedContractAddress, singleBalanceCheckerAbi, this.ethersProvider);\n    try {\n      const result: string[] = await ethContract.balances(addresses, [ZERO_ADDRESS]);\n      const { accounts } = this.state;\n      addresses.forEach((address, index) => {\n        const balance = toQuantity(result[index]);\n        if (!accounts[address]) return;\n        accounts[address] = { balance };\n      });\n      return this.update({ accounts });\n    } catch (error) {\n      log.warn(\"Torus - Account Tracker single call balance fetch failed\", error);\n      return Promise.all(addresses.map((x) => this._updateAccount(x)));\n    }\n  }\n}\n\nexport default AccountTrackerController;\n","import { addHexPrefix, isValidAddress, toChecksumAddress } from \"@ethereumjs/util\";\nimport {\n  ACTIVITY_ACTION_RECEIVE,\n  ACTIVITY_ACTION_SEND,\n  addressSlicer,\n  formatSmallNumbers,\n  significantDigits,\n  TransactionStatus,\n} from \"@toruslabs/base-controllers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport BigNumber from \"bignumber.js\";\nimport log from \"loglevel\";\n\nimport {\n  CONTRACT_TYPE_ERC20,\n  CONTRACT_TYPE_ERC721,\n  CONTRACT_TYPE_ERC1155,\n  MAINNET_CHAIN_ID,\n  METHOD_TYPES,\n  SUPPORTED_NETWORKS,\n  TEST_CHAINS,\n} from \"./constants\";\nimport { FormattedTransactionActivity, TransactionPayload, TransactionReceipt } from \"./interfaces\";\n\nexport function getEtherScanHashLink(txHash: string, chainId: string) {\n  if (!SUPPORTED_NETWORKS[chainId]) return \"\";\n  return `${SUPPORTED_NETWORKS[chainId].blockExplorerUrl}/tx/${txHash}`;\n}\n\nexport const formatPastTx = (x: TransactionPayload, lowerCaseSelectedAddress?: string): FormattedTransactionActivity => {\n  let totalAmountString = \"\";\n  if (x.type === CONTRACT_TYPE_ERC721 || x.type === CONTRACT_TYPE_ERC1155) totalAmountString = x.symbol;\n  else if (x.type === CONTRACT_TYPE_ERC20) totalAmountString = formatSmallNumbers(Number.parseFloat(x.total_amount), x.symbol, true);\n  else totalAmountString = formatSmallNumbers(Number.parseFloat(x.total_amount), x.type_name, true);\n  const currencyAmountString =\n    x.type === CONTRACT_TYPE_ERC721 || x.type === CONTRACT_TYPE_ERC1155\n      ? \"\"\n      : formatSmallNumbers(Number.parseFloat(x.currency_amount), x.selected_currency, true);\n  const finalObject: FormattedTransactionActivity = {\n    id: x.created_at.toString(),\n    date: new Date(x.created_at).toString(),\n    from: x.from,\n    from_aa_address: x.from_aa_address,\n    slicedFrom: typeof x.from === \"string\" ? addressSlicer(x.from) : \"\",\n    to: x.to,\n    slicedTo: typeof x.to === \"string\" ? addressSlicer(x.to) : \"\",\n    action: lowerCaseSelectedAddress === x.to?.toLowerCase() || \"\" ? ACTIVITY_ACTION_RECEIVE : ACTIVITY_ACTION_SEND,\n    totalAmount: x.total_amount,\n    totalAmountString,\n    currencyAmount: x.currency_amount,\n    currencyAmountString,\n    amount: `${totalAmountString} / ${currencyAmountString}`,\n    status: x.status,\n    etherscanLink: getEtherScanHashLink(x.transaction_hash, x.network || MAINNET_CHAIN_ID),\n    networkType: x.network,\n    ethRate:\n      Number.parseFloat(x?.total_amount) && Number.parseFloat(x?.currency_amount)\n        ? `1 ${x.symbol} = ${significantDigits(Number.parseFloat(x.currency_amount) / Number.parseFloat(x.total_amount))}`\n        : \"\",\n    currencyUsed: x.selected_currency,\n    type: x.type,\n    type_name: x.type_name,\n    type_image_link: x.type_image_link,\n    transaction_hash: x.transaction_hash,\n    transaction_category: x.transaction_category,\n    // TODO: // figure out how to handle these values.\n    // isEtherscan: x.isEtherscan,\n    // input: x.input || \"\",\n    // token_id: x.token_id || \"\",\n    contract_address: x.contract_address || \"\",\n    nonce: x.nonce || \"\",\n    is_cancel: !!x.is_cancel || false,\n    gas: x.gas || \"\",\n    gasPrice: x.gasPrice || \"\",\n  };\n  return finalObject;\n};\n\n/**\n * Ref - https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt\n */\nexport const getEthTxStatus = async (hash: string, provider: SafeEventEmitterProvider): Promise<TransactionStatus | undefined> => {\n  try {\n    const result = await provider.request<[string], TransactionReceipt>({ method: METHOD_TYPES.ETH_GET_TRANSACTION_RECEIPT, params: [hash] });\n    if (result === null) return TransactionStatus.submitted;\n    if (result && result.status === \"0x1\") return TransactionStatus.confirmed;\n    if (result && result.status === \"0x0\") return TransactionStatus.rejected;\n    return undefined;\n  } catch (err) {\n    log.warn(\"unable to fetch transaction status\", err);\n    return undefined;\n  }\n};\n\nexport function formatDate(inputDate: string) {\n  const monthList = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(inputDate);\n  const day = date.getDate();\n  const month = monthList[date.getMonth()];\n  const year = date.getFullYear();\n  return `${day} ${month} ${year}`;\n}\n\nexport function formatTime(time: number) {\n  return new Date(time).toTimeString().slice(0, 8);\n}\n\nexport const idleTimeTracker = ((activityThresholdTime: number): { checkIfIdle: () => boolean } => {\n  let isIdle = false;\n  let idleTimeout: number = null;\n\n  const resetTimer = () => {\n    if (idleTimeout) {\n      window.clearTimeout(idleTimeout);\n    }\n    isIdle = false;\n    idleTimeout = window.setTimeout(() => {\n      isIdle = true;\n    }, activityThresholdTime * 1000);\n  };\n\n  window.addEventListener(\"load\", resetTimer);\n  document.addEventListener(\"mousemove\", resetTimer);\n  document.addEventListener(\"keydown\", resetTimer);\n\n  function checkIfIdle() {\n    return isIdle;\n  }\n  return {\n    checkIfIdle,\n  };\n})(60 * 3);\n\nexport function isAddressByChainId(address: string, _chainId: string) {\n  // TOOD: add rsk network checks.\n  return isValidAddress(address);\n}\n\nexport function toChecksumAddressByChainId(address: string, chainId: string) {\n  // TOOD: add rsk network checks.\n  if (!isAddressByChainId(address, chainId)) return address;\n  return toChecksumAddress(address);\n}\n\nexport const GAS_LIMITS = {\n  // maximum gasLimit of a simple send\n  SIMPLE: addHexPrefix((21_000).toString(16)),\n  // a base estimate for token transfers.\n  BASE_TOKEN_ESTIMATE: addHexPrefix((100_000).toString(16)),\n};\n\nexport function bnLessThan(a: string | number, b: string | number) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport const getIpfsEndpoint = (path: string) => `https://infura-ipfs.io/${path}`;\n\nexport function sanitizeNftMetdataUrl(url: string): string {\n  let finalUri = url;\n  if (url?.startsWith(\"ipfs\")) {\n    const ipfsPath = url.split(\"ipfs://\")[1];\n    finalUri = getIpfsEndpoint(ipfsPath);\n  }\n  return finalUri;\n}\n\nexport function getChainType(chainId: string) {\n  if (chainId === MAINNET_CHAIN_ID) {\n    return \"mainnet\";\n  } else if ((TEST_CHAINS as string[]).includes(chainId)) {\n    return \"testnet\";\n  }\n  return \"custom\";\n}\n","import { BaseBlockTracker, PollingBlockTrackerConfig, timeout } from \"@toruslabs/base-controllers\";\nimport { BlockParams } from \"ethers\";\nimport log from \"loglevel\";\n\nimport { idleTimeTracker } from \"../utils/helpers\";\nimport { EthereumBlock, PollingBlockTrackerState } from \"../utils/interfaces\";\n\nconst DEFAULT_POLLING_INTERVAL = 20;\nconst DEFAULT_RETRY_TIMEOUT = 2;\nconst SEC = 1000;\n\nclass PollingBlockTracker extends BaseBlockTracker<EthereumBlock, PollingBlockTrackerConfig, PollingBlockTrackerState> {\n  constructor({ config, state = {} }: { config: Partial<PollingBlockTrackerConfig>; state: Partial<PollingBlockTrackerState> }) {\n    if (!config.provider) {\n      throw new Error(\"PollingBlockTracker - no provider specified.\");\n    }\n\n    super({ config, state });\n\n    const pollingInterval = config.pollingInterval || DEFAULT_POLLING_INTERVAL;\n\n    const retryTimeout = config.retryTimeout || DEFAULT_RETRY_TIMEOUT;\n\n    // merge default + provided config.\n    this.defaultConfig = {\n      provider: config.provider,\n      pollingInterval: pollingInterval * SEC,\n      retryTimeout: retryTimeout * SEC,\n      setSkipCacheFlag: config.setSkipCacheFlag || false,\n    };\n\n    this.initialize();\n  }\n\n  async checkForLatestBlock(): Promise<EthereumBlock> {\n    await this._updateLatestBlock();\n    return this.getLatestBlock();\n  }\n\n  // overrides the BaseBlockTracker._start method.\n  protected _start(): void {\n    this._synchronize().catch((err) => this.emit(\"error\", err));\n  }\n\n  private async _synchronize(): Promise<void> {\n    while (this.state._isRunning) {\n      if (idleTimeTracker.checkIfIdle()) return;\n      try {\n        await this._updateLatestBlock();\n        await timeout(this.config.pollingInterval);\n      } catch (err) {\n        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${(err as Error).stack}`);\n        try {\n          this.emit(\"error\", newErr);\n        } catch (emitErr) {\n          log.error(newErr);\n        }\n        await timeout(this.config.retryTimeout);\n      }\n    }\n  }\n\n  private async _updateLatestBlock(): Promise<void> {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n    this._newPotentialLatest(latestBlock);\n  }\n\n  private async _fetchLatestBlock(): Promise<EthereumBlock> {\n    try {\n      const block = await this.config.provider.request<[string, boolean], { [K in keyof BlockParams]: string }>({\n        method: \"eth_getBlockByNumber\",\n        params: [\"latest\", false],\n      });\n      return {\n        blockHash: block.hash,\n        idempotencyKey: block.number,\n        timestamp: block.timestamp,\n        baseFeePerGas: block.baseFeePerGas,\n        gasLimit: block.gasLimit,\n      };\n    } catch (error) {\n      log.error(\"Polling Block Tracker: \", error);\n      throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${(error as Error).message}`);\n    }\n  }\n}\n\nexport default PollingBlockTracker;\n","import { BaseCurrencyController, BaseCurrencyControllerConfig, BaseCurrencyControllerState } from \"@toruslabs/base-controllers\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport log from \"loglevel\";\n\nimport { idleTimeTracker } from \"../utils/helpers\";\nimport { EthereumNetworkState } from \"../utils/interfaces\";\n\nexport interface IEthereumCurrencyControllerState extends BaseCurrencyControllerState {\n  commonDenomination: string;\n  commonDenominatorPrice: number;\n}\n\nexport default class CurrencyController extends BaseCurrencyController<BaseCurrencyControllerConfig, IEthereumCurrencyControllerState> {\n  private conversionInterval: number;\n\n  constructor({\n    config,\n    state,\n    onNetworkChanged,\n  }: {\n    config: Partial<BaseCurrencyControllerConfig>;\n    state: Partial<IEthereumCurrencyControllerState>;\n    onNetworkChanged: (listener: (networkState: EthereumNetworkState) => void) => void;\n  }) {\n    super({ config, state });\n    this.defaultState = {\n      ...this.defaultState,\n      commonDenomination: \"USD\",\n      commonDenominatorPrice: 0,\n    };\n    this.initialize();\n    onNetworkChanged((networkState) => {\n      // to be called as (listener) => this.networkController.on('networkDidChange', listener);\n      if (networkState.providerConfig.ticker.toUpperCase() !== this.state.nativeCurrency.toUpperCase()) {\n        this.setNativeCurrency(networkState.providerConfig.ticker);\n        this.updateConversionRate();\n      }\n    });\n  }\n\n  public setCommonDenomination(commonDenomination: string): void {\n    this.update({ commonDenomination });\n  }\n\n  public getCommonDenomination(): string {\n    return this.state.commonDenomination;\n  }\n\n  public setCommonDenominatorPrice(commonDenominatorPrice: number): void {\n    this.update({ commonDenominatorPrice });\n  }\n\n  public getCommonDenominatorPrice(): number {\n    return this.state.commonDenominatorPrice;\n  }\n\n  /**\n   * Creates a new poll, using setInterval, to periodically call updateConversionRate. The id of the interval is\n   * stored at the controller's conversionInterval property. If it is called and such an id already exists, the\n   * previous interval is clear and a new one is created.\n   */\n  public scheduleConversionInterval(): void {\n    if (this.conversionInterval) {\n      window.clearInterval(this.conversionInterval);\n    }\n    this.conversionInterval = window.setInterval(() => {\n      if (!idleTimeTracker.checkIfIdle()) {\n        this.updateConversionRate();\n      }\n    }, this.config.pollInterval);\n  }\n\n  /**\n   * Updates the conversionRate and conversionDate properties associated with the currentCurrency. Updated info is\n   * fetched from an external API\n   */\n  public async updateConversionRate() {\n    const currentCurrency = this.getCurrentCurrency();\n    const nativeCurrency = this.getNativeCurrency();\n    const commonDenomination = this.getCommonDenomination();\n    const conversionRate = await this.retrieveConversionRate(nativeCurrency, currentCurrency, commonDenomination);\n\n    const currentCurrencyRate = Number.parseFloat(conversionRate[currentCurrency.toUpperCase()]);\n    const commonDenominationRate = Number.parseFloat(conversionRate[commonDenomination.toUpperCase()]);\n    // set conversion rate\n    if (currentCurrencyRate || commonDenominationRate) {\n      // ETC\n      this.setConversionRate(currentCurrencyRate);\n      this.setConversionDate(Math.floor(Date.now() / 1000).toString());\n      if (currentCurrency.toUpperCase() === commonDenomination.toUpperCase()) {\n        this.setCommonDenominatorPrice(currentCurrencyRate);\n      } else {\n        this.setCommonDenominatorPrice(commonDenominationRate);\n      }\n    } else {\n      this.setConversionRate(0);\n      this.setConversionDate(\"N/A\");\n    }\n  }\n\n  private async retrieveConversionRate(fromCurrency: string, toCurrency: string, commonDenomination: string): Promise<Record<string, string>> {\n    try {\n      // query cryptocompare\n      let apiUrl = `${this.config.api}/currency?fsym=${fromCurrency.toUpperCase()}&tsyms=${toCurrency.toUpperCase()}`;\n      if (commonDenomination && commonDenomination.toUpperCase() !== toCurrency.toUpperCase()) {\n        apiUrl += `,${commonDenomination.toUpperCase()}`;\n      }\n      const parsedResponse = await get<Record<string, string>>(apiUrl);\n\n      return parsedResponse;\n    } catch (error) {\n      log.error(error, `CurrencyController - updateCommonDenominatorPrice: Failed to query rate for currency: ${fromCurrency}/ ${toCurrency}`);\n    }\n\n    return { [toCurrency.toUpperCase()]: \"0\", [commonDenomination.toUpperCase()]: \"0\" };\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n/* Currency Conversion Utility\n * This utility function can be used for converting currency related values within metamask.\n * The caller should be able to pass it a value, along with information about the value's\n * numeric base, denomination and currency, and the desired numeric base, denomination and\n * currency. It should return a single value.\n *\n * @param {(number | string | BN)} value - The value to convert.\n * @param {Object} [options] - Options to specify details of the conversion\n * @param {string} [options.fromCurrency = 'ETH' | 'USD'] - The currency of the passed value\n * @param {string} [options.toCurrency = 'ETH' | 'USD'] - The desired currency of the result\n * @param {string} [options.fromNumericBase = 'hex' | 'dec' | 'BN'] - The numeric basic of the passed value.\n * @param {string} [options.toNumericBase = 'hex' | 'dec' | 'BN'] - The desired numeric basic of the result.\n * @param {string} [options.fromDenomination = 'WEI'] - The denomination of the passed value\n * @param {string} [options.numberOfDecimals] - The desired number of decimals in the result\n * @param {string} [options.roundDown] - The desired number of decimals to round down to\n * @param {number} [options.conversionRate] - The rate to use to make the fromCurrency -> toCurrency conversion\n * @returns {(number | string | BN)}\n *\n * The utility passes value along with the options as a single object to the `converter` function.\n * `converter` conditional modifies the supplied `value` property, depending\n * on the accompanying options.\n */\n\nimport { stripHexPrefix } from \"@ethereumjs/util\";\nimport BigNumber from \"bignumber.js\";\nimport BN from \"bn.js\";\n\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1000000000000000000\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1000000000\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\ntype NumericBase = \"hex\" | \"dec\" | \"BN\";\n\ntype EthDenomination = \"WEI\" | \"GWEI\" | \"ETH\";\n\ntype ConverterOptions = {\n  value: BigNumber | string;\n  fromNumericBase: NumericBase;\n  fromDenomination: EthDenomination;\n  fromCurrency: string;\n  toNumericBase: NumericBase;\n  toDenomination: EthDenomination;\n  toCurrency: string;\n  numberOfDecimals: number;\n  conversionRate: number;\n  invertConversionRate: boolean;\n  roundDown?: number;\n};\n\n// Setter Maps\nconst toBigNumber = {\n  hex: (n) => new BigNumber(stripHexPrefix(n), 16),\n  dec: (n) => new BigNumber(String(n), 10),\n  BN: (n) => new BigNumber(n.toString(16), 16),\n};\nconst toNormalizedDenomination = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n  BN: (n) => new BN(n.toString(16)),\n};\n\n// Utility function for checking base types\nconst isValidBase = (base) => Number.isInteger(base) && base > 1;\n\n/**\n * Utility method to convert a value between denominations, formats and currencies.\n */\nconst converter = ({\n  value,\n  fromNumericBase,\n  fromDenomination,\n  fromCurrency,\n  toNumericBase,\n  toDenomination,\n  toCurrency,\n  numberOfDecimals,\n  conversionRate,\n  invertConversionRate,\n  roundDown,\n}: ConverterOptions) => {\n  let convertedValue = fromNumericBase ? toBigNumber[fromNumericBase](value) : value;\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n\n  if (fromCurrency !== toCurrency) {\n    if (conversionRate === null || conversionRate === undefined) {\n      throw new Error(`Converting from ${fromCurrency} to ${toCurrency} requires a conversionRate, but one was not provided`);\n    }\n    let rate = toBigNumber.dec(conversionRate);\n    if (invertConversionRate) {\n      rate = new BigNumber(1).div(conversionRate);\n    }\n    convertedValue = convertedValue.times(rate);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (roundDown) {\n    convertedValue = convertedValue.dp(roundDown, BigNumber.ROUND_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nexport const conversionUtil = (\n  value: BigNumber | string,\n  {\n    fromCurrency = null,\n    toCurrency = fromCurrency,\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    conversionRate,\n    invertConversionRate,\n  }: Omit<ConverterOptions, \"value\">\n) => {\n  if (fromCurrency !== toCurrency && !conversionRate) {\n    return 0;\n  }\n  return converter({\n    fromCurrency,\n    toCurrency,\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    conversionRate,\n    invertConversionRate,\n    value,\n  });\n};\n\nexport const getBigNumber = (value, base) => {\n  if (!isValidBase(base)) {\n    throw new Error(\"Must specificy valid base\");\n  }\n\n  // We don't include 'number' here, because BigNumber will throw if passed\n  // a number primitive it considers unsafe.\n  if (typeof value === \"string\" || value instanceof BigNumber) {\n    return new BigNumber(value, base);\n  }\n\n  return new BigNumber(String(value), base);\n};\n\nexport const addCurrencies = (a, b, options: Record<string, unknown> = {}) => {\n  const { aBase, bBase, ...conversionOptions } = options;\n\n  if (!isValidBase(aBase) || !isValidBase(bBase)) {\n    throw new Error(\"Must specify valid aBase and bBase\");\n  }\n\n  const value = getBigNumber(a, aBase).plus(getBigNumber(b, bBase));\n\n  return converter({\n    value,\n    ...conversionOptions,\n  } as ConverterOptions);\n};\n\nexport const subtractCurrencies = (a, b, options: Record<string, unknown> = {}) => {\n  const { aBase, bBase, ...conversionOptions } = options;\n\n  if (!isValidBase(aBase) || !isValidBase(bBase)) {\n    throw new Error(\"Must specify valid aBase and bBase\");\n  }\n\n  const value = getBigNumber(a, aBase).minus(getBigNumber(b, bBase));\n\n  return converter({\n    value,\n    ...conversionOptions,\n  } as ConverterOptions);\n};\n\nexport const multiplyCurrencies = (a, b, options: Record<string, unknown> = {}) => {\n  const { multiplicandBase, multiplierBase, ...conversionOptions } = options;\n\n  if (!isValidBase(multiplicandBase) || !isValidBase(multiplierBase)) {\n    throw new Error(\"Must specify valid multiplicandBase and multiplierBase\");\n  }\n\n  const value = getBigNumber(a, multiplicandBase).times(getBigNumber(b, multiplierBase));\n\n  return converter({\n    value,\n    ...conversionOptions,\n  } as ConverterOptions);\n};\n\nexport const conversionGreaterThan = ({ ...firstProps }: ConverterOptions, { ...secondProps }: ConverterOptions) => {\n  const firstValue = converter({ ...firstProps });\n  const secondValue = converter({ ...secondProps });\n\n  return firstValue.gt(secondValue);\n};\n\nexport const conversionLessThan = ({ ...firstProps }: ConverterOptions, { ...secondProps }: ConverterOptions) => {\n  const firstValue = converter({ ...firstProps });\n  const secondValue = converter({ ...secondProps });\n\n  return firstValue.lt(secondValue);\n};\n\nexport const conversionMax = ({ ...firstProps }, { ...secondProps }) => {\n  const firstIsGreater = conversionGreaterThan({ ...firstProps }, { ...secondProps });\n\n  return firstIsGreater ? firstProps.value : secondProps.value;\n};\n\nexport const conversionGTE = ({ ...firstProps }, { ...secondProps }) => {\n  const firstValue = converter({ ...firstProps } as ConverterOptions);\n  const secondValue = converter({ ...secondProps } as ConverterOptions);\n  return firstValue.isGreaterThanOrEqualTo(secondValue);\n};\n\nexport const conversionLTE = ({ ...firstProps }, { ...secondProps }) => {\n  const firstValue = converter({ ...firstProps } as ConverterOptions);\n  const secondValue = converter({ ...secondProps } as ConverterOptions);\n  return firstValue.isLessThanOrEqualTo(secondValue);\n};\n\nexport const toNegative = (n, options = {}) => multiplyCurrencies(n, -1, options);\n\nexport const decGWEIToHexWEI = (decGWEI: BigNumber): BigNumber => {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  } as ConverterOptions);\n};\n\nexport const hexWEIToDecGWEI = (decGWEI: BigNumber | string): BigNumber => {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  } as ConverterOptions);\n};\n","import { get } from \"@toruslabs/http-helpers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport BigNumber from \"bignumber.js\";\n\nimport { METHOD_TYPES } from \"../utils/constants\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../utils/conversionUtils\";\nimport {\n  EthereumGasFeeEstimates,\n  EthereumLegacyGasFeeEstimates,\n  GasEstimatesAPIResponse,\n  GasEstimatesLegacyAPIResponse,\n  GasFeeTimeBounds,\n} from \"./IGasFeeController\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | number): number | BigNumber {\n  const numberAsWEIHex = decGWEIToHexWEI(new BigNumber(n));\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchGasEstimates(url: string): Promise<EthereumGasFeeEstimates> {\n  const estimates = await get<GasEstimatesAPIResponse>(url);\n  const normalizedEstimates = {\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee).toString(10),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas).toString(10),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas).toString(10),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas).toString(10),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas).toString(10),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas).toString(10),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas).toString(10),\n    },\n  };\n  return normalizedEstimates;\n}\n\nexport interface FeeHistoryResponse {\n  baseFeePerGas: string[];\n  gasUsedRatio: string[];\n  oldestBlock: string;\n  reward: string[][];\n}\n\nexport async function fetchGasEstimatesViaEthFeeHistory(provider: SafeEventEmitterProvider): Promise<EthereumGasFeeEstimates> {\n  const noOfBlocks = 10;\n  const newestBlock = \"latest\";\n  // get the 10, 50 and 95th percentile of the tip fees from the last 10 blocks\n  const percentileValues = [10, 50, 95];\n  const feeHistory = await provider.request<[number, string, number[]], FeeHistoryResponse>({\n    method: \"eth_feeHistory\",\n    params: [noOfBlocks, newestBlock, percentileValues],\n  });\n  // this is in hex wei\n  const finalBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n  // this is in hex wei\n  const priorityFeeCalcs = feeHistory.reward.reduce(\n    (acc, curr) => {\n      return {\n        slow: acc.slow.plus(new BigNumber(curr[0], 16)),\n        average: acc.average.plus(new BigNumber(curr[1], 16)),\n        fast: acc.fast.plus(new BigNumber(curr[2], 16)),\n      };\n    },\n    { slow: new BigNumber(0), average: new BigNumber(0), fast: new BigNumber(0) }\n  );\n  return {\n    estimatedBaseFee: hexWEIToDecGWEI(finalBaseFeePerGas).toString(10),\n    high: {\n      maxWaitTimeEstimate: 30_000,\n      minWaitTimeEstimate: 15_000,\n      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.plus(finalBaseFeePerGas).toString(16)).toString(),\n      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.toString(16)).toString(),\n    },\n    medium: {\n      maxWaitTimeEstimate: 45_000,\n      minWaitTimeEstimate: 15_000,\n      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.plus(finalBaseFeePerGas).toString(16)).toString(),\n      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.toString(16)).toString(),\n    },\n    low: {\n      maxWaitTimeEstimate: 60_000,\n      minWaitTimeEstimate: 15_000,\n      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.plus(finalBaseFeePerGas).toString(16)).toString(),\n      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.toString(16)).toString(),\n    },\n  };\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<EthereumLegacyGasFeeEstimates> {\n  const result = await get<GasEstimatesLegacyAPIResponse>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n  });\n  // this returns decimal gwei\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport async function fetchEthGasPriceEstimate(provider: SafeEventEmitterProvider): Promise<{ gasPrice: string }> {\n  const gasPrice = await provider.request<never, string>({ method: METHOD_TYPES.ETH_GET_GAS_PRICE });\n  return {\n    gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n  };\n}\n\nexport function calculateTimeEstimate(\n  maxPriorityFeePerGas: string,\n  maxFeePerGas: string,\n  gasFeeEstimates: EthereumGasFeeEstimates\n): GasFeeTimeBounds {\n  // all are in dec gwei\n  const { low, medium, high, estimatedBaseFee } = gasFeeEstimates;\n\n  const maxPriorityFeePerGasInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(maxPriorityFeePerGas)), 16);\n  const maxFeePerGasInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(maxFeePerGas)), 16);\n  const estimatedBaseFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(estimatedBaseFee)), 16);\n\n  const effectiveMaxPriorityFee = BigNumber.min(maxPriorityFeePerGasInWEI, maxFeePerGasInWEI.minus(estimatedBaseFeeInWEI));\n\n  const lowMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(low.suggestedMaxPriorityFeePerGas)), 16);\n  const mediumMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(medium.suggestedMaxPriorityFeePerGas)), 16);\n  const highMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(high.suggestedMaxPriorityFeePerGas)), 16);\n\n  let lowerTimeBound: null | number;\n  let upperTimeBound: string | number;\n\n  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {\n    lowerTimeBound = null;\n    upperTimeBound = \"unknown\";\n  } else if (effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) && effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)) {\n    lowerTimeBound = low.minWaitTimeEstimate;\n    upperTimeBound = low.maxWaitTimeEstimate;\n  } else if (effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) && effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)) {\n    lowerTimeBound = medium.minWaitTimeEstimate;\n    upperTimeBound = medium.maxWaitTimeEstimate;\n  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {\n    lowerTimeBound = high.minWaitTimeEstimate;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  } else {\n    lowerTimeBound = 0;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  }\n\n  return {\n    lowerTimeBound,\n    upperTimeBound,\n  };\n}\n","import { addHexPrefix, isHexString } from \"@ethereumjs/util\";\nimport { BaseController } from \"@toruslabs/base-controllers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { cloneDeep } from \"lodash\";\nimport log from \"loglevel\";\n\nimport NetworkController from \"../Network/NetworkController\";\nimport { GAS_ESTIMATE_TYPES } from \"../utils/constants\";\nimport { idleTimeTracker } from \"../utils/helpers\";\nimport { EthereumNetworkState } from \"../utils/interfaces\";\nimport {\n  calculateTimeEstimate,\n  fetchEthGasPriceEstimate as defaultFetchEthGasPriceEstimate,\n  fetchGasEstimates as defaultFetchGasEstimates,\n  fetchGasEstimatesViaEthFeeHistory as defaultFetchGasEstimatesViaEthFeeHistory,\n  fetchLegacyGasPriceEstimates as defaultFetchLegacyGasPriceEstimates,\n} from \"./gasUtil\";\nimport { EthereumGasConfig, EthereumGasFeeEstimates, EthereumGasState, EthereumLegacyGasFeeEstimates, GasFeeTimeBounds } from \"./IGasFeeController\";\nconst GAS_FEE_API = \"https://mock-gas-server.herokuapp.com/\";\nconst LEGACY_GAS_PRICES_API_URL = \"https://api.metaswap.codefi.network/gasPrices\";\n\ninterface IGasFeeControllerOptions {\n  config?: Partial<EthereumGasConfig>;\n  state?: Partial<EthereumGasState>;\n  getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n  getProvider: NetworkController[\"getProvider\"];\n  getCurrentNetworkEIP1559Compatibility: NetworkController[\"getEIP1559Compatibility\"];\n  getCurrentAccountEIP1559Compatibility: (address: string) => boolean;\n  getCurrentNetworkLegacyGasAPICompatibility: () => boolean;\n  fetchGasEstimates?: (url: string) => Promise<EthereumGasFeeEstimates>;\n  fetchEthGasPriceEstimate?: (provider: SafeEventEmitterProvider) => Promise<{ gasPrice: string }>;\n  fetchLegacyGasPriceEstimates?: (url: string) => Promise<EthereumLegacyGasFeeEstimates>;\n  fetchGasEstimatesViaEthFeeHistory?: (provider: SafeEventEmitterProvider) => Promise<EthereumGasFeeEstimates>;\n  onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;\n}\n\n/**\n * Returns gas prices in dec gwei\n */\nexport default class GasFeeController extends BaseController<EthereumGasConfig, EthereumGasState> {\n  name = \"GasFeeController\";\n\n  // https://0x.org/docs/introduction/0x-cheat-sheet#swap-api-endpoints\n  readonly API_SUPPORTED_CHAINIDS = new Set([\"0x1\", \"0x5\", \"0x13881\", \"0xa4b1\", \"0xa86a\", \"0x2105\", \"0x38\", \"0xfa\", \"0xa\", \"0x89\"]);\n\n  private intervalId: number;\n\n  private provider: SafeEventEmitterProvider;\n\n  private currentChainId: string;\n\n  private getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n\n  private getProvider: NetworkController[\"getProvider\"];\n\n  private fetchGasEstimates: (url: string) => Promise<EthereumGasFeeEstimates>;\n\n  private fetchGasEstimatesViaEthFeeHistory: (provider: SafeEventEmitterProvider) => Promise<EthereumGasFeeEstimates>;\n\n  private fetchEthGasPriceEstimate: (provider: SafeEventEmitterProvider) => Promise<{ gasPrice: string }>;\n\n  private fetchLegacyGasPriceEstimates: (url: string) => Promise<EthereumLegacyGasFeeEstimates>;\n\n  private getCurrentNetworkEIP1559Compatibility: NetworkController[\"getEIP1559Compatibility\"];\n\n  private getCurrentAccountEIP1559Compatibility: (address?: string) => boolean;\n\n  private getCurrentNetworkLegacyGasAPICompatibility: () => boolean;\n\n  constructor({\n    config,\n    state,\n    getNetworkIdentifier,\n    getProvider,\n    fetchGasEstimates = defaultFetchGasEstimates,\n    fetchEthGasPriceEstimate = defaultFetchEthGasPriceEstimate,\n    fetchLegacyGasPriceEstimates = defaultFetchLegacyGasPriceEstimates,\n    fetchGasEstimatesViaEthFeeHistory = defaultFetchGasEstimatesViaEthFeeHistory,\n    getCurrentNetworkLegacyGasAPICompatibility,\n    getCurrentNetworkEIP1559Compatibility,\n    getCurrentAccountEIP1559Compatibility,\n    onNetworkStateChange,\n  }: IGasFeeControllerOptions) {\n    super({ config, state });\n    this.getNetworkIdentifier = getNetworkIdentifier;\n    this.getProvider = getProvider;\n    this.fetchGasEstimates = fetchGasEstimates;\n    this.fetchEthGasPriceEstimate = fetchEthGasPriceEstimate;\n    this.fetchLegacyGasPriceEstimates = fetchLegacyGasPriceEstimates;\n    this.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;\n    this.getCurrentNetworkLegacyGasAPICompatibility = getCurrentNetworkLegacyGasAPICompatibility;\n    this.getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility;\n    this.fetchGasEstimatesViaEthFeeHistory = fetchGasEstimatesViaEthFeeHistory;\n\n    this.defaultConfig = {\n      interval: 30_000,\n      legacyAPIEndpoint: LEGACY_GAS_PRICES_API_URL,\n      EIP1559APIEndpoint: GAS_FEE_API,\n    };\n\n    this.defaultState = {\n      gasFeeEstimates: {} as EthereumGasFeeEstimates,\n      estimatedGasFeeTimeBounds: {},\n      gasEstimateType: GAS_ESTIMATE_TYPES.NONE,\n    };\n    // Initialize.\n    this.currentChainId = this.getNetworkIdentifier();\n    this.provider = this.getProvider();\n    this.initialize();\n    onNetworkStateChange(() => {\n      this.onNetworkStateChange();\n    });\n  }\n\n  async onNetworkStateChange() {\n    this.provider = this.getProvider();\n    const newChainId = this.getNetworkIdentifier();\n    if (this.currentChainId !== newChainId) {\n      this.currentChainId = newChainId;\n      await this.resetPolling();\n    }\n  }\n\n  async resetPolling() {\n    this.stopPolling();\n    await this.getGasFeeEstimatesAndStartPolling();\n  }\n\n  async fetchGasFeeEstimates() {\n    return this._fetchGasFeeEstimateData();\n  }\n\n  async getGasFeeEstimatesAndStartPolling() {\n    await this._fetchGasFeeEstimateData();\n    this._startPolling();\n  }\n\n  disconnectPoller() {\n    this.stopPolling();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  destroy() {\n    this.stopPolling();\n  }\n\n  stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.resetState();\n  }\n\n  /**\n   * Gets and sets gasFeeEstimates in state\n   *\n   * @returns GasFeeEstimates\n   */\n  private async _fetchGasFeeEstimateData(): Promise<EthereumGasState> {\n    let isEIP1559Compatible: boolean;\n    const isLegacyGasAPICompatible = this.getCurrentNetworkLegacyGasAPICompatibility();\n\n    const chainId = this.getNetworkIdentifier();\n    if (chainId === \"loading\") return;\n    let chainIdInt: number;\n    if (typeof chainId === \"string\" && isHexString(addHexPrefix(chainId))) {\n      chainIdInt = Number.parseInt(chainId, 16);\n    }\n    try {\n      isEIP1559Compatible = await this.getEIP1559Compatibility();\n      log.info(\"eip1559 compatible\", isEIP1559Compatible);\n    } catch (error) {\n      log.warn(error);\n      isEIP1559Compatible = false;\n    }\n\n    let newState = cloneDeep(this.defaultState);\n\n    try {\n      if (isEIP1559Compatible) {\n        let estimates: EthereumGasFeeEstimates;\n        try {\n          if (this.API_SUPPORTED_CHAINIDS.has(chainId)) {\n            estimates = await this.fetchGasEstimates(this.config.EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainIdInt}`));\n          } else {\n            throw new Error(\"ChainId not supported by api\");\n          }\n        } catch (error) {\n          estimates = await this.fetchGasEstimatesViaEthFeeHistory(this.provider);\n        }\n        const { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = estimates.medium;\n        const estimatedGasFeeTimeBounds = this.getTimeEstimate(suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas);\n        newState = {\n          gasFeeEstimates: estimates,\n          estimatedGasFeeTimeBounds,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await this.fetchLegacyGasPriceEstimates(this.config.legacyAPIEndpoint.replace(\"<chain_id>\", `${chainIdInt}`));\n        newState = {\n          gasFeeEstimates: estimates,\n          estimatedGasFeeTimeBounds: {},\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate(this.provider);\n        newState = {\n          gasFeeEstimates: estimates,\n          estimatedGasFeeTimeBounds: {},\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    this.update(newState);\n\n    return newState;\n  }\n\n  private async _startPolling() {\n    this._poll();\n  }\n\n  private async _poll() {\n    if (this.intervalId) {\n      window.clearInterval(this.intervalId);\n    }\n    this.intervalId = window.setInterval(async () => {\n      if (!idleTimeTracker.checkIfIdle()) {\n        await this._fetchGasFeeEstimateData();\n      }\n    }, this.config.interval);\n  }\n\n  private resetState() {\n    this.update(cloneDeep(this.defaultState));\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible = this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible;\n  }\n\n  private getTimeEstimate(maxPriorityFeePerGas: string, maxFeePerGas: string): GasFeeTimeBounds {\n    if (!this.state.gasFeeEstimates || this.state.gasEstimateType !== GAS_ESTIMATE_TYPES.FEE_MARKET) {\n      return {};\n    }\n    return calculateTimeEstimate(maxPriorityFeePerGas, maxFeePerGas, this.state.gasFeeEstimates as EthereumGasFeeEstimates);\n  }\n}\n","import { TypedTransaction } from \"@ethereumjs/tx\";\nimport { addHexPrefix, bigIntToBytes, ecsign, stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  concatSig,\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { BaseConfig, BaseKeyringController, IKeyringController, KeyringControllerState } from \"@toruslabs/base-controllers\";\nimport { SigningKey, Wallet } from \"ethers\";\n\nexport default class KeyringController extends BaseKeyringController<Partial<BaseConfig>, KeyringControllerState> implements IKeyringController {\n  constructor({ config, state }: { config: Partial<BaseConfig>; state: Partial<KeyringControllerState> }) {\n    super({ config, state });\n    this.defaultState = { wallets: [] };\n    this.initialize();\n  }\n\n  async signTransaction<T, U>(tx: T, address: string): Promise<U> {\n    const txPayload = tx as unknown as TypedTransaction;\n    const wallet = this._getWalletForAccount(address);\n    const privKey = this.getBufferPrivateKey(wallet.privateKey);\n    const signedTx = txPayload.sign(privKey);\n    // Newer versions of Ethereumjs-tx are immutable and return a new tx object\n    return signedTx === undefined ? (tx as unknown as U) : (signedTx as unknown as U);\n  }\n\n  getAccounts(): string[] {\n    return this.state.wallets.map((w) => w.publicKey);\n  }\n\n  importAccount(accountPrivateKey: string): string {\n    const hexPrivateKey = addHexPrefix(accountPrivateKey);\n    const signingKey = new SigningKey(hexPrivateKey);\n    const wallet = new Wallet(signingKey.privateKey);\n    const { address } = wallet;\n\n    const existingWallet = this.state.wallets.find((w) => w.address === address);\n    if (existingWallet) return existingWallet.address;\n\n    this.update({\n      wallets: [\n        ...this.state.wallets,\n        {\n          publicKey: signingKey.publicKey,\n          privateKey: accountPrivateKey,\n          address,\n        },\n      ],\n    });\n    return address;\n  }\n\n  removeAccount(address: string): void {\n    const newWallets = [...this.state.wallets];\n    const idx = newWallets.findIndex((w) => w.address === address);\n    if (idx !== -1) {\n      newWallets.splice(idx, 1);\n      this.update({ wallets: newWallets });\n    }\n  }\n\n  getBufferPrivateKey(privateKey: string) {\n    const stripped = stripHexPrefix(privateKey);\n    return Buffer.from(stripped, \"hex\");\n  }\n\n  // For eth_sign, we need to sign arbitrary data:\n  async signMessage(data: string, address: string): Promise<string> {\n    const wallet = this._getWalletForAccount(address);\n    const privKey = this.getBufferPrivateKey(wallet.privateKey);\n    const messageSig = ecsign(Buffer.from(stripHexPrefix(data), \"hex\"), privKey);\n    const sig = concatSig(Buffer.from(bigIntToBytes(messageSig.v)), Buffer.from(messageSig.r), Buffer.from(messageSig.s));\n    return sig;\n  }\n\n  // For personal_sign, we need to prefix the message: ensure input is hashed and not buffer of utf-8\n  async signPersonalMessage(data: string, address: string) {\n    const wallet = this._getWalletForAccount(address);\n    const privKey = this.getBufferPrivateKey(wallet.privateKey);\n    const sig = personalSign({ privateKey: privKey, data });\n    return sig;\n  }\n\n  // personal_signTypedData, signs data along with the schema\n  async signTypedData<V extends SignTypedDataVersion, T extends MessageTypes>(\n    typedData: V extends \"V1\" ? TypedDataV1 : TypedMessage<T>,\n    address: string,\n    version: V\n  ) {\n    const wallet = this._getWalletForAccount(address);\n    const privKey = this.getBufferPrivateKey(wallet.privateKey);\n    return signTypedData({ privateKey: privKey, data: typedData, version });\n  }\n\n  signEncryptionPublicKey(address: string) {\n    const wallet = this._getWalletForAccount(address);\n    return getEncryptionPublicKey(stripHexPrefix(wallet.privateKey));\n  }\n\n  decryptMessage(data: EthEncryptedData, address: string) {\n    const wallet = this._getWalletForAccount(address);\n    return decrypt({ encryptedData: data, privateKey: stripHexPrefix(wallet.privateKey) });\n  }\n\n  private _getWalletForAccount(account: string) {\n    const address = account.toLowerCase();\n    const wallet = this.state.wallets.find((w) => w.address.toLowerCase() === address);\n    if (!wallet) throw new Error(\"Torus Keyring - Unable to find matching address.\");\n    return wallet;\n  }\n}\n","import { SignTypedDataVersion } from \"@metamask/eth-sig-util\";\nimport { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { BaseConfig, BaseController, BaseState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, Json } from \"@toruslabs/openlogin-jrpc\";\n\nimport NetworkController from \"../Network/NetworkController\";\nimport { MessageStatus } from \"../utils/constants\";\nimport { AbstractMessage, BaseRequestParams, MessageStatusType, UserRequestApprovalParams } from \"../utils/interfaces\";\n\nexport interface MessageControllerState<M extends AbstractMessage> extends BaseState {\n  unapprovedMessages: Record<string, M>;\n  unapprovedMessagesCount: number;\n}\n\nexport default abstract class AbstractMessageController<M extends AbstractMessage, P extends BaseRequestParams> extends BaseController<\n  BaseConfig,\n  MessageControllerState<M>\n> {\n  protected messages: M[];\n\n  protected getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n\n  /**\n   * Controller in charge of managing - storing, adding, removing, updating - Messages.\n   *\n   */\n  constructor({\n    config,\n    state,\n    getNetworkIdentifier,\n  }: {\n    config?: Partial<BaseConfig>;\n    state?: Partial<MessageControllerState<M>>;\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n  }) {\n    super({ config, state });\n    this.defaultState = {\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0,\n    };\n    this.messages = [];\n    this.defaultConfig = {};\n    this.getNetworkIdentifier = getNetworkIdentifier;\n    super.initialize();\n  }\n\n  getMessage(messageId: string) {\n    return this.messages.find((message) => message.id === messageId);\n  }\n\n  getAllMessages() {\n    return this.messages;\n  }\n\n  setMetadata(messageId: string, metadata: Json) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    message.metadata = metadata;\n    this.updateMessage(message);\n  }\n\n  getUnapprovedMessages() {\n    return this.messages\n      .filter((message) => message.status === MessageStatus.UNAPPROVED)\n      .reduce((result: { [key: string]: M }, message: M) => {\n        result[message.id] = message;\n        return result;\n      }, {}) as { [key: string]: M };\n  }\n\n  async addMessage(message: M) {\n    this.messages.push(message);\n    this.saveMessageList();\n  }\n\n  approveMessage(messageId: string, messageParams: P): Promise<P> {\n    this.setMessageStatus(messageId, MessageStatus.APPROVED);\n    return this.prepMessageForSigning(messageParams);\n  }\n\n  setMessageStatus(messageId: string, status: MessageStatusType) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    message.status = status;\n    this.updateMessage(message);\n    this.emit(`${messageId}:${status}`, message);\n    if (status === MessageStatus.REJECTED || status === MessageStatus.SIGNED || status === MessageStatus.FAILED) {\n      this.emit(`${messageId}:finished`, message);\n    }\n  }\n\n  async waitForFinishStatus(msgParams: P, messageName: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const handleFinished = (msg: M) => {\n        if (msg.status === MessageStatus.REJECTED) {\n          return reject(providerErrors.userRejectedRequest(`${messageName} Signature: User denied message signature`));\n        }\n        if (msg.status === MessageStatus.FAILED) {\n          return reject(rpcErrors.internal(`${messageName} Signature: failed to sign message ${msg.error}`));\n        }\n        if (msg.status === MessageStatus.SIGNED) {\n          return resolve(msg.rawSig as string);\n        }\n\n        return reject(rpcErrors.internal(`${messageName} Signature: Unknown problem: ${JSON.stringify(msgParams)}`));\n      };\n      this.once(`${msgParams.id}:finished`, handleFinished);\n    });\n  }\n\n  protected updateMessage(message: M) {\n    const index = this.messages.findIndex((msg) => message.id === msg.id);\n    if (index !== -1) {\n      this.messages[index] = message;\n    }\n    this.saveMessageList();\n  }\n\n  protected saveMessageList() {\n    const unapprovedMessages = this.getUnapprovedMessages();\n    const unapprovedMessagesCount = Object.keys(unapprovedMessages).length;\n    this.update({ unapprovedMessages, unapprovedMessagesCount });\n  }\n\n  abstract prepMessageForSigning(messageParams: P): Promise<P>;\n\n  abstract addUnapprovedMessage(\n    messageParams: P,\n    request: JRPCRequest<P> & UserRequestApprovalParams,\n    version?: SignTypedDataVersion\n  ): Promise<string>;\n}\n","import { addHexPrefix, bytesToHex, isValidAddress, stripHexPrefix } from \"@ethereumjs/util\";\nimport { EthEncryptedData, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { isHexString, JsonRpcProvider, toQuantity } from \"ethers\";\nimport { validate } from \"jsonschema\";\n\nimport {\n  AddChainMessageParams,\n  DecryptMessageParams,\n  EncryptionPublicKeyParams,\n  MessageParams,\n  SwitchChainMessageParams,\n  TypedMessageParams,\n} from \"../utils/interfaces\";\n\nconst hexRe = /^[0-9A-Fa-f]+$/gu;\n\nexport function validateAddress(address: string, propertyName: string) {\n  if (!address || typeof address !== \"string\" || !isValidAddress(address)) {\n    throw new Error(`Invalid \"${propertyName}\" address: ${address} must be a valid string.`);\n  }\n}\n\nexport function validateSignMessageData(messageData: MessageParams) {\n  const { from, data } = messageData;\n  validateAddress(from, \"from\");\n\n  if (!data || typeof data !== \"string\") {\n    throw new Error(`Invalid message \"data\": ${data} must be a valid string.`);\n  }\n}\n\nexport function normalizeMessageData(data: string): string {\n  try {\n    const stripped = stripHexPrefix(data);\n    if (stripped.match(hexRe)) {\n      return addHexPrefix(stripped);\n    }\n  } catch (e) {}\n  return bytesToHex(Buffer.from(data, \"utf8\"));\n}\n\nexport function validateTypedSignMessageDataV1(messageData: TypedMessageParams) {\n  validateAddress(messageData.from, \"from\");\n\n  if (!messageData.data || !Array.isArray(messageData.data)) {\n    throw new Error(`Invalid message \"data\": ${messageData.data} must be a valid array.`);\n  }\n\n  try {\n    // typedSignatureHash will throw if the data is invalid.\n    typedSignatureHash(messageData.data as TypedDataV1Field[]);\n  } catch (e) {\n    throw new Error(`Expected EIP712 typed data.`);\n  }\n}\n\nexport function validateTypedSignMessageDataV3V4(messageData: TypedMessageParams, currentChainId: string) {\n  validateAddress(messageData.from, \"from\");\n\n  if (!messageData.data || Array.isArray(messageData.data) || (typeof messageData.data !== \"object\" && typeof messageData.data !== \"string\")) {\n    throw new Error(`Invalid message \"data\": Must be a valid string or object.`);\n  }\n\n  let data;\n  if (typeof messageData.data === \"object\") {\n    data = messageData.data;\n  } else {\n    try {\n      data = JSON.parse(messageData.data);\n    } catch (e) {\n      throw new Error(\"Data must be passed as a valid JSON string.\");\n    }\n  }\n\n  const validation = validate(data, TYPED_MESSAGE_SCHEMA);\n  if (validation.errors.length > 0) {\n    throw new Error(\"Data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n  }\n\n  if (!currentChainId) {\n    throw new Error(\"Current chainId cannot be null or undefined.\");\n  }\n\n  let { chainId } = data.domain;\n  if (chainId) {\n    if (typeof chainId === \"string\") {\n      chainId = parseInt(chainId, chainId.startsWith(\"0x\") ? 16 : 10);\n    }\n\n    const activeChainId = parseInt(currentChainId, 16);\n    if (Number.isNaN(activeChainId)) {\n      throw new Error(`Cannot sign messages for chainId \"${chainId}\", because MetaMask is switching networks.`);\n    }\n\n    if (chainId !== activeChainId) {\n      throw new Error(`Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n    }\n  }\n}\n\nexport function validateEncryptionPublicKeyMessageData(messageData: EncryptionPublicKeyParams) {\n  const { from } = messageData;\n  validateAddress(from, \"from\");\n}\n\nexport function validateDecryptedMessageData(messageData: DecryptMessageParams) {\n  const { from } = messageData;\n  validateAddress(from, \"from\");\n}\n\nexport function parseDecryptMessageData(data: string): EthEncryptedData {\n  const stripped = stripHexPrefix(data);\n  const buffer = Buffer.from(stripped, \"hex\");\n  return JSON.parse(buffer.toString(\"utf8\")) as EthEncryptedData;\n}\n\nexport async function validateAddChainData(data: AddChainMessageParams) {\n  const { chainId, rpcUrls, nativeCurrency } = data || {};\n\n  if (!chainId) {\n    throw new Error(\"Invalid add chain params: please pass chainId in params\");\n  }\n\n  if (!isHexString(chainId)) {\n    throw new Error(\"Invalid add chain params: please pass a valid hex chainId in params, for: ex: 0x1\");\n  }\n\n  if (!rpcUrls || rpcUrls.length === 0) throw new Error(\"params.rpcUrls not provided\");\n  if (!nativeCurrency) throw new Error(\"params.nativeCurrency not provided\");\n  const { name, symbol, decimals } = nativeCurrency;\n\n  if (!name) throw new Error(\"params.nativeCurrency.name not provided\");\n  if (!symbol) throw new Error(\"params.nativeCurrency.symbol not provided\");\n  if (decimals === undefined) throw new Error(\"params.nativeCurrency.decimals not provided\");\n\n  const _web3 = new JsonRpcProvider(rpcUrls[0], \"any\");\n  const { chainId: networkChainID } = await _web3.getNetwork();\n  if (Number.parseInt(networkChainID.toString()) !== Number.parseInt(chainId, 16)) {\n    throw new Error(\n      `Provided rpc url's chainId version is not matching with provided chainId, expected: ${toQuantity(networkChainID)}, received: ${chainId}`\n    );\n  }\n}\n\nexport function validateSwitchChainData(data: SwitchChainMessageParams) {\n  const { chainId } = data || {};\n\n  if (!chainId) {\n    throw new Error(\"Invalid switch chain params: please pass chainId in params\");\n  }\n\n  if (!isHexString(chainId)) {\n    throw new Error(\"Invalid switch chain params: please pass a valid hex chainId in params, for: ex: 0x1\");\n  }\n}\n","import { BaseConfig, randomId } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport NetworkController from \"../Network/NetworkController\";\nimport PreferencesController from \"../Preferences/PreferencesController\";\nimport { MESSAGE_EVENTS, MessageStatus, METHOD_TYPES } from \"../utils/constants\";\nimport { AddChainMessage, AddChainMessageParams, UserRequestApprovalParams } from \"../utils/interfaces\";\nimport AbstractMessageController, { MessageControllerState } from \"./AbstractMessageController\";\nimport { validateAddChainData } from \"./utils\";\n\nexport class AddChainController extends AbstractMessageController<AddChainMessage, AddChainMessageParams> {\n  override name = \"AddChainController\";\n\n  protected addChain: PreferencesController[\"addChain\"];\n\n  constructor({\n    config,\n    state,\n    getNetworkIdentifier,\n    addChain,\n  }: {\n    config: Partial<BaseConfig>;\n    state: Partial<MessageControllerState<AddChainMessage>>;\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n    addChain: PreferencesController[\"addChain\"];\n  }) {\n    super({ config, state, getNetworkIdentifier });\n    this.addChain = addChain;\n    this.initialize();\n  }\n\n  async processAddChain(messageId: string): Promise<string> {\n    try {\n      const msgObject = this.getMessage(messageId);\n      await this.approveMessage(messageId, msgObject.messageParams);\n      this.addChain(msgObject.messageParams);\n      this.updateMessage({ ...msgObject, rawSig: JSON.stringify(msgObject.messageParams) });\n      this.setMessageStatus(messageId, MessageStatus.SIGNED);\n      return null;\n    } catch (error) {\n      log.error(error);\n      this.setMessageStatus(messageId, MessageStatus.FAILED);\n    }\n  }\n\n  async addNewUnapprovedMessage(messageParams: AddChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    await this.addUnapprovedMessage(messageParams, req);\n    return this.waitForFinishStatus(messageParams, this.name);\n  }\n\n  async addUnapprovedMessage(messageParams: AddChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    validateAddChainData(messageParams);\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    const messageId = messageParams.id || randomId();\n    const messageData: AddChainMessage = {\n      id: messageId,\n      messageParams,\n      status: MessageStatus.UNAPPROVED,\n      time: Date.now(),\n      type: METHOD_TYPES.ADD_CHAIN,\n    };\n    await this.addMessage(messageData);\n    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, { messageData, req });\n    return messageId;\n  }\n\n  prepMessageForSigning(messageParams: AddChainMessageParams): Promise<AddChainMessageParams> {\n    return Promise.resolve(messageParams);\n  }\n}\n","// import { isValidAddress } from \"@ethereumjs/util\";\nimport { BaseConfig, randomId } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport KeyringController from \"../Keyring/KeyringController\";\nimport NetworkController from \"../Network/NetworkController\";\nimport { MESSAGE_EVENTS, MessageStatus, METHOD_TYPES } from \"../utils/constants\";\nimport { DecryptMessage, DecryptMessageParams, Message, UserRequestApprovalParams } from \"../utils/interfaces\";\nimport AbstractMessageController, { MessageControllerState } from \"./AbstractMessageController\";\nimport { normalizeMessageData, parseDecryptMessageData, validateDecryptedMessageData } from \"./utils\";\n\nexport class DecryptMessageController extends AbstractMessageController<DecryptMessage, DecryptMessageParams> {\n  override name = \"DecryptMessageController\";\n\n  protected decryptMessage: KeyringController[\"decryptMessage\"];\n\n  constructor({\n    config,\n    state,\n    decryptMessage,\n    getNetworkIdentifier,\n  }: {\n    config: Partial<BaseConfig>;\n    state: Partial<MessageControllerState<Message>>;\n    decryptMessage: KeyringController[\"decryptMessage\"];\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n  }) {\n    super({ config, state, getNetworkIdentifier });\n    this.decryptMessage = decryptMessage;\n    this.initialize();\n  }\n\n  async processDecryptMessage(messageId: string): Promise<string> {\n    try {\n      const msgObject = this.getMessage(messageId);\n      const cleanMsgParams = await this.approveMessage(messageId, msgObject.messageParams);\n      const parsedData = parseDecryptMessageData(cleanMsgParams.data);\n      const rawSig = this.decryptMessage(parsedData, cleanMsgParams.from);\n      this.updateMessage({ ...msgObject, rawSig });\n      this.setMessageStatus(messageId, MessageStatus.SIGNED);\n      return rawSig;\n    } catch (error) {\n      log.error(error);\n      this.setMessageStatus(messageId, MessageStatus.FAILED);\n    }\n  }\n\n  async addNewUnapprovedMessage(messageParams: DecryptMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    await this.addUnapprovedMessage(messageParams, req);\n    return this.waitForFinishStatus(messageParams, this.name);\n  }\n\n  async addUnapprovedMessage(messageParams: DecryptMessageParams, req?: JRPCRequest<unknown> & UserRequestApprovalParams) {\n    validateDecryptedMessageData(messageParams);\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    messageParams.data = normalizeMessageData(messageParams.data);\n    const messageId = messageParams.id || randomId();\n    const messageData: DecryptMessage = {\n      id: messageId,\n      messageParams,\n      status: MessageStatus.UNAPPROVED,\n      time: Date.now(),\n      type: METHOD_TYPES.ETH_DECRYPT,\n    };\n    await this.addMessage(messageData);\n    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, { messageData, req });\n    return messageId;\n  }\n\n  prepMessageForSigning(messageParams: DecryptMessageParams): Promise<DecryptMessageParams> {\n    return Promise.resolve({ ...messageParams });\n  }\n}\n","// import { isValidAddress } from \"@ethereumjs/util\";\nimport { BaseConfig, randomId } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport KeyringController from \"../Keyring/KeyringController\";\nimport NetworkController from \"../Network/NetworkController\";\nimport { MESSAGE_EVENTS, MessageStatus, METHOD_TYPES } from \"../utils/constants\";\nimport { EncryptionPublicKey, EncryptionPublicKeyParams, UserRequestApprovalParams } from \"../utils/interfaces\";\nimport AbstractMessageController, { MessageControllerState } from \"./AbstractMessageController\";\nimport { validateEncryptionPublicKeyMessageData } from \"./utils\";\n\nexport class EncryptionPublicKeyController extends AbstractMessageController<EncryptionPublicKey, EncryptionPublicKeyParams> {\n  override name = \"EncryptionPublicKeyController\";\n\n  protected signEncryptionPublicKey: KeyringController[\"signEncryptionPublicKey\"];\n\n  constructor({\n    config,\n    state,\n    signEncryptionPublicKey,\n    getNetworkIdentifier,\n  }: {\n    config: Partial<BaseConfig>;\n    state: Partial<MessageControllerState<EncryptionPublicKey>>;\n    signEncryptionPublicKey: KeyringController[\"signEncryptionPublicKey\"];\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n  }) {\n    super({ config, state, getNetworkIdentifier });\n    this.signEncryptionPublicKey = signEncryptionPublicKey;\n    this.initialize();\n  }\n\n  async processGetEncryptionPublicKey(messageId: string): Promise<string> {\n    try {\n      const msgObject = this.getMessage(messageId);\n      const cleanMsgParams = await this.approveMessage(messageId, msgObject.messageParams);\n      const publicKey = this.signEncryptionPublicKey(cleanMsgParams.from);\n      this.updateMessage({ ...msgObject, rawSig: publicKey });\n      this.setMessageStatus(messageId, MessageStatus.SIGNED);\n      return publicKey;\n    } catch (error) {\n      log.error(error);\n      this.setMessageStatus(messageId, MessageStatus.FAILED);\n    }\n  }\n\n  async addNewUnapprovedMessage(messageParams: EncryptionPublicKeyParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    await this.addUnapprovedMessage(messageParams, req);\n    return this.waitForFinishStatus(messageParams, this.name);\n  }\n\n  async addUnapprovedMessage(messageParams: EncryptionPublicKeyParams, req?: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    validateEncryptionPublicKeyMessageData(messageParams);\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    const messageId = messageParams.id || randomId();\n    const messageData: EncryptionPublicKey = {\n      id: messageId,\n      messageParams,\n      status: MessageStatus.UNAPPROVED,\n      time: Date.now(),\n      type: METHOD_TYPES.ETH_GET_ENCRYPTION_PUBLIC_KEY,\n    };\n    await this.addMessage(messageData);\n    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, { messageData, req });\n    return messageId;\n  }\n\n  prepMessageForSigning(messageParams: EncryptionPublicKeyParams): Promise<EncryptionPublicKeyParams> {\n    // From should be the public key for the encryption\n    return Promise.resolve({ ...messageParams, from: messageParams.data });\n  }\n}\n","import { BaseConfig, randomId } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport KeyringController from \"../Keyring/KeyringController\";\nimport NetworkController from \"../Network/NetworkController\";\nimport { MESSAGE_EVENTS, MessageStatus, METHOD_TYPES } from \"../utils/constants\";\nimport { Message, MessageParams, UserRequestApprovalParams } from \"../utils/interfaces\";\nimport AbstractMessageController, { MessageControllerState } from \"./AbstractMessageController\";\nimport { normalizeMessageData, validateSignMessageData } from \"./utils\";\n\nexport class MessageController extends AbstractMessageController<Message, MessageParams> {\n  override name = \"MessageController\";\n\n  protected signMessage: KeyringController[\"signMessage\"];\n\n  constructor({\n    config,\n    state,\n    signMessage,\n    getNetworkIdentifier,\n  }: {\n    config: Partial<BaseConfig>;\n    state: Partial<MessageControllerState<Message>>;\n    signMessage: KeyringController[\"signMessage\"];\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n  }) {\n    super({ config, state, getNetworkIdentifier });\n    this.signMessage = signMessage;\n    this.initialize();\n  }\n\n  async processSignMessage(messageId: string): Promise<string> {\n    try {\n      const msgObject = this.getMessage(messageId);\n      const cleanMsgParams = await this.approveMessage(messageId, msgObject.messageParams);\n      const rawSig = await this.signMessage(cleanMsgParams.data, cleanMsgParams.from);\n      this.updateMessage({ ...msgObject, rawSig });\n      this.setMessageStatus(messageId, MessageStatus.SIGNED);\n      return rawSig;\n    } catch (error) {\n      log.error(error);\n      this.setMessageStatus(messageId, MessageStatus.FAILED);\n    }\n  }\n\n  async addNewUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    await this.addUnapprovedMessage(messageParams, req);\n    return this.waitForFinishStatus(messageParams, this.name);\n  }\n\n  async addUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    validateSignMessageData(messageParams);\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    messageParams.data = normalizeMessageData(messageParams.data);\n    const messageId = messageParams.id || randomId();\n    const messageData: Message = {\n      id: messageId,\n      messageParams,\n      status: MessageStatus.UNAPPROVED,\n      time: Date.now(),\n      type: METHOD_TYPES.ETH_SIGN,\n    };\n    await this.addMessage(messageData);\n    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, { messageData, req });\n    return messageId;\n  }\n\n  prepMessageForSigning(messageParams: MessageParams): Promise<MessageParams> {\n    return Promise.resolve(messageParams);\n  }\n}\n","import { BaseConfig, randomId } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport KeyringController from \"../Keyring/KeyringController\";\nimport NetworkController from \"../Network/NetworkController\";\nimport { MESSAGE_EVENTS, MessageStatus, METHOD_TYPES } from \"../utils/constants\";\nimport { Message, MessageParams, UserRequestApprovalParams } from \"../utils/interfaces\";\nimport AbstractMessageController, { MessageControllerState } from \"./AbstractMessageController\";\nimport { normalizeMessageData, validateSignMessageData } from \"./utils\";\n\nexport class PersonalMessageController extends AbstractMessageController<Message, MessageParams> {\n  override name = \"PersonalMessageController\";\n\n  protected signPersonalMessage: KeyringController[\"signPersonalMessage\"];\n\n  constructor({\n    config,\n    state,\n    signPersonalMessage,\n    getNetworkIdentifier,\n  }: {\n    config: Partial<BaseConfig>;\n    state: Partial<MessageControllerState<Message>>;\n    signPersonalMessage: KeyringController[\"signPersonalMessage\"];\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n  }) {\n    super({ config, state, getNetworkIdentifier });\n    this.signPersonalMessage = signPersonalMessage;\n    this.initialize();\n  }\n\n  async processPersonalSignMessage(messageId: string): Promise<string> {\n    try {\n      const msgObject = this.getMessage(messageId);\n      const cleanMsgParams = await this.approveMessage(messageId, msgObject.messageParams);\n      const rawSig = await this.signPersonalMessage(cleanMsgParams.data, cleanMsgParams.from);\n      this.updateMessage({ ...msgObject, rawSig });\n      this.setMessageStatus(messageId, MessageStatus.SIGNED);\n      return rawSig;\n    } catch (error) {\n      log.error(error);\n      this.setMessageStatus(messageId, MessageStatus.FAILED);\n    }\n  }\n\n  async addNewUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    await this.addUnapprovedMessage(messageParams, req);\n    return this.waitForFinishStatus(messageParams, this.name);\n  }\n\n  async addUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    validateSignMessageData(messageParams);\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    messageParams.data = normalizeMessageData(messageParams.data);\n    const messageId = messageParams.id || randomId();\n    const messageData: Message = {\n      id: messageId,\n      messageParams,\n      status: MessageStatus.UNAPPROVED,\n      time: Date.now(),\n      type: METHOD_TYPES.PERSONAL_SIGN,\n    };\n    await this.addMessage(messageData);\n    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, { messageData, req });\n    return messageId;\n  }\n\n  prepMessageForSigning(messageParams: MessageParams): Promise<MessageParams> {\n    return Promise.resolve(messageParams);\n  }\n}\n","import { BaseConfig, randomId } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport NetworkController from \"../Network/NetworkController\";\nimport PreferencesController from \"../Preferences/PreferencesController\";\nimport { MESSAGE_EVENTS, MessageStatus, METHOD_TYPES } from \"../utils/constants\";\nimport { SwitchChainMessage, SwitchChainMessageParams, UserRequestApprovalParams } from \"../utils/interfaces\";\nimport AbstractMessageController, { MessageControllerState } from \"./AbstractMessageController\";\nimport { validateSwitchChainData } from \"./utils\";\n\nexport class SwitchChainController extends AbstractMessageController<SwitchChainMessage, SwitchChainMessageParams> {\n  override name = \"SwitchChainController\";\n\n  protected switchChain: PreferencesController[\"switchChain\"];\n\n  constructor({\n    config,\n    state,\n    getNetworkIdentifier,\n    switchChain,\n  }: {\n    config: Partial<BaseConfig>;\n    state: Partial<MessageControllerState<SwitchChainMessage>>;\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n    switchChain: PreferencesController[\"switchChain\"];\n  }) {\n    super({ config, state, getNetworkIdentifier });\n\n    this.switchChain = switchChain;\n    this.initialize();\n  }\n\n  async processSwitchChain(messageId: string): Promise<string> {\n    try {\n      const msgObject = this.getMessage(messageId);\n      await this.approveMessage(messageId, msgObject.messageParams);\n      this.switchChain({ chainId: msgObject.messageParams.chainId });\n      this.updateMessage({ ...msgObject, rawSig: JSON.stringify(msgObject.messageParams) });\n      this.setMessageStatus(messageId, MessageStatus.SIGNED);\n      return null;\n    } catch (error) {\n      log.error(error);\n      this.setMessageStatus(messageId, MessageStatus.FAILED);\n    }\n  }\n\n  async addNewUnapprovedMessage(messageParams: SwitchChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    await this.addUnapprovedMessage(messageParams, req);\n    return this.waitForFinishStatus(messageParams, this.name);\n  }\n\n  async addUnapprovedMessage(messageParams: SwitchChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string> {\n    validateSwitchChainData(messageParams);\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    const messageId = messageParams.id || randomId();\n    const messageData: SwitchChainMessage = {\n      id: messageId,\n      messageParams,\n      status: MessageStatus.UNAPPROVED,\n      time: Date.now(),\n      type: METHOD_TYPES.SWITCH_CHAIN,\n    };\n    await this.addMessage(messageData);\n    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, { messageData, req });\n    return messageId;\n  }\n\n  prepMessageForSigning(messageParams: SwitchChainMessageParams): Promise<SwitchChainMessageParams> {\n    return Promise.resolve(messageParams);\n  }\n}\n","import { MessageTypes, SignTypedDataVersion, TypedDataV1, TypedMessage as EthSigTypedMessage } from \"@metamask/eth-sig-util\";\nimport { BaseConfig, randomId } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport KeyringController from \"../Keyring/KeyringController\";\nimport NetworkController from \"../Network/NetworkController\";\nimport { MESSAGE_EVENTS, MessageStatus, METHOD_TYPES } from \"../utils/constants\";\nimport { METHOD_TYPES_TYPE, TypedMessage, TypedMessageParams, UserRequestApprovalParams } from \"../utils/interfaces\";\nimport AbstractMessageController, { MessageControllerState } from \"./AbstractMessageController\";\nimport { validateTypedSignMessageDataV1, validateTypedSignMessageDataV3V4 } from \"./utils\";\n\nfunction getMessageType(version: SignTypedDataVersion): METHOD_TYPES_TYPE {\n  switch (version) {\n    case SignTypedDataVersion.V1:\n      return METHOD_TYPES.ETH_SIGN_TYPED_DATA;\n    case SignTypedDataVersion.V3:\n      return METHOD_TYPES.ETH_SIGN_TYPED_DATA_V3;\n    case SignTypedDataVersion.V4:\n      return METHOD_TYPES.ETH_SIGN_TYPED_DATA_V4;\n    default:\n      return METHOD_TYPES.ETH_SIGN_TYPED_DATA;\n  }\n}\n\nexport class TypedMessageController extends AbstractMessageController<TypedMessage, TypedMessageParams> {\n  override name = \"TypedMessageController\";\n\n  protected signTypedData: KeyringController[\"signTypedData\"];\n\n  constructor({\n    config,\n    state,\n    signTypedData,\n    getNetworkIdentifier,\n  }: {\n    config: Partial<BaseConfig>;\n    state: Partial<MessageControllerState<TypedMessage>>;\n    signTypedData: KeyringController[\"signTypedData\"];\n    getNetworkIdentifier: NetworkController[\"getNetworkIdentifier\"];\n  }) {\n    super({ config, state, getNetworkIdentifier });\n    this.signTypedData = signTypedData;\n    this.initialize();\n  }\n\n  async processPersonalSignMessage(messageId: string): Promise<string> {\n    try {\n      const msgObject = this.getMessage(messageId);\n      const cleanMsgParams = await this.approveMessage(messageId, msgObject.messageParams);\n      const msgData = cleanMsgParams.version === SignTypedDataVersion.V1 ? cleanMsgParams.data : JSON.parse(cleanMsgParams.data as string);\n      const rawSig = await this.signTypedData(msgData as TypedDataV1 | EthSigTypedMessage<MessageTypes>, cleanMsgParams.from, cleanMsgParams.version);\n      this.updateMessage({ ...msgObject, rawSig });\n      this.setMessageStatus(messageId, MessageStatus.SIGNED);\n      return rawSig;\n    } catch (error) {\n      log.error(error);\n      this.setMessageStatus(messageId, MessageStatus.FAILED);\n    }\n  }\n\n  async addNewUnapprovedMessage(\n    messageParams: TypedMessageParams,\n    req: JRPCRequest<unknown> & UserRequestApprovalParams,\n    version: SignTypedDataVersion\n  ): Promise<string> {\n    await this.addUnapprovedMessage(messageParams, req, version);\n    return this.waitForFinishStatus(messageParams, this.name);\n  }\n\n  async addUnapprovedMessage(\n    messageParams: TypedMessageParams,\n    req: JRPCRequest<unknown> & UserRequestApprovalParams,\n    version: SignTypedDataVersion\n  ): Promise<string> {\n    if (version === SignTypedDataVersion.V1) {\n      validateTypedSignMessageDataV1(messageParams);\n    }\n\n    if (version === SignTypedDataVersion.V3 || version === SignTypedDataVersion.V4) {\n      const currentChainId = this.getNetworkIdentifier();\n      validateTypedSignMessageDataV3V4(messageParams, currentChainId);\n    }\n\n    if (typeof messageParams.data !== \"string\" && (version === SignTypedDataVersion.V3 || version === SignTypedDataVersion.V4)) {\n      messageParams.data = JSON.stringify(messageParams.data);\n    }\n\n    if (req) {\n      messageParams.origin = req.origin;\n    }\n    messageParams.version = version;\n    const messageId = messageParams.id || randomId();\n    const messageData: TypedMessage = {\n      id: messageId,\n      messageParams,\n      status: MessageStatus.UNAPPROVED,\n      time: Date.now(),\n      type: getMessageType(version),\n    };\n    await this.addMessage(messageData);\n    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, { messageData, req });\n    return messageId;\n  }\n\n  prepMessageForSigning(messageParams: TypedMessageParams): Promise<TypedMessageParams> {\n    return Promise.resolve(messageParams);\n  }\n}\n","import { SignTypedDataVersion } from \"@metamask/eth-sig-util\";\nimport { InPageWalletProviderState, PROVIDER_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\n\nimport { METHOD_TYPES, TRANSACTION_ENVELOPE_TYPES } from \"../utils/constants\";\nimport {\n  AddChainMessageParams,\n  BlockParams,\n  EncryptionPublicKeyParams,\n  EthereumTransactionMeta,\n  MessageParams,\n  SwitchChainMessageParams,\n  TransactionParams,\n  TransactionRPCMeta,\n  TypedMessageParams,\n  UserRequestApprovalParams,\n} from \"../utils/interfaces\";\n\nexport interface IProviderHandlers {\n  version: string;\n  requestAccounts?: (req: JRPCRequest<string[]>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<string[]>) => Promise<string[]>;\n\n  // All operations which open popup window or modal should operate with a windowId parameter\n  processTransaction?: (txParams: TransactionParams, req: JRPCRequest<TransactionParams> & UserRequestApprovalParams) => Promise<string>;\n\n  processEthSignMessage?: (msgParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n  processTypedMessage?: (msgParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n  processTypedMessageV3?: (msgParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n  processTypedMessageV4?: (msgParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n  processPersonalMessage?: (msgParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n\n  processEncryptionPublicKey?: (msgParams: EncryptionPublicKeyParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n  processDecryptMessage?: (msgParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n\n  processSwitchEthereumChain?: (msgParams: SwitchChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n\n  processAddEthereumChain?: (msgParams: AddChainMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams) => Promise<string>;\n\n  getPendingNonce?: (\n    nonceParams: { address: string; blockReference: string },\n    req: JRPCRequest<{ address: string; blockReference: string }>\n  ) => Promise<string>;\n  getPendingTransactionByHash?: (hash: string, req: JRPCRequest<string>) => Promise<EthereumTransactionMeta>;\n\n  getProviderState: (\n    req: JRPCRequest<[]>,\n    res: JRPCResponse<InPageWalletProviderState>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => void;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<never, string[]> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.GET_ACCOUNTS) return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n  });\n}\n\nexport function createProcessTransactionMiddleware({\n  processTransaction,\n}: {\n  processTransaction: IProviderHandlers[\"processTransaction\"];\n}): JRPCMiddleware<TransactionParams, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ETH_TRANSACTION) return next();\n\n    if (!processTransaction) throw new Error(\"WalletMiddleware - opts.processTransaction not provided\");\n\n    response.result = await processTransaction(request.params, request);\n  });\n}\n\nexport function createProcessEthSignMessage({\n  processEthSignMessage,\n}: {\n  processEthSignMessage: IProviderHandlers[\"processEthSignMessage\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ETH_SIGN) return next();\n\n    if (!processEthSignMessage) throw new Error(\"WalletMiddleware - opts.processEthSignMessage not provided\");\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: MessageParams = request.params as MessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 2)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [address, message]`);\n\n      const params = request.params as [string, string];\n      const address = params[0];\n      const message = params[1];\n\n      msgParams = {\n        from: address,\n        data: message,\n      };\n    }\n\n    response.result = await processEthSignMessage(msgParams, request);\n  });\n}\n\nexport function createProcessTypedMessage({\n  processTypedMessage,\n}: {\n  processTypedMessage: IProviderHandlers[\"processTypedMessage\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ETH_SIGN_TYPED_DATA) return next();\n\n    if (!processTypedMessage) throw new Error(\"WalletMiddleware - opts.processTypedMessage not  provided\");\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: TypedMessageParams = request.params as TypedMessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 2)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [typedData, address]`);\n\n      const params = request.params as [Record<string, unknown>[], string];\n      const message = params[0];\n      const address = params[1];\n\n      msgParams = {\n        from: address,\n        data: message,\n        version: SignTypedDataVersion.V1,\n      };\n    }\n\n    response.result = await processTypedMessage(msgParams, request);\n  });\n}\n\nexport function createProcessTypedMessageV3({\n  processTypedMessageV3,\n}: {\n  processTypedMessageV3: IProviderHandlers[\"processTypedMessageV3\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ETH_SIGN_TYPED_DATA_V3) return next();\n\n    if (!processTypedMessageV3) throw new Error(\"WalletMiddleware - opts.processTypedMessageV3 is not provided\");\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: TypedMessageParams = request.params as TypedMessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 2)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [address, typedData]`);\n\n      const params = request.params as [string, string];\n      const address = params[0];\n      const message = JSON.parse(params[1]);\n\n      msgParams = {\n        from: address,\n        data: message,\n        version: SignTypedDataVersion.V3,\n      };\n    }\n\n    response.result = await processTypedMessageV3(msgParams, request);\n  });\n}\n\nexport function createProcessTypedMessageV4({\n  processTypedMessageV4,\n}: {\n  processTypedMessageV4: IProviderHandlers[\"processTypedMessageV4\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ETH_SIGN_TYPED_DATA_V4) return next();\n\n    if (!processTypedMessageV4) throw new Error(\"WalletMiddleware - opts.processTypedMessageV4 is not provided\");\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: TypedMessageParams = request.params as TypedMessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 2)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [address, typedData]`);\n\n      const params = request.params as [string, string];\n      const address = params[0];\n      const message = JSON.parse(params[1]);\n\n      msgParams = {\n        from: address,\n        data: message,\n        version: SignTypedDataVersion.V4,\n      };\n    }\n\n    response.result = await processTypedMessageV4(msgParams, request);\n  });\n}\n\nexport function createProcessPersonalMessage({\n  processPersonalMessage,\n}: {\n  processPersonalMessage: IProviderHandlers[\"processPersonalMessage\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.PERSONAL_SIGN) return next();\n\n    if (!processPersonalMessage) throw new Error(\"WalletMiddleware - opts.processPersonalMessage is not provided\");\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: MessageParams = request.params as MessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length >= 2)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [message, address]`);\n\n      const params = request.params as [string, string];\n      const message = params[0];\n      const address = params[1];\n\n      msgParams = {\n        from: address,\n        data: message,\n      };\n    }\n\n    response.result = await processPersonalMessage(msgParams, request);\n  });\n}\n\nexport function createPendingNonceMiddleware({\n  getPendingNonce,\n}: {\n  getPendingNonce: IProviderHandlers[\"getPendingNonce\"];\n}): JRPCMiddleware<{ address: string; blockReference: BlockParams }, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { params, method } = request;\n    if (method !== METHOD_TYPES.ETH_GET_TRANSACTION_COUNT) return next();\n\n    const { blockReference } = params;\n    if (blockReference !== \"pending\") return next();\n    response.result = await getPendingNonce(params, request);\n  });\n}\n\nexport function formatTxMetaForRpcResult(txMeta: EthereumTransactionMeta): TransactionRPCMeta {\n  const { r, s, v, txReceipt, transaction, transactionHash, accessList } = txMeta;\n  const { to, data, nonce, gas, from, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas } = transaction;\n\n  const formattedTxMeta: TransactionRPCMeta = {\n    v,\n    r,\n    s,\n    to,\n    gas,\n    from,\n    hash: transactionHash,\n    nonce,\n    input: data || \"0x\",\n    value: value || \"0x0\",\n    accessList: accessList || null,\n    blockHash: txReceipt?.blockHash || null,\n    blockNumber: txReceipt?.blockNumber || null,\n    transactionIndex: txReceipt?.transactionIndex || null,\n    type: null,\n  };\n\n  if (maxFeePerGas && maxPriorityFeePerGas) {\n    formattedTxMeta.maxFeePerGas = maxFeePerGas;\n    formattedTxMeta.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    formattedTxMeta.type = TRANSACTION_ENVELOPE_TYPES.FEE_MARKET;\n  } else {\n    formattedTxMeta.gasPrice = gasPrice;\n    formattedTxMeta.type = TRANSACTION_ENVELOPE_TYPES.LEGACY;\n  }\n\n  return formattedTxMeta;\n}\n\nexport function createPendingTxMiddleware({\n  getPendingTransactionByHash,\n}: {\n  getPendingTransactionByHash: IProviderHandlers[\"getPendingTransactionByHash\"];\n}): JRPCMiddleware<string, TransactionRPCMeta> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { params, method } = request;\n    if (method !== METHOD_TYPES.ETH_GET_TRANSACTION_BY_HASH) return next();\n\n    if (!getPendingTransactionByHash) throw new Error(\"WalletMiddleware - opts.getPendingTransactionByHash not provided\");\n\n    const txMeta = await getPendingTransactionByHash(params, request);\n    if (!txMeta) {\n      return next();\n    }\n    response.result = formatTxMetaForRpcResult(txMeta);\n    return undefined;\n  });\n}\n\nexport function createProcessEncryptionPublicKeyMiddleware({\n  processEncryptionPublicKey,\n}: {\n  processEncryptionPublicKey: IProviderHandlers[\"processEncryptionPublicKey\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ETH_GET_ENCRYPTION_PUBLIC_KEY) return next();\n\n    if (!processEncryptionPublicKey) throw new Error(\"WalletMiddleware - opts.processEncryptionPublicKey not provided\");\n\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: EncryptionPublicKeyParams = request.params as EncryptionPublicKeyParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 1)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [address]`);\n\n      const [address] = request.params as [string];\n      msgParams = { data: address, from: address };\n    }\n\n    response.result = await processEncryptionPublicKey(msgParams, request);\n  });\n}\n\nexport function createProcessDecryptMessageMiddleware({\n  processDecryptMessage,\n}: {\n  processDecryptMessage: IProviderHandlers[\"processDecryptMessage\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ETH_DECRYPT) return next();\n\n    if (!processDecryptMessage) throw new Error(\"WalletMiddleware - opts.processDecryptMessage not provided\");\n\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: MessageParams = request.params as MessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 2)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [message, address]`);\n\n      const [message, address] = request.params as [string, string];\n      msgParams = { data: message, from: address };\n    }\n\n    response.result = await processDecryptMessage(msgParams, request);\n  });\n}\n\nexport function createProcessSwitchEthereumChain({\n  processSwitchEthereumChain,\n}: {\n  processSwitchEthereumChain: IProviderHandlers[\"processSwitchEthereumChain\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.SWITCH_CHAIN) return next();\n\n    if (!processSwitchEthereumChain) throw new Error(\"WalletMiddleware - opts.processSwitchEthereumChain not provided\");\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: SwitchChainMessageParams = request.params as SwitchChainMessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 1)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [data]`);\n\n      const [message] = request.params as [SwitchChainMessageParams];\n      msgParams = message;\n    }\n\n    response.result = await processSwitchEthereumChain(msgParams, request);\n  });\n}\n\nexport function createProcessAddEthereumChain({\n  processAddEthereumChain,\n}: {\n  processAddEthereumChain: IProviderHandlers[\"processAddEthereumChain\"];\n}): JRPCMiddleware<unknown, string> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== METHOD_TYPES.ADD_CHAIN) return next();\n\n    if (!processAddEthereumChain) throw new Error(\"WalletMiddleware - opts.processAddEthereumChain not provided\");\n    if (!request?.params) throw new Error(\"WalletMiddleware - missing params\");\n\n    let msgParams: AddChainMessageParams = request.params as AddChainMessageParams;\n\n    if (Array.isArray(request.params)) {\n      if (!(request.params.length === 1)) throw new Error(`WalletMiddleware - incorrect params for ${method} method. expected [data]`);\n\n      const [message] = request.params as [AddChainMessageParams];\n      msgParams = message;\n    }\n\n    response.result = await processAddEthereumChain(msgParams, request);\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<string[], unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"eth_requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createEthereumMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    requestAccounts,\n    getAccounts,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    getPendingNonce,\n    getPendingTransactionByHash,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n    processSwitchEthereumChain,\n    processAddEthereumChain,\n    getProviderState,\n    version,\n  } = providerHandlers;\n  return mergeMiddleware([\n    createScaffoldMiddleware({\n      version,\n      [PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState as JRPCMiddleware<unknown, unknown>,\n    }),\n    createRequestAccountsMiddleware({ requestAccounts }) as JRPCMiddleware<unknown, unknown>,\n    createGetAccountsMiddleware({ getAccounts }) as JRPCMiddleware<unknown, unknown>,\n    createProcessTransactionMiddleware({ processTransaction }) as JRPCMiddleware<unknown, unknown>,\n    createProcessEthSignMessage({ processEthSignMessage }) as JRPCMiddleware<unknown, unknown>,\n    createProcessTypedMessage({ processTypedMessage }) as JRPCMiddleware<unknown, unknown>,\n    createProcessTypedMessageV3({ processTypedMessageV3 }) as JRPCMiddleware<unknown, unknown>,\n    createProcessTypedMessageV4({ processTypedMessageV4 }) as JRPCMiddleware<unknown, unknown>,\n    createProcessPersonalMessage({ processPersonalMessage }) as JRPCMiddleware<unknown, unknown>,\n    createPendingNonceMiddleware({ getPendingNonce }) as JRPCMiddleware<unknown, unknown>,\n    createPendingTxMiddleware({ getPendingTransactionByHash }) as JRPCMiddleware<unknown, unknown>,\n    createProcessEncryptionPublicKeyMiddleware({ processEncryptionPublicKey }) as JRPCMiddleware<unknown, unknown>,\n    createProcessDecryptMessageMiddleware({ processDecryptMessage }) as JRPCMiddleware<unknown, unknown>,\n    createProcessSwitchEthereumChain({ processSwitchEthereumChain }) as JRPCMiddleware<unknown, unknown>,\n    createProcessAddEthereumChain({ processAddEthereumChain }) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n","import { createFetchMiddleware, ProviderConfig } from \"@toruslabs/base-controllers\";\nimport {\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n  providerFromMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\n\nimport PollingBlockTracker from \"../Block/PollingBlockTracker\";\nimport { EthereumNetworkConfig } from \"../utils/interfaces\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, string> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    if (req.method === \"net_version\") {\n      // convert to decimal\n      res.result = Number.parseInt(chainId, 16).toString(10);\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: ProviderConfig): JRPCMiddleware<unknown, ProviderConfig> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<ProviderConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(\n  providerConfig: ProviderConfig,\n  networkConfig: EthereumNetworkConfig\n): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  blockTracker: PollingBlockTracker;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const blockProvider = providerFromMiddleware(fetchMiddleware as JRPCMiddleware<unknown, unknown>);\n  const blockTracker = new PollingBlockTracker({ config: { ...networkConfig, provider: blockProvider }, state: {} });\n\n  const networkMiddleware = mergeMiddleware([\n    createChainIdMiddleware(chainId) as JRPCMiddleware<unknown, unknown>,\n    createProviderConfigMiddleware(providerConfig) as JRPCMiddleware<unknown, unknown>,\n    // No need for the following middlewares for web because all browser sessions are quite short lived and each session is limited to scope of a window/tab\n    // createBlockRefRewriteMiddleware({ blockTracker }),\n    // createBlockCacheMiddleware({ blockTracker }),\n    // createInflightCacheMiddleware(),\n    // createBlockTrackerInspectorMiddleware({ blockTracker }),\n    fetchMiddleware as JRPCMiddleware<unknown, unknown>,\n  ]);\n  return { networkMiddleware, blockTracker };\n}\n","import { BaseController, createEventEmitterProxy, createSwappableProxy, INetworkController } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, providerFromEngine, SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { Mutex } from \"async-mutex\";\nimport log from \"loglevel\";\n\nimport PollingBlockTracker from \"../Block/PollingBlockTracker\";\nimport { SUPPORTED_NETWORKS } from \"../utils/constants\";\nimport { EthereumNetworkConfig, EthereumNetworkState, EthereumProviderConfig } from \"../utils/interfaces\";\nimport { createEthereumMiddleware, IProviderHandlers } from \"./createEthereumMiddleware\";\nimport { createJsonRpcClient } from \"./createJsonRpcClient\";\n\nexport default class NetworkController\n  extends BaseController<EthereumNetworkConfig, EthereumNetworkState>\n  implements INetworkController<EthereumNetworkConfig, EthereumNetworkState>\n{\n  name = \"NetworkController\";\n\n  providerProxy: SafeEventEmitterProvider;\n\n  blockTrackerProxy: PollingBlockTracker;\n\n  private mutex: Mutex = new Mutex();\n\n  private provider?: SafeEventEmitterProvider = null;\n\n  private blockTracker?: PollingBlockTracker = null;\n\n  private baseProviderHandlers: IProviderHandlers;\n\n  constructor({ config, state }: { config?: Partial<EthereumNetworkConfig>; state?: Partial<EthereumNetworkState> }) {\n    super({ config, state });\n\n    this.defaultState = {\n      chainId: \"loading\",\n      properties: { EIPS_1559: undefined },\n      providerConfig: SUPPORTED_NETWORKS.mainnet,\n    };\n\n    // when a new network is set,\n    // we set to loading first and\n    // then when connection succeeds,\n    // we update the network\n    this.initialize();\n  }\n\n  getNetworkIdentifier(): string {\n    return this.state.chainId;\n  }\n\n  getNetworkRPCUrl(): string {\n    return this.state.providerConfig.rpcTarget;\n  }\n\n  /**\n   * Called by orchestrator once while initializing the class\n   * @param providerHandlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */\n  public initializeProvider(providerHandlers: IProviderHandlers): SafeEventEmitterProvider {\n    this.baseProviderHandlers = providerHandlers;\n    this.configureProvider();\n    this.lookupNetwork(); // Not awaiting this, because we don't want to block the initialization\n    return this.providerProxy;\n  }\n\n  getProvider(): SafeEventEmitterProvider {\n    return this.providerProxy;\n  }\n\n  getBlockTracker(): PollingBlockTracker {\n    return this.blockTrackerProxy;\n  }\n\n  getProviderConfig(): EthereumProviderConfig {\n    return this.state.providerConfig;\n  }\n\n  setProviderConfig(config: EthereumProviderConfig): void {\n    this.update({\n      providerConfig: { ...config },\n    });\n    this.refreshNetwork();\n  }\n\n  async getEIP1559Compatibility(): Promise<boolean> {\n    const { EIPS_1559 } = this.state.properties;\n    // log.info('checking eip 1559 compatibility')\n    if (EIPS_1559 !== undefined) {\n      return EIPS_1559 as boolean;\n    }\n    const latestBlock = await this.blockTracker.getLatestBlock();\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n    this.update({ properties: { EIPS_1559: supportsEIP1559 } });\n    return supportsEIP1559;\n  }\n\n  /**\n   * Refreshes the current network code\n   */\n  async lookupNetwork(): Promise<void> {\n    const { chainId, rpcTarget } = this.getProviderConfig();\n    if (!chainId || !rpcTarget || !this.provider) {\n      this.update({ chainId: \"loading\", properties: {} });\n      return;\n    }\n    const releaseLock = await this.mutex.acquire();\n    try {\n      // use eth_chainId\n      const [networkChainId] = await Promise.all([this.provider.request<never, string>({ method: \"eth_chainId\" }), this.getEIP1559Compatibility()]);\n      log.info(\"network fetched chain id\", networkChainId);\n      // update chain ID\n      this.update({\n        chainId: networkChainId,\n      });\n      this.emit(\"networkDidChange\");\n    } catch {\n      this.update({\n        chainId: \"loading\",\n      });\n    } finally {\n      releaseLock();\n    }\n  }\n\n  private configureProvider(): void {\n    const { chainId, rpcTarget, ...rest } = this.getProviderConfig();\n    if (!chainId || !rpcTarget) {\n      throw new Error(\"chainId and rpcTarget must be provider in providerConfig\");\n    }\n    this.configureStandardProvider({ chainId, rpcTarget, ...rest });\n  }\n\n  private setNetworkClient({\n    networkMiddleware,\n    blockTracker,\n  }: {\n    networkMiddleware: JRPCMiddleware<unknown, unknown>;\n    blockTracker: PollingBlockTracker;\n  }): void {\n    const ethereumMiddleware = createEthereumMiddleware(this.baseProviderHandlers);\n    const engine = new JRPCEngine();\n    engine.push(ethereumMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.setProvider({ provider, blockTracker });\n  }\n\n  private setProvider({ provider, blockTracker }: { provider: SafeEventEmitterProvider; blockTracker: PollingBlockTracker }): void {\n    if (this.providerProxy) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.providerProxy.setTarget(provider);\n    } else {\n      this.providerProxy = createSwappableProxy<SafeEventEmitterProvider>(provider);\n    }\n\n    if (this.blockTrackerProxy) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.blockTrackerProxy.setTarget(blockTracker);\n    } else {\n      this.blockTrackerProxy = createEventEmitterProxy<PollingBlockTracker>(blockTracker, {\n        eventFilter: \"skipInternal\",\n      });\n    }\n\n    // set new provider and blockTracker\n    this.provider = provider;\n    provider.setMaxListeners(10);\n    this.blockTracker = blockTracker;\n  }\n\n  private configureStandardProvider(providerConfig: EthereumProviderConfig): void {\n    const networkClient = createJsonRpcClient(providerConfig, this.config);\n    log.info(\"networkClient\", networkClient);\n    this.setNetworkClient(networkClient);\n  }\n\n  private refreshNetwork() {\n    this.update({ chainId: \"loading\", properties: {} });\n    this.configureProvider();\n    this.lookupNetwork();\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport { BrowserProvider, Contract } from \"ethers\";\nimport log from \"loglevel\";\n\nimport { erc721Abi, erc1155Abi } from \"../utils/abis\";\nimport { CONTRACT_TYPE_ERC721, CONTRACT_TYPE_ERC1155, ERC721_INTERFACE_ID, ERC1155_INTERFACE_ID, OLD_ERC721_LIST } from \"../utils/constants\";\nimport { sanitizeNftMetdataUrl } from \"../utils/helpers\";\nimport { CustomNftInfo, CustomNftItemInfo, NftStandardType } from \"../utils/interfaces\";\n\ninterface INftOptions {\n  contractAddress: string;\n  contractName?: string;\n  contractSymbol?: string;\n  contractImage?: string;\n  contractSupply?: string;\n  contractFallbackLogo?: string;\n  nftStandard?: \"erc721\" | \"erc1155\";\n  contractDescription?: string;\n  chainId: string;\n  provider: BrowserProvider;\n}\n\nexport class NftHandler {\n  public contractAddress: string;\n\n  public contractName: string;\n\n  public contractSymbol: string;\n\n  public contractImage: string;\n\n  public contractSupply?: string;\n\n  public contractFallbackLogo?: string;\n\n  public nftStandard: \"erc721\" | \"erc1155\";\n\n  public contractDescription?: string;\n\n  public chainId: string;\n\n  public provider: BrowserProvider;\n\n  public isSpecial?: boolean;\n\n  constructor({\n    chainId,\n    contractAddress,\n    contractImage,\n    contractName,\n    contractSymbol,\n    nftStandard,\n    provider,\n    contractDescription,\n    contractFallbackLogo,\n    contractSupply,\n  }: INftOptions) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.contractImage = contractImage;\n    this.contractName = contractName;\n    this.contractSymbol = contractSymbol;\n    this.nftStandard = nftStandard;\n    this.provider = provider;\n    this.contractDescription = contractDescription;\n    this.contractFallbackLogo = contractFallbackLogo;\n    this.contractSupply = contractSupply;\n  }\n\n  async getNftMetadata(userAddress: string, tokenInfo: Partial<CustomNftItemInfo>): Promise<CustomNftItemInfo> {\n    const returnNftItem: CustomNftItemInfo = { description: \"\", image: \"\", name: \"\", tokenBalance: \"\", tokenId: \"\", decimals: \"1\", ...tokenInfo };\n\n    const [tokenURI, balance] = await Promise.all([\n      this.getCollectibleTokenURI(returnNftItem.tokenId, this.nftStandard),\n      !returnNftItem.tokenBalance ? this.fetchNftBalance(userAddress, returnNftItem.tokenId) : Promise.resolve(\"0\"),\n    ]);\n    returnNftItem.tokenBalance = returnNftItem.tokenBalance || balance;\n    // some people put full json object in uri\n    try {\n      const object = JSON.parse(tokenURI);\n      returnNftItem.image = returnNftItem.image || sanitizeNftMetdataUrl(object.image);\n      returnNftItem.name = returnNftItem.name || object.name;\n      returnNftItem.description = returnNftItem.description || object.description;\n      returnNftItem.decimals = returnNftItem.decimals || object.decimals;\n    } catch (error) {\n      log.warn(\"Token uri is not a valid json object\", error);\n    }\n    const finalTokenMetaUri = sanitizeNftMetdataUrl(tokenURI);\n    try {\n      if (!returnNftItem.description || !returnNftItem.image || !returnNftItem.name) {\n        // this call might fail, if metadata url available in smart contract is not reachable\n        const object = await get<{ name: string; description: string; image: string; decimals?: string }>(finalTokenMetaUri);\n        returnNftItem.image = returnNftItem.image || sanitizeNftMetdataUrl(object.image);\n        returnNftItem.name = returnNftItem.name || object.name;\n        returnNftItem.description = returnNftItem.description || object.description;\n        returnNftItem.decimals = returnNftItem.decimals || object.decimals;\n      }\n    } catch (error) {\n      log.error(\"Failed to fetch nft metadata\", error);\n    }\n    return returnNftItem;\n  }\n\n  async getContractMetadata(): Promise<Omit<CustomNftInfo, \"assets\">> {\n    const returnNft: Omit<CustomNftInfo, \"assets\"> = {\n      chainId: this.chainId,\n      contractAddress: this.contractAddress,\n      contractName: this.contractName,\n      contractSymbol: this.contractSymbol,\n      nftStandard: this.nftStandard,\n      contractImage: this.contractImage,\n      contractDescription: this.contractDescription,\n      contractFallbackLogo: this.contractFallbackLogo,\n      contractSupply: this.contractSupply,\n    };\n    if (!this.nftStandard) {\n      const { standard, isSpecial } = await this.checkNftStandard();\n      returnNft.nftStandard = standard;\n      this.nftStandard = standard;\n      this.isSpecial = isSpecial;\n    }\n    if (!this.contractName || !this.contractSymbol || !this.contractDescription) {\n      const abi = this.nftStandard === CONTRACT_TYPE_ERC721 ? erc721Abi : erc1155Abi;\n      const contract = new Contract(this.contractAddress, abi, this.provider);\n      const [name, symbol] = await Promise.all([contract.name(), contract.symbol()]);\n      returnNft.contractName = name;\n      returnNft.contractSymbol = symbol;\n      if (!this.contractName) this.contractName = name;\n      if (!this.contractSymbol) this.contractSymbol = symbol;\n    }\n\n    return returnNft;\n  }\n\n  async fetchNftBalance(userAddress: string, tokenId: string): Promise<string> {\n    const { standard } = await this.checkNftStandard();\n    const abi = standard === CONTRACT_TYPE_ERC721 ? erc721Abi : erc1155Abi;\n    const contract = new Contract(this.contractAddress, abi, this.provider);\n    if (standard === CONTRACT_TYPE_ERC1155) {\n      const balance = await contract.balanceOf(userAddress, tokenId);\n      return balance;\n    }\n    let owner = \"\";\n    try {\n      owner = await contract.ownerOf(tokenId);\n    } catch {\n      throw new Error(\"Token id doesn't exists\");\n    }\n    if (owner.toLowerCase() === userAddress.toLowerCase()) {\n      return \"1\";\n    }\n    return \"0\";\n  }\n\n  private async checkNftStandard(): Promise<{ isSpecial: boolean; standard: NftStandardType }> {\n    // For Cryptokitties\n    if (this.nftStandard && this.isSpecial !== undefined) return;\n    if (Object.prototype.hasOwnProperty.call(OLD_ERC721_LIST, this.contractAddress.toLowerCase())) {\n      this.nftStandard = CONTRACT_TYPE_ERC721;\n      this.isSpecial = true;\n      return { standard: CONTRACT_TYPE_ERC721, isSpecial: true };\n    }\n    const isErc721 = await this.contractSupportsInterface(CONTRACT_TYPE_ERC721, ERC721_INTERFACE_ID);\n    if (isErc721) {\n      this.nftStandard = CONTRACT_TYPE_ERC721;\n      this.isSpecial = false;\n      return { standard: CONTRACT_TYPE_ERC721, isSpecial: false };\n    }\n    const isErc1155 = await this.contractSupportsInterface(CONTRACT_TYPE_ERC1155, ERC1155_INTERFACE_ID);\n    if (isErc1155) {\n      this.nftStandard = CONTRACT_TYPE_ERC1155;\n      this.isSpecial = false;\n      return { standard: CONTRACT_TYPE_ERC1155, isSpecial: false };\n    }\n\n    throw new Error(\"Unsupported nft standard\");\n  }\n\n  private async contractSupportsInterface(standard: NftStandardType, interfaceId: string): Promise<boolean> {\n    const abi = standard === CONTRACT_TYPE_ERC721 ? erc721Abi : erc1155Abi;\n    const contract = new Contract(this.contractAddress, abi, this.provider);\n    return contract.supportsInterface(interfaceId);\n  }\n\n  private async getCollectibleTokenURI(tokenId: string, standard: NftStandardType = CONTRACT_TYPE_ERC721): Promise<string> {\n    const method = standard === CONTRACT_TYPE_ERC721 ? \"tokenURI\" : \"uri\";\n    const abi = standard === CONTRACT_TYPE_ERC721 ? erc721Abi : erc1155Abi;\n    const contract = new Contract(this.contractAddress, abi, this.provider);\n    return contract[method](tokenId);\n  }\n}\n","import { BaseController, PreferencesState } from \"@toruslabs/base-controllers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { BrowserProvider } from \"ethers\";\nimport { merge } from \"lodash\";\nimport log from \"loglevel\";\n\nimport PreferencesController from \"../Preferences/PreferencesController\";\nimport { SIMPLEHASH_SUPPORTED_CHAINS } from \"../utils/constants\";\nimport { idleTimeTracker } from \"../utils/helpers\";\nimport { CustomNftInfo, CustomNftItemInfo, EthereumNetworkState, ExtendedAddressPreferences } from \"../utils/interfaces\";\nimport { NftsControllerConfig, NftsControllerState } from \"./INftsController\";\nimport { NftHandler } from \"./NftHandler\";\n\nexport interface INftsControllerOptions {\n  config?: Partial<NftsControllerConfig>;\n  state?: Partial<NftsControllerState>;\n  provider: SafeEventEmitterProvider;\n  getCustomNfts?: PreferencesController[\"getCustomNfts\"];\n  getSimpleHashNfts: PreferencesController[\"getSimpleHashNfts\"];\n  onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;\n  onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;\n}\n\nconst DEFAULT_INTERVAL = 180 * 1000;\n\nexport class NftsController extends BaseController<NftsControllerConfig, NftsControllerState> {\n  name = \"NftsController\";\n\n  private provider: SafeEventEmitterProvider;\n\n  private ethersProvider: BrowserProvider;\n\n  private _timer: number;\n\n  private getCustomNfts: PreferencesController[\"getCustomNfts\"];\n\n  private getSimpleHashNfts: PreferencesController[\"getSimpleHashNfts\"];\n\n  constructor({ config, state, provider, getCustomNfts, getSimpleHashNfts, onPreferencesStateChange, onNetworkStateChange }: INftsControllerOptions) {\n    super({ config, state });\n\n    this.provider = provider;\n    this.ethersProvider = new BrowserProvider(this.provider, \"any\");\n\n    this.getCustomNfts = getCustomNfts;\n    this.getSimpleHashNfts = getSimpleHashNfts;\n\n    this.defaultConfig = {\n      interval: DEFAULT_INTERVAL,\n      selectedAddress: \"\",\n      chainId: \"\",\n    };\n\n    this.defaultState = {\n      nfts: {},\n    };\n    this.initialize();\n    onPreferencesStateChange((preferencesState) => {\n      if (preferencesState.selectedAddress !== this.config.selectedAddress) {\n        this.configure({ selectedAddress: preferencesState.selectedAddress });\n        this.restartNftDetection();\n      }\n    });\n\n    onNetworkStateChange((networkState) => {\n      const { chainId } = networkState.providerConfig;\n      if (chainId !== this.config.chainId) {\n        this.configure({ chainId });\n        this.restartNftDetection();\n      }\n    });\n  }\n\n  get userSelectedAddress(): string {\n    return this.config.selectedAddress;\n  }\n\n  get userNfts() {\n    if (!this.userSelectedAddress) return [];\n    return this.state.nfts[this.userSelectedAddress] ?? [];\n  }\n\n  get interval(): number {\n    return this.config.interval;\n  }\n\n  set interval(interval: number) {\n    if (this._timer) window.clearInterval(this._timer);\n    if (!interval) {\n      return;\n    }\n    this._timer = window.setInterval(() => {\n      if (!idleTimeTracker.checkIfIdle()) {\n        this.detectNewNfts();\n        this.refreshNftBalances();\n      }\n    }, interval);\n  }\n\n  public startNftDetection(selectedAddress: string) {\n    this.configure({ selectedAddress });\n    this.restartNftDetection();\n  }\n\n  /**\n   * Restart nft detection polling period and call detectNewNfts\n   * in case of address change or user session initialization.\n   *\n   */\n  public restartNftDetection() {\n    if (!this.userSelectedAddress) {\n      return;\n    }\n    this.detectNewNfts();\n    this.refreshNftBalances();\n    this.config.interval = DEFAULT_INTERVAL;\n  }\n\n  public detectNewNfts() {\n    const userAddress = this.userSelectedAddress;\n    if (!userAddress) return;\n    const currentChainId = this.config.chainId;\n    const nftsToDetect: CustomNftInfo[] = []; // object[]\n    if (!currentChainId) {\n      this.update({ nfts: { [userAddress]: [...nftsToDetect] } });\n      return;\n    }\n\n    if (this.getCustomNfts) {\n      const customNfts = this.getCustomNfts(userAddress);\n\n      const reducedNfts = customNfts.reduce(\n        (acc, x) => {\n          // first aggregate by contract address\n          if (x.network === currentChainId) {\n            const newAsset: CustomNftItemInfo = {\n              description: \"\",\n              image: \"\",\n              name: \"\",\n              tokenBalance: \"\",\n              tokenId: x.nft_id,\n              customNftId: x.id.toString(),\n            };\n            if (acc[x.nft_address]) {\n              acc[x.nft_address].assets.push(newAsset);\n            } else {\n              const objToPush: CustomNftInfo = {\n                assets: [newAsset],\n                chainId: x.network,\n                contractAddress: x.nft_address,\n                contractName: \"\",\n                contractSymbol: \"\",\n                contractImage: \"\",\n                nftStandard: x.nft_contract_standard,\n                contractDescription: \"\",\n              } as CustomNftInfo;\n              acc[x.nft_address] = objToPush;\n            }\n          }\n          return acc;\n        },\n        {} as Record<string, CustomNftInfo>\n      );\n      nftsToDetect.push(...Object.values(reducedNfts));\n    }\n    this.update({ nfts: { [userAddress]: [...nftsToDetect] } });\n  }\n\n  async refreshNftBalances() {\n    const userAddress = this.userSelectedAddress;\n    if (userAddress === \"\") return;\n    const oldNfts = [...this.userNfts];\n    const nonZeroNfts: CustomNftInfo[] = [];\n    try {\n      const currentChainId = this.config.chainId;\n      if (SIMPLEHASH_SUPPORTED_CHAINS.includes(currentChainId)) {\n        const simpleHashBalances = await this.getSimpleHashNfts(userAddress, currentChainId);\n        nonZeroNfts.push(...simpleHashBalances);\n        this.update({ nfts: { [userAddress]: nonZeroNfts } });\n      }\n      if (oldNfts.length > 0) {\n        this.getNftBalancesUsingHandler(oldNfts);\n      }\n    } catch (error) {\n      log.error(error, \"unable to fetch nft balances\");\n    }\n  }\n\n  async getNftBalancesUsingHandler(customNfts: CustomNftInfo[]) {\n    if (!this.userSelectedAddress) return;\n    const userAddress = this.userSelectedAddress;\n    const currentNetworkNfts = customNfts;\n    const promiseSettledResult = await Promise.allSettled(\n      currentNetworkNfts.map(async (x) => {\n        try {\n          const tokenInstance = new NftHandler({\n            ...x,\n            provider: this.ethersProvider,\n          });\n          const contractData = await tokenInstance.getContractMetadata();\n          const assetData = await Promise.allSettled(x.assets.map((y) => tokenInstance.getNftMetadata(userAddress, y)));\n          return {\n            ...contractData,\n            assets: assetData.filter((z) => z.status === \"fulfilled\").map((z) => (z as PromiseFulfilledResult<CustomNftItemInfo>).value),\n          } as CustomNftInfo;\n        } catch (error) {\n          log.warn(\"Invalid contract address while fetching\", error);\n          return undefined;\n        }\n      })\n    );\n    const nonZeroTokens = promiseSettledResult.filter((x) => x.status === \"fulfilled\").map((x) => (x as PromiseFulfilledResult<CustomNftInfo>).value);\n\n    this.update({ nfts: { [userAddress]: merge(this.userNfts, nonZeroTokens) } });\n  }\n}\n","import { stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  BasePreferencesController,\n  CustomNft,\n  CustomToken,\n  IPreferencesController,\n  PreferencesConfig,\n  PreferencesState,\n  TransactionStatus,\n  UserInfo,\n} from \"@toruslabs/base-controllers\";\nimport { get, patch, post, remove } from \"@toruslabs/http-helpers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { Mutex } from \"async-mutex\";\nimport log from \"loglevel\";\n\nimport PollingBlockTracker from \"../Block/PollingBlockTracker\";\nimport KeyringController from \"../Keyring/KeyringController\";\nimport NetworkController from \"../Network/NetworkController\";\nimport { SUPPORTED_NETWORKS } from \"../utils/constants\";\nimport { formatDate, formatPastTx, formatTime, getEthTxStatus } from \"../utils/helpers\";\nimport type {\n  AddChainMessageParams,\n  CustomNetworkPayload,\n  CustomNetworks,\n  CustomNftInfo,\n  CustomTokenInfo,\n  EthereumProviderConfig,\n  EthereumUser,\n  ExtendedAddressPreferences,\n  FetchedTransaction,\n  FormattedTransactionActivity,\n  TransactionPayload,\n} from \"../utils/interfaces\";\n\ninterface IPreferencesControllerOptions {\n  config?: Partial<PreferencesConfig> & Pick<PreferencesConfig, \"api\" | \"commonApiHost\" | \"signInPrefix\">;\n  state?: Partial<PreferencesState<ExtendedAddressPreferences>>;\n  provider: SafeEventEmitterProvider;\n  // TODO: Require later\n  blockTracker?: PollingBlockTracker;\n  signAuthMessage?: KeyringController[\"signAuthMessage\"];\n  getProviderConfig?: NetworkController[\"getProviderConfig\"];\n  setProviderConfig?: NetworkController[\"setProviderConfig\"];\n}\n\nexport default class PreferencesController\n  extends BasePreferencesController<ExtendedAddressPreferences, PreferencesConfig, PreferencesState<ExtendedAddressPreferences>>\n  implements IPreferencesController<ExtendedAddressPreferences, PreferencesConfig, PreferencesState<ExtendedAddressPreferences>>\n{\n  private _handle?: number;\n\n  private _mutex: Mutex = new Mutex();\n\n  private getProviderConfig: NetworkController[\"getProviderConfig\"];\n\n  private setProviderConfig: NetworkController[\"setProviderConfig\"];\n\n  private provider: SafeEventEmitterProvider;\n\n  private blockTracker: PollingBlockTracker;\n\n  constructor({ config, state, provider, blockTracker, signAuthMessage, getProviderConfig, setProviderConfig }: IPreferencesControllerOptions) {\n    super({ config, state, defaultPreferences: { formattedPastTransactions: [], fetchedPastTx: [], paymentTx: [] }, signAuthMessage });\n    this.provider = provider;\n    this.getProviderConfig = getProviderConfig;\n    this.setProviderConfig = setProviderConfig;\n    this.blockTracker = blockTracker;\n    log.info(this.blockTracker);\n  }\n\n  public async poll(interval?: number): Promise<void> {\n    const releaseLock = await this._mutex.acquire();\n    if (interval) this.configure({ pollInterval: interval });\n    if (this._handle) window.clearTimeout(this._handle);\n    // call here\n    const storeSelectedAddress = this.state.selectedAddress;\n    if (!storeSelectedAddress) return;\n    if (!this.getAddressState(storeSelectedAddress)?.jwtToken) return;\n    // This should never throw\n    await this.sync(storeSelectedAddress);\n    releaseLock();\n    this._handle = window.setTimeout(() => {\n      this.poll(this.config.pollInterval);\n    }, this.config.pollInterval);\n  }\n\n  public async initPreferences(params: {\n    address: string;\n    jwtToken?: string;\n    calledFromEmbed?: boolean;\n    userInfo?: UserInfo;\n    rehydrate?: boolean;\n    locale?: string;\n    type?: string;\n    signatures?: string[];\n    network?: string;\n    web3AuthClientId?: string;\n  }): Promise<void> {\n    const { address, jwtToken, calledFromEmbed, userInfo, rehydrate, locale = \"en-US\", type, signatures, network, web3AuthClientId } = params;\n    await super.init(address, userInfo, jwtToken, { type, email: userInfo.email, signatures, network });\n    const { aggregateVerifier, verifier, verifierId } = userInfo || {};\n    const userExists = await this.sync(address);\n    if (!userExists) {\n      const accountState = this.getAddressState(address);\n      await this.createUser({\n        selectedCurrency: accountState.selectedCurrency,\n        theme: accountState.theme,\n        verifier: aggregateVerifier || verifier,\n        verifierId,\n        locale,\n        address,\n      });\n    }\n    if (!rehydrate)\n      await this.storeUserLogin({\n        verifier: aggregateVerifier || verifier,\n        verifierId,\n        options: { calledFromEmbed, rehydrate },\n        address,\n        web3AuthClientId,\n      });\n  }\n\n  public getSelectedAddress(): string {\n    return this.state.selectedAddress;\n  }\n\n  async sync(address: string): Promise<boolean> {\n    try {\n      const user = await this.getUser<EthereumUser>(address);\n      if (user) {\n        const {\n          default_currency: defaultCurrency,\n          contacts,\n          theme,\n          locale,\n          public_address: userPublicAddress,\n          default_public_address: defaultPublicAddress,\n          customNetworks,\n          customTokens,\n          customNfts,\n        } = user || {};\n\n        // update latest data in state.\n        this.updateState(\n          {\n            contacts,\n            theme,\n            selectedCurrency: defaultCurrency,\n            locale,\n            defaultPublicAddress: defaultPublicAddress || userPublicAddress,\n            customTokens,\n            customNfts,\n            customNetworks,\n          },\n          address\n        );\n        return true;\n      }\n      return false;\n    } catch (error) {\n      log.error(error);\n      return false;\n    } finally {\n      Promise.all([\n        this.getWalletOrders<FetchedTransaction>(address).catch((error) => {\n          log.error(\"unable to fetch wallet orders\", error);\n        }),\n      ])\n        .then((data) => {\n          const [walletTx] = data;\n          // eslint-disable-next-line promise/always-return\n          if (walletTx && walletTx.length > 0) {\n            this.updateState({ fetchedPastTx: [...walletTx] }, address);\n            this.calculatePastTx(walletTx, address);\n          }\n        })\n        .catch((error) => log.error(error));\n    }\n  }\n\n  public async patchNewTx(tx: TransactionPayload, address: string): Promise<void> {\n    const formattedTx = formatPastTx(tx);\n    const storePastTx = this.getAddressState(address)?.formattedPastTransactions;\n    const duplicateIndex = storePastTx.findIndex((x) => x.transaction_hash === tx.transaction_hash && x.networkType === tx.network);\n    if (tx.status === TransactionStatus.submitted || tx.status === TransactionStatus.confirmed) {\n      if (duplicateIndex === -1) {\n        // No duplicate found\n\n        const finalTx = this.cancelTxCalculate([...storePastTx, formattedTx]);\n        tx.is_cancel = formattedTx.is_cancel;\n        tx.to = tx.to.toLowerCase();\n        tx.from = tx.from.toLowerCase();\n\n        this.updateState({ formattedPastTransactions: finalTx }, address);\n        this.postPastTx<TransactionPayload>(tx, address);\n      } else {\n        // avoid overriding is_cancel\n        formattedTx.is_cancel = storePastTx[duplicateIndex].is_cancel;\n        storePastTx[duplicateIndex] = formattedTx;\n        this.updateState({ formattedPastTransactions: this.cancelTxCalculate([...storePastTx]) }, address);\n      }\n    }\n  }\n\n  public recalculatePastTx(address?: string) {\n    // This triggers store update which calculates past Tx status for that network\n    const selectedAddress = address || this.state.selectedAddress;\n    const state = this.getAddressState(selectedAddress);\n    if (!state?.fetchedPastTx) return;\n    this.calculatePastTx(state.fetchedPastTx, selectedAddress);\n  }\n\n  public async refetchEtherscanTx(address?: string) {\n    const selectedAddress = address || this.state.selectedAddress;\n    if (this.getAddressState(selectedAddress)?.jwtToken) {\n      // const selectedNetwork = this.getProviderConfig().rpcTarget;\n      // if (ETHERSCAN_SUPPORTED_NETWORKS.has(selectedNetwork)) {\n      //   const data = await this.fetchEtherscanTx({ selectedAddress, selectedNetwork });\n      //   if (data.length) {\n      //     this.emit(\"addEtherscanTransactions\", data, selectedNetwork);\n      //   }\n      // }\n    }\n  }\n\n  async fetchEtherscanTx<T>(parameters: { selectedAddress: string; selectedNetwork: string }): Promise<T[]> {\n    try {\n      const url = new URL(`${this.config.api}/etherscan`);\n      Object.keys(parameters).forEach((key) => url.searchParams.append(key, parameters[key as keyof typeof parameters]));\n      const response = await get<{ success: boolean; data: T[] }>(url.href, this.headers(parameters.selectedAddress));\n      return response.success ? response.data : [];\n    } catch (error) {\n      log.error(\"unable to fetch etherscan tx\", error);\n      return [];\n    }\n  }\n\n  public async getEtherScanTokens(address: string, chainId: string): Promise<CustomTokenInfo[]> {\n    const selectedAddress = address;\n    const apiUrl = new URL(this.config.api);\n    apiUrl.pathname = `/tokens`;\n    apiUrl.searchParams.append(\"chainId\", chainId);\n    apiUrl.searchParams.append(\"address\", selectedAddress);\n    const result = await get<{ data: CustomTokenInfo[] }>(apiUrl.href, this.headers(this.state.selectedAddress));\n    return result.data;\n  }\n\n  public async getSimpleHashNfts(address: string, chainId: string): Promise<CustomNftInfo[]> {\n    const selectedAddress = address;\n    const apiUrl = new URL(this.config.api);\n    apiUrl.pathname = `/nfts`;\n    apiUrl.searchParams.append(\"chainId\", chainId);\n    apiUrl.searchParams.append(\"address\", selectedAddress);\n    const result = await get<{ data: CustomNftInfo[] }>(apiUrl.href, this.headers(this.state.selectedAddress));\n    return result.data;\n  }\n\n  public getCustomTokens(address?: string): CustomToken[] {\n    return this.getAddressState(address)?.customTokens ?? [];\n  }\n\n  public getCustomNfts(address?: string): CustomNft[] {\n    return this.getAddressState(address)?.customNfts ?? [];\n  }\n\n  public isChainIdSupported(address: string, chainId: string): boolean {\n    const approveChainOptions = this.getChainOptions(address);\n    const providerConfig = approveChainOptions.find((x) => stripHexPrefix(x.chainId) === chainId);\n    return !!providerConfig;\n  }\n\n  public async addChain(network: AddChainMessageParams): Promise<void> {\n    const approveChainOptions = this.getChainOptions();\n    const providerConfig = approveChainOptions.find((x) => x.chainId === network.chainId);\n\n    if (providerConfig) {\n      throw new Error(`chainId ${network.chainId} already exists`);\n    }\n\n    const newNetwork: CustomNetworkPayload = {\n      displayName: network.chainName,\n      rpcTarget: network.rpcUrls[0],\n      ticker: network.nativeCurrency.symbol,\n      chainId: network.chainId,\n      blockExplorerUrl: network.blockExplorerUrls[0],\n    };\n\n    const isSuccess = await this.addCustomNetwork({ type: \"rpc\", network: newNetwork });\n    if (!isSuccess) throw new Error(\"unable to add custom network\");\n  }\n\n  switchChain(data: { chainId: string }) {\n    const chainOptions = this.getChainOptions();\n    const providerConfig = chainOptions.find((x) => x.chainId === data.chainId);\n    if (providerConfig) {\n      this.setProviderConfig(providerConfig);\n    } else {\n      throw new Error(`chainId ${data.chainId} is not supported`);\n    }\n  }\n\n  // Custom Network methods\n  public async addCustomNetwork({ type, network }: { type: string; network: CustomNetworkPayload }): Promise<number> {\n    try {\n      const apiUrl = new URL(this.config.api);\n      apiUrl.pathname = `/customnetwork/${type}`;\n      const { selectedAddress } = this.state;\n      const payload = {\n        network_name: network.displayName,\n        rpc_url: network.rpcTarget,\n        chain_id: network.chainId,\n        symbol: network.ticker,\n        block_explorer_url: network.blockExplorerUrl || undefined,\n        is_test_net: network.isTestnet || false,\n      };\n      const res = await post<{ data: CustomNetworks }>(apiUrl.href, payload, this.headers(selectedAddress), { useAPIKey: true });\n      await this.sync(selectedAddress);\n\n      return res.data.id;\n    } catch {\n      log.error(\"error adding custom network\");\n      return null;\n    }\n  }\n\n  async deleteCustomNetwork(id: number) {\n    try {\n      const { selectedAddress } = this.state;\n      const apiUrl = new URL(this.config.api);\n      apiUrl.pathname = `/customnetwork/${id}`;\n      await remove(apiUrl.href, {}, this.headers(selectedAddress), { useAPIKey: true });\n      await this.sync(selectedAddress);\n      return true;\n    } catch {\n      log.error(\"error deleting custom network\");\n      return false;\n    }\n  }\n\n  async editCustomNetwork({ network, id }: { network: CustomNetworkPayload; id: number | null }) {\n    try {\n      const { selectedAddress } = this.state;\n      const apiUrl = new URL(this.config.api);\n      apiUrl.pathname = `/customnetwork/${id}`;\n\n      const payload = {\n        network_name: network.displayName,\n        rpc_url: network.rpcTarget,\n        chain_id: network.chainId,\n        symbol: network.ticker || undefined,\n        block_explorer_url: network.blockExplorerUrl || undefined,\n        is_test_net: network.isTestnet || false,\n      };\n      await patch(apiUrl.href, payload, this.headers(selectedAddress), { useAPIKey: true });\n      await this.sync(selectedAddress);\n      return true;\n    } catch {\n      log.error(\"error editing custom network\");\n      return false;\n    }\n  }\n\n  private getChainOptions(address: string = this.state.selectedAddress): EthereumProviderConfig[] {\n    const { identities } = this.state;\n    const customNetworks = identities[address]?.customNetworks ?? [];\n\n    const custom: EthereumProviderConfig[] = Object.values(customNetworks).reduce((chains, network) => {\n      const networkItem = {\n        blockExplorerUrl: network.block_explorer_url,\n        chainId: network.chain_id,\n        displayName: network.network_name,\n        logo: \"eth.svg\",\n        rpcTarget: network.rpc_url,\n        ticker: network.symbol,\n        tickerName: network.symbol.toUpperCase(),\n        isCustom: true,\n        id: network.id,\n      };\n      if (Object.keys(SUPPORTED_NETWORKS).includes(networkItem.chainId)) return chains;\n      chains.push(networkItem);\n      return chains;\n    }, []);\n\n    const supported = Object.values(SUPPORTED_NETWORKS).reduce((chains, network) => {\n      chains.push(network);\n      return chains;\n    }, []);\n\n    return [...supported, ...custom];\n  }\n\n  private async calculatePastTx(txs: FetchedTransaction[], address: string) {\n    const pastTx = [];\n    const pendingTx = [];\n    const lowerCaseSelectedAddress = address.toLowerCase();\n    for (const x of txs) {\n      if (\n        x.network === SUPPORTED_NETWORKS[this.getProviderConfig().chainId].chainId &&\n        x.to &&\n        x.from &&\n        (lowerCaseSelectedAddress === x.from.toLowerCase() || lowerCaseSelectedAddress === x.to.toLowerCase())\n      ) {\n        if (x.status !== \"confirmed\") {\n          pendingTx.push(x);\n        } else {\n          const finalObject = formatPastTx(x, lowerCaseSelectedAddress);\n          pastTx.push(finalObject);\n        }\n      }\n    }\n    const pendingTxPromises = pendingTx.map((x) => getEthTxStatus(x.transaction_hash, this.provider).catch((error) => log.error(error)));\n    const resolvedTxStatuses = await Promise.all(pendingTxPromises);\n    for (const [index, element] of pendingTx.entries()) {\n      const finalObject = formatPastTx(element, lowerCaseSelectedAddress);\n      finalObject.status = resolvedTxStatuses[index] || TransactionStatus.submitted;\n      pastTx.push(finalObject);\n      if (lowerCaseSelectedAddress === element.from.toLowerCase() && finalObject.status && finalObject.status !== element.status)\n        this.patchPastTx({ id: element.id, status: finalObject.status, updated_at: new Date().toISOString() }, address);\n    }\n\n    const finalTx = this.cancelTxCalculate(pastTx);\n\n    this.updateState({ formattedPastTransactions: [...finalTx] }, address);\n  }\n\n  private cancelTxCalculate(pastTx: FormattedTransactionActivity[]) {\n    const nonceMap: Record<string, FormattedTransactionActivity[]> = {};\n    for (const x of pastTx) {\n      if (!nonceMap[x.nonce]) nonceMap[x.nonce] = [x];\n      else {\n        nonceMap[x.nonce].push(x);\n      }\n    }\n\n    for (const [, value] of Object.entries(nonceMap)) {\n      // has duplicate\n      if (value.length > 1) {\n        // get latest and mark it as is_cancel\n        const latestTxs = value.sort((a, b) => {\n          const aDate = new Date(a.date).getTime();\n          const bDate = new Date(b.date).getTime();\n          return bDate - aDate;\n        });\n        const latestCancelTx = latestTxs[0];\n        latestCancelTx.is_cancel = true;\n        latestTxs.slice(1).forEach((x) => {\n          x.hasCancel = true;\n          x.status = latestCancelTx.status === \"confirmed\" ? TransactionStatus.cancelled : TransactionStatus.cancelling;\n          x.cancelDateInitiated = `${formatTime(new Date(latestCancelTx.date).getTime())} - ${formatDate(latestCancelTx.date)}`;\n          x.etherscanLink = latestCancelTx.etherscanLink;\n          x.cancelGas = latestCancelTx.gas;\n          x.cancelGasPrice = latestCancelTx.gasPrice;\n        });\n      }\n    }\n\n    return pastTx;\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { BrowserProvider, Contract } from \"ethers\";\nimport log from \"loglevel\";\n\nimport { ecr20Abi } from \"../utils/abis\";\n\nexport interface ITokenOptions {\n  address: string;\n  symbol: string;\n  decimals: number;\n  name: string;\n  provider: BrowserProvider;\n}\n\nexport class TokenHandler {\n  public address: string;\n\n  public symbol: string;\n\n  public decimals: number;\n\n  public name: string;\n\n  public contract: Contract;\n\n  constructor({ address, symbol, decimals, name, provider }: ITokenOptions) {\n    this.address = address;\n\n    this.contract = new Contract(address, ecr20Abi, provider);\n    this.symbol = symbol;\n    this.decimals = decimals;\n    this.name = name;\n  }\n\n  public async getSymbol(): Promise<string> {\n    if (!this.symbol || this.symbol === \"ERC20\") this.symbol = await this.contract.symbol();\n    return this.symbol;\n  }\n\n  public async getDecimals(): Promise<number> {\n    try {\n      if (!this.decimals) this.decimals = await this.contract.decimals();\n      return this.decimals;\n    } catch (error) {\n      log.warn(`Could not get decimals for token ${this.address}`, error);\n      return 0;\n    }\n  }\n\n  public async getName(): Promise<string> {\n    if (!this.name) this.name = await this.contract.name();\n    return this.name;\n  }\n\n  public async getUserBalance(userAddress: string) {\n    if (!this.decimals) await this.getDecimals();\n    const balance = await this.contract.balanceOf(userAddress);\n    return new BigNumber(balance).toString(16);\n  }\n}\n","import { BaseConfig, BaseController, BaseState, PreferencesState } from \"@toruslabs/base-controllers\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport log from \"loglevel\";\n\nimport { COINGECKO_PLATFORMS_CHAIN_CODE_MAP, COINGECKO_SUPPORTED_CURRENCIES } from \"../utils/constants\";\nimport { idleTimeTracker } from \"../utils/helpers\";\nimport { CustomTokenInfo, EthereumNetworkState, ExtendedAddressPreferences } from \"../utils/interfaces\";\nimport { TokensControllerState } from \"./ITokensController\";\n\nexport interface CoinGeckoResponse {\n  [address: string]: {\n    [currency: string]: number;\n  };\n}\n\ntype ContractExchangeRates = Record<string, number | undefined>;\n\nexport const DEFAULT_CURRENCY = \"eth\";\n\nexport interface ITokenRatesControllerState extends BaseState {\n  contractExchangeRates: ContractExchangeRates;\n}\n\nexport interface ITokenRatesControllerConfig extends BaseConfig {\n  pollInterval: number;\n  api: string;\n  currencyApi: string;\n  chainId: string;\n  selectedAddress: string;\n  nativeCurrency: string;\n  tokens: CustomTokenInfo[];\n}\n\nexport interface TokenRatesControllerOptions {\n  config: Partial<ITokenRatesControllerConfig>;\n  state: Partial<ITokenRatesControllerState>;\n  onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;\n  onTokensStateChange: (listener: (tokensState: TokensControllerState) => void) => void;\n  onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;\n}\n\nexport class TokenRatesController extends BaseController<ITokenRatesControllerConfig, ITokenRatesControllerState> {\n  private conversionInterval: number;\n\n  constructor({ config, state, onPreferencesStateChange, onNetworkStateChange, onTokensStateChange }: TokenRatesControllerOptions) {\n    super({ config, state });\n    this.defaultState = {\n      ...this.defaultState,\n      contractExchangeRates: {},\n    };\n    this.initialize();\n\n    onPreferencesStateChange((preferencesState) => {\n      const { selectedAddress } = preferencesState;\n      this.configure({ selectedAddress });\n    });\n\n    onNetworkStateChange((networkState) => {\n      const { chainId, ticker } = networkState.providerConfig;\n      this.configure({ chainId, nativeCurrency: ticker });\n    });\n\n    onTokensStateChange((tokensState) => {\n      const { tokens } = tokensState;\n      const currentUserTokens = tokens[this.config.selectedAddress];\n      if (currentUserTokens?.length > 0 && this.config.tokens !== tokens[this.config.selectedAddress]) {\n        this.configure({ tokens: tokens[this.config.selectedAddress] });\n        this.updateExchangeRates();\n      }\n    });\n  }\n\n  /**\n   * Creates a new poll, using setInterval, to periodically call updateConversionRate. The id of the interval is\n   * stored at the controller's conversionInterval property. If it is called and such an id already exists, the\n   * previous interval is clear and a new one is created.\n   */\n  public scheduleConversionInterval(): void {\n    if (this.conversionInterval) {\n      window.clearInterval(this.conversionInterval);\n    }\n    this.conversionInterval = window.setInterval(() => {\n      if (!idleTimeTracker.checkIfIdle()) {\n        this.updateExchangeRates();\n      }\n    }, this.config.pollInterval);\n  }\n\n  public async updateExchangeRates() {\n    const chainCodes = COINGECKO_PLATFORMS_CHAIN_CODE_MAP[this.config.chainId];\n    let newContractExchangeRates: ContractExchangeRates = {};\n    if (!chainCodes) {\n      log.info(`ChainId ${this.config.chainId} not supported by coingecko`);\n      this.config.tokens.forEach((token) => {\n        newContractExchangeRates[token.tokenAddress] = undefined;\n      });\n    } else {\n      newContractExchangeRates = await this.fetchExchangeRates(this.config.nativeCurrency, chainCodes);\n    }\n    this.update({ contractExchangeRates: newContractExchangeRates });\n  }\n\n  private async fetchExchangeRates(nativeCurrency: string, chainCodes: { platform: string; currency: string }): Promise<ContractExchangeRates> {\n    const contractAddresses = this.config.tokens.map((token) => token.tokenAddress);\n\n    const isNativeCurrencySupported = COINGECKO_SUPPORTED_CURRENCIES.has(nativeCurrency.toLowerCase());\n    if (isNativeCurrencySupported) {\n      const response = await get<CoinGeckoResponse>(\n        `${this.config.api}/simple/token_price/${chainCodes.platform}?contract_addresses=${contractAddresses.join(\n          \",\"\n        )}&vs_currencies=${nativeCurrency.toLowerCase()}&include_market_cap=false&include_24hr_vol=false&include_24hr_change=false&include_last_updated_at=false`\n      );\n      const newContractExchangeRates: ContractExchangeRates = {};\n      Object.keys(response).forEach((contractAddress) => {\n        newContractExchangeRates[contractAddress] = response[contractAddress][nativeCurrency.toLowerCase()] || 0;\n      });\n      return newContractExchangeRates;\n    }\n    const [response, currencyResponse] = await Promise.all([\n      get<CoinGeckoResponse>(\n        `${this.config.api}/simple/token_price/${chainCodes.platform}?contract_addresses=${contractAddresses.join(\n          \",\"\n        )}&vs_currencies=${DEFAULT_CURRENCY}&include_market_cap=false&include_24hr_vol=false&include_24hr_change=false&include_last_updated_at=false`\n      ),\n      get<Record<string, string>>(`${this.config.currencyApi}/currency?fsym=${nativeCurrency.toUpperCase()}&tsyms=${DEFAULT_CURRENCY.toUpperCase()}`),\n    ]);\n    const newContractExchangeRates: ContractExchangeRates = {};\n    Object.keys(response).forEach((contractAddress) => {\n      newContractExchangeRates[contractAddress] =\n        response[contractAddress][DEFAULT_CURRENCY] * Number.parseFloat(currencyResponse[DEFAULT_CURRENCY]) || 0;\n    });\n    return newContractExchangeRates;\n  }\n}\n","import { BaseController, PreferencesState } from \"@toruslabs/base-controllers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { BrowserProvider, Contract, toQuantity } from \"ethers\";\nimport log from \"loglevel\";\n\nimport NetworkController from \"../Network/NetworkController\";\nimport PreferencesController from \"../Preferences/PreferencesController\";\nimport { singleBalanceCheckerAbi } from \"../utils/abis\";\nimport { ETHERSCAN_SUPPORTED_CHAINS } from \"../utils/constants\";\nimport { SINGLE_CALL_BALANCES_ADDRESSES } from \"../utils/contractAddresses\";\nimport { idleTimeTracker, toChecksumAddressByChainId } from \"../utils/helpers\";\nimport { CustomTokenInfo, EthereumNetworkState, ExtendedAddressPreferences } from \"../utils/interfaces\";\nimport { TokensControllerConfig, TokensControllerState } from \"./ITokensController\";\nimport { TokenHandler } from \"./TokenHandler\";\n\nexport interface ITokensControllerOptions {\n  config?: Partial<TokensControllerConfig>;\n  state?: Partial<TokensControllerState>;\n  provider: SafeEventEmitterProvider;\n  getCustomTokens?: PreferencesController[\"getCustomTokens\"];\n  getEtherScanTokens: PreferencesController[\"getEtherScanTokens\"];\n  getProviderConfig: NetworkController[\"getProviderConfig\"];\n  onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;\n  onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;\n}\n\nfunction getObjectFromArrayBasedonKey(oldArray: CustomTokenInfo[], key: string) {\n  return oldArray.reduce((acc: Record<string, CustomTokenInfo>, x) => {\n    const xkey = x[key as keyof CustomTokenInfo];\n    if (typeof xkey === \"boolean\") return acc;\n    acc[xkey] = x;\n    return acc;\n  }, {});\n}\n\nconst mergeTokenArrays = (oldArray: CustomTokenInfo[], newArray: CustomTokenInfo[]): CustomTokenInfo[] => {\n  const oldMap = getObjectFromArrayBasedonKey(oldArray || [], \"tokenAddress\");\n  const newMap = getObjectFromArrayBasedonKey(newArray || [], \"tokenAddress\");\n  const finalArr = newArray;\n  Object.keys(oldMap).forEach((x) => {\n    if (!newMap[x] && oldMap[x].isEtherScan) finalArr.push(oldMap[x]);\n  });\n  return finalArr;\n};\n\nconst DEFAULT_INTERVAL = 180 * 1000;\n\nexport class TokensController extends BaseController<TokensControllerConfig, TokensControllerState> {\n  name = \"TokensController\";\n\n  private provider: SafeEventEmitterProvider;\n\n  private ethersProvider: BrowserProvider;\n\n  private _timer: number;\n\n  private getProviderConfig: NetworkController[\"getProviderConfig\"];\n\n  private getCustomTokens: PreferencesController[\"getCustomTokens\"];\n\n  private getEtherScanTokens: PreferencesController[\"getEtherScanTokens\"];\n\n  constructor({\n    config,\n    state,\n    provider,\n    getCustomTokens,\n    getEtherScanTokens,\n    getProviderConfig,\n    onPreferencesStateChange,\n    onNetworkStateChange,\n  }: ITokensControllerOptions) {\n    super({ config, state });\n\n    this.provider = provider;\n    this.ethersProvider = new BrowserProvider(this.provider, \"any\");\n\n    this.getCustomTokens = getCustomTokens;\n    this.getEtherScanTokens = getEtherScanTokens;\n    this.getProviderConfig = getProviderConfig;\n\n    this.defaultConfig = {\n      interval: DEFAULT_INTERVAL,\n      selectedAddress: \"\",\n      chainId: \"\",\n    };\n\n    this.defaultState = {\n      tokens: {},\n    };\n    this.initialize();\n\n    onPreferencesStateChange((preferencesState) => {\n      if (preferencesState.selectedAddress !== this.config.selectedAddress) {\n        this.configure({ selectedAddress: preferencesState.selectedAddress });\n        this.restartTokenDetection();\n      }\n    });\n\n    onNetworkStateChange((networkState) => {\n      const { chainId } = networkState.providerConfig;\n      if (chainId !== this.config.chainId) {\n        this.configure({ chainId });\n        this.restartTokenDetection();\n      }\n    });\n  }\n\n  get userSelectedAddress(): string {\n    return this.config.selectedAddress;\n  }\n\n  get userTokens() {\n    if (!this.userSelectedAddress) return [];\n    return this.state.tokens[this.userSelectedAddress] ?? [];\n  }\n\n  get interval(): number {\n    return this.config.interval;\n  }\n\n  set interval(interval: number) {\n    if (this._timer) window.clearInterval(this._timer);\n    if (!interval) {\n      return;\n    }\n    this._timer = window.setInterval(() => {\n      if (!idleTimeTracker.checkIfIdle()) {\n        this.detectNewTokens();\n        this.refreshTokenBalances();\n      }\n    }, interval);\n  }\n\n  public startTokenDetection(selectedAddress: string) {\n    this.configure({ selectedAddress });\n    this.restartTokenDetection();\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   */\n  public restartTokenDetection() {\n    if (!this.userSelectedAddress) {\n      return;\n    }\n    this.detectNewTokens();\n    this.refreshTokenBalances();\n    this.config.interval = DEFAULT_INTERVAL;\n  }\n\n  public detectNewTokens() {\n    const userAddress = this.userSelectedAddress;\n    if (!userAddress) return;\n    const currentChainId = this.config.chainId;\n    const tokens: CustomTokenInfo[] = []; // object[]\n    if (!currentChainId) {\n      this.update({ tokens: { [userAddress]: [...tokens] } });\n      return;\n    }\n\n    const networkConfig = this.getProviderConfig();\n\n    if (networkConfig?.isErc20 && networkConfig?.tokenAddress) {\n      tokens.push({\n        tokenAddress: networkConfig.tokenAddress,\n        name: networkConfig.tickerName,\n        logo: networkConfig.logo,\n        erc20: true,\n        symbol: networkConfig.ticker,\n        decimals: \"18\",\n        chainId: currentChainId,\n      });\n    }\n    if (this.getCustomTokens) {\n      const customTokens = this.getCustomTokens(userAddress);\n      tokens.push(\n        ...customTokens.reduce((acc, x) => {\n          if (x.network === currentChainId)\n            acc.push({\n              tokenAddress: x.token_address,\n              name: x.token_name,\n              logo: \"eth.svg\",\n              erc20: true,\n              symbol: x.token_symbol,\n              decimals: x.decimals,\n              balance: \"\",\n              customTokenId: x.id.toString(),\n              chainId: x.network,\n            });\n          return acc;\n        }, [] as CustomTokenInfo[])\n      );\n    }\n    this.update({ tokens: { [userAddress]: [...tokens] } });\n  }\n\n  async refreshTokenBalances() {\n    const userAddress = this.userSelectedAddress;\n    if (userAddress === \"\") return;\n    const oldTokens = [...this.userTokens];\n    const tokenAddresses = oldTokens.map((x) => x.tokenAddress);\n    const nonZeroTokens: CustomTokenInfo[] = [];\n    try {\n      const currentChainId = this.config.chainId;\n      if (ETHERSCAN_SUPPORTED_CHAINS.includes(currentChainId)) {\n        const etherscanBalances = await this.getEtherScanTokens(userAddress, currentChainId);\n        nonZeroTokens.push(...etherscanBalances);\n      }\n      if (tokenAddresses.length > 0) {\n        const currentSingleCallAddress = SINGLE_CALL_BALANCES_ADDRESSES[currentChainId];\n        if (currentSingleCallAddress) {\n          const ethContract = new Contract(currentSingleCallAddress, singleBalanceCheckerAbi, this.ethersProvider);\n          const result = await ethContract.balances([userAddress], tokenAddresses);\n          tokenAddresses.forEach((_, index) => {\n            const balance = toQuantity(result[index]);\n            if (balance && balance !== \"0x0\") {\n              nonZeroTokens.push({ ...oldTokens[index], balance, chainId: currentChainId });\n            }\n          });\n        } else {\n          this.getTokenBalancesUsingHandler(oldTokens);\n        }\n      }\n    } catch (error) {\n      log.error(error, \"unable to fetch token balances using single call balance address\");\n      this.getTokenBalancesUsingHandler(oldTokens);\n    } finally {\n      this.update({ tokens: { [userAddress]: nonZeroTokens } });\n    }\n  }\n\n  async getTokenBalancesUsingHandler(customTokens: CustomTokenInfo[]) {\n    if (!this.userSelectedAddress) return;\n    const currentNetworkTokens = customTokens;\n    const promiseSettledResult = await Promise.allSettled(\n      currentNetworkTokens.map(async (x) => {\n        try {\n          const tokenInstance = new TokenHandler({\n            address: x.tokenAddress,\n            decimals: Number.parseInt(x.decimals),\n            name: x.name,\n            symbol: x.symbol,\n            provider: this.ethersProvider,\n          });\n          const balance = await tokenInstance.getUserBalance(this.userSelectedAddress);\n          return {\n            decimals: tokenInstance.decimals.toString(),\n            erc20: true,\n            logo: x.logo || \"eth.svg\",\n            name: tokenInstance.name,\n            symbol: tokenInstance.symbol,\n            tokenAddress: toChecksumAddressByChainId(tokenInstance.address, x.chainId),\n            balance: `0x${balance}`,\n            customTokenId: x.customTokenId,\n            network: x.chainId,\n            chainId: x.chainId,\n          } as CustomTokenInfo;\n        } catch (error) {\n          log.warn(\"Invalid contract address while fetching\", error);\n          return undefined;\n        }\n      })\n    );\n    const nonZeroTokens = promiseSettledResult\n      .filter((x) => x.status === \"fulfilled\")\n      .map((x) => (x as PromiseFulfilledResult<CustomTokenInfo>).value);\n\n    this.update({ tokens: { [this.userSelectedAddress]: mergeTokenArrays(this.userTokens, nonZeroTokens) } });\n  }\n}\n","// import assert from 'assert'\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { Mutex, MutexInterface } from \"async-mutex\";\n\nimport PollingBlockTracker from \"../Block/PollingBlockTracker\";\nimport { METHOD_TYPES } from \"../utils/constants\";\nimport { EthereumTransactionMeta, Nonce, NonceDetails, NonceLockRes } from \"../utils/interfaces\";\nimport TransactionStateManager from \"./TransactionStateManager\";\n\ninterface INonceTrackerOptions {\n  provider: SafeEventEmitterProvider;\n  blockTracker: PollingBlockTracker;\n  getPendingTransactions: TransactionStateManager[\"getPendingTransactions\"];\n  getConfirmedTransactions: TransactionStateManager[\"getConfirmedTransactions\"];\n}\n\nclass NonceTracker {\n  private provider: SafeEventEmitterProvider;\n\n  private blockTracker: PollingBlockTracker;\n\n  private getPendingTransactions: TransactionStateManager[\"getPendingTransactions\"];\n\n  private getConfirmedTransactions: TransactionStateManager[\"getConfirmedTransactions\"];\n\n  private lockMap: Record<string, Mutex>;\n\n  constructor({ provider, blockTracker, getPendingTransactions, getConfirmedTransactions }: INonceTrackerOptions) {\n    this.provider = provider;\n    this.blockTracker = blockTracker;\n    this.getPendingTransactions = getPendingTransactions;\n    this.getConfirmedTransactions = getConfirmedTransactions;\n    this.lockMap = {};\n  }\n\n  public async getGlobalLock(): Promise<{ releaseLock: MutexInterface.Releaser }> {\n    const globalMutex = this._lookupMutex(\"global\");\n    // await global mutex free\n    const releaseLock = await globalMutex.acquire();\n    return { releaseLock };\n  }\n\n  /**\n    this will return an object with the `nextNonce` \n    `nonceDetails`, and the releaseLock.\n    Note: releaseLock must be called after adding a signed tx \n    to pending transactions (or discarding).\n  */\n  public async getNonceLock(address: string): Promise<NonceLockRes> {\n    // await global mutex free\n    await this._globalMutexFree();\n    // await lock free, then take lock\n    const releaseLock = await this._takeMutex(address);\n    try {\n      // evaluate multiple nextNonce strategies\n      const nonceDetails = {} as NonceDetails;\n      const networkNonceResult = await this._getNetworkNextNonce(address);\n\n      const highestLocallyConfirmed = this._getHighestLocallyConfirmed(address);\n      const nextNetworkNonce = networkNonceResult.nonce;\n      const highestSuggested = Math.max(nextNetworkNonce, highestLocallyConfirmed);\n\n      const pendingTxs = this.getPendingTransactions(address);\n      const localNonceResult = this._getHighestContinuousFrom(pendingTxs, highestSuggested);\n\n      nonceDetails.params = {\n        highestLocallyConfirmed,\n        highestSuggested,\n        nextNetworkNonce,\n      };\n      nonceDetails.local = localNonceResult;\n      nonceDetails.network = networkNonceResult;\n\n      const nextNonce = Math.max(networkNonceResult.nonce, localNonceResult.nonce);\n\n      // return nonce and release cb\n      return { nextNonce, nonceDetails, releaseLock };\n    } catch (error) {\n      // release lock if we encounter an error\n      releaseLock();\n      throw error;\n    }\n  }\n\n  private async _globalMutexFree() {\n    const globalMutex = this._lookupMutex(\"global\");\n    const releaseLock = await globalMutex.acquire();\n    releaseLock();\n  }\n\n  private async _takeMutex(lockId: string) {\n    const mutex = this._lookupMutex(lockId);\n    const releaseLock = await mutex.acquire();\n    return releaseLock;\n  }\n\n  private _lookupMutex(lockId: string): Mutex {\n    let mutex = this.lockMap[lockId];\n    if (!mutex) {\n      mutex = new Mutex();\n      this.lockMap[lockId] = mutex;\n    }\n    return mutex;\n  }\n\n  private async _getNetworkNextNonce(address: string) {\n    // calculate next nonce\n    // we need to make sure our base count\n    // and pending count are from the same block\n    const block = await this.blockTracker.getLatestBlock();\n    const baseCountStr = await this.provider.request<[string, string], string>({\n      method: METHOD_TYPES.ETH_GET_TRANSACTION_COUNT,\n      params: [address, block.idempotencyKey],\n    });\n    const baseCount = Number.parseInt(baseCountStr, 16);\n    const nonceDetails = { block, baseCount };\n    return { name: \"network\", nonce: baseCount, details: nonceDetails };\n  }\n\n  private _getHighestLocallyConfirmed(address: string): number {\n    const confirmedTransactions = this.getConfirmedTransactions(address);\n    const highest = this._getHighestNonce(confirmedTransactions);\n    return Number.isInteger(highest) ? highest + 1 : 0;\n  }\n\n  private _getHighestNonce(txList: EthereumTransactionMeta[]): number {\n    const nonces = txList.map((txMeta) => {\n      const { nonce } = txMeta.transaction;\n      return Number.parseInt(nonce, 16);\n    });\n    const highestNonce = Math.max.apply(null, nonces);\n    return highestNonce;\n  }\n\n  private _getHighestContinuousFrom(txList: EthereumTransactionMeta[], startPoint: number): Nonce {\n    const nonces = new Set(\n      txList.map((txMeta) => {\n        const { nonce } = txMeta.transaction;\n        return Number.parseInt(nonce, 16);\n      })\n    );\n\n    let highest = startPoint;\n    while (nonces.has(highest)) {\n      highest += 1;\n    }\n\n    return { name: \"local\", nonce: highest, details: { startPoint, highest } };\n  }\n}\n\nexport default NonceTracker;\n","import {\n  BASE_TX_EVENT_TYPE,\n  ITransactionController,\n  TransactionStatus,\n  TX_CONFIRMED_EVENT_TYPE,\n  TX_DROPPED_EVENT_TYPE,\n  TX_EVENTS,\n  TX_FAILED_EVENT_TYPE,\n  TX_WARNING_EVENT_TYPE,\n} from \"@toruslabs/base-controllers\";\nimport { SafeEventEmitter, SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nimport { METHOD_TYPES } from \"../utils/constants\";\nimport { EthereumBlock, EthereumTransactionMeta, TransactionParams, TransactionReceipt } from \"../utils/interfaces\";\nimport NonceTracker from \"./NonceTracker\";\nimport TransactionStateManager from \"./TransactionStateManager\";\n\nexport default class PendingTransactionTracker extends SafeEventEmitter {\n  DROPPED_BUFFER_COUNT = 3;\n\n  private nonceTracker: NonceTracker;\n\n  private provider: SafeEventEmitterProvider;\n\n  private approveTransaction: ITransactionController<EthereumTransactionMeta>[\"approveTransaction\"];\n\n  private droppedBlocksBufferByHash: Map<string, number>;\n\n  private getConfirmedTransactions: TransactionStateManager[\"getConfirmedTransactions\"];\n\n  private getPendingTransactions: TransactionStateManager[\"getPendingTransactions\"];\n\n  private publishTransaction: (rawTx: string) => Promise<string>;\n\n  constructor({\n    provider,\n    nonceTracker,\n    approveTransaction,\n    publishTransaction,\n    getPendingTransactions,\n    getConfirmedTransactions,\n  }: {\n    provider: SafeEventEmitterProvider;\n    nonceTracker: NonceTracker;\n    approveTransaction: ITransactionController<EthereumTransactionMeta>[\"approveTransaction\"];\n    publishTransaction: (rawTx: string) => Promise<string>;\n    getPendingTransactions: TransactionStateManager[\"getPendingTransactions\"];\n    getConfirmedTransactions: TransactionStateManager[\"getConfirmedTransactions\"];\n  }) {\n    super();\n    this.provider = provider;\n    this.nonceTracker = nonceTracker;\n    this.approveTransaction = approveTransaction;\n    this.publishTransaction = publishTransaction;\n    this.getPendingTransactions = getPendingTransactions;\n    this.getConfirmedTransactions = getConfirmedTransactions;\n    this.droppedBlocksBufferByHash = new Map();\n  }\n\n  /**\n    checks the network for signed txs and releases the nonce global lock if it is\n  */\n  public async updatePendingTxs(): Promise<void> {\n    // in order to keep the nonceTracker accurate we block it while updating pending transactions\n    const nonceGlobalLock = await this.nonceTracker.getGlobalLock();\n    try {\n      const pendingTxs = this.getPendingTransactions();\n      await Promise.all(pendingTxs.map((txMeta) => this._checkPendingTx(txMeta)));\n    } catch (error) {\n      log.error(\"PendingTransactionTracker - Error updating pending transactions\");\n      log.error(error);\n    }\n    nonceGlobalLock.releaseLock();\n  }\n\n  public async resubmitPendingTxs(block: EthereumBlock) {\n    const pending = this.getPendingTransactions();\n    // only try resubmitting if their are transactions to resubmit\n    if (pending.length === 0) return;\n    // Keep this as a for loop because we want to wait for each item to be submitted\n    for (const txMeta of pending) {\n      try {\n        await this._resubmitTx(txMeta, block.idempotencyKey);\n      } catch (error: unknown) {\n        /*\n      Dont marked as failed if the error is a \"known\" transaction warning\n      \"there is already a transaction with the same sender-nonce\n      but higher/same gas price\"\n\n      Also don't mark as failed if it has ever been broadcast successfully.\n      A successful broadcast means it may still be mined.\n      */\n        const errorMessage = (error as { value: Error }).value?.message?.toLowerCase() || (error as Error).message.toLowerCase();\n        const isKnownTx =\n          // geth\n          errorMessage.includes(\"replacement transaction underpriced\") ||\n          errorMessage.includes(\"known transaction\") ||\n          // parity\n          errorMessage.includes(\"gas price too low to replace\") ||\n          errorMessage.includes(\"transaction with the same hash was already imported\") ||\n          // other\n          errorMessage.includes(\"gateway timeout\") ||\n          errorMessage.includes(\"nonce too low\");\n        // ignore resubmit warnings, return early\n        if (isKnownTx) return;\n        // encountered real error - transition to error state\n        txMeta.warning = {\n          error: errorMessage,\n          message: \"There was an error when resubmitting this transaction.\",\n        };\n        this.emit(TX_EVENTS.TX_WARNING, { txMeta, error, txId: txMeta.id } as TX_WARNING_EVENT_TYPE<TransactionParams, EthereumTransactionMeta>);\n      }\n    }\n  }\n\n  async _resubmitTx(txMeta: EthereumTransactionMeta, latestBlockNumber?: string) {\n    if (!txMeta.firstRetryBlockNumber) {\n      this.emit(TX_EVENTS.TX_BLOCK_UPDATE, { txMeta, latestBlockNumber, txId: txMeta.id } as BASE_TX_EVENT_TYPE);\n    }\n\n    const firstRetryBlockNumber = txMeta.firstRetryBlockNumber || latestBlockNumber;\n    const txBlockDistance = Number.parseInt(latestBlockNumber, 16) - Number.parseInt(firstRetryBlockNumber, 16);\n\n    const retryCount = txMeta.retryCount || 0;\n\n    // Exponential backoff to limit retries at publishing (capped at last 15 mins)\n    if (txBlockDistance <= Math.min(50, 2 ** retryCount)) return undefined;\n\n    // Only auto-submit already-signed txs:\n    if (!(\"rawTx\" in txMeta)) return this.approveTransaction(txMeta.id);\n\n    const { rawTx } = txMeta;\n    const txHash = await this.publishTransaction(rawTx as string);\n\n    // Increment successful tries:\n    this.emit(TX_EVENTS.TX_RETRY, { txMeta, txId: txMeta.id } as BASE_TX_EVENT_TYPE);\n    return txHash;\n  }\n\n  async _checkPendingTx(foundTx: EthereumTransactionMeta): Promise<void> {\n    const txMeta = foundTx;\n    const txHash = txMeta.transactionHash;\n    const txId = txMeta.id;\n\n    // Only check submitted txs\n    if (txMeta.status !== TransactionStatus.submitted) return;\n\n    // extra check in case there was an uncaught error during the\n    // signature and submission process\n    if (!txHash) {\n      const noTxHashError = new Error(\"We had an error while submitting this transaction, please try again.\");\n      noTxHashError.name = \"NoTxHashError\";\n      this.emit(TX_EVENTS.TX_FAILED, { txId, error: noTxHashError } as TX_FAILED_EVENT_TYPE);\n      return;\n    }\n\n    // If another tx with the same nonce is mined, set as failed.\n    if (this._checkIfNonceIsTaken(txMeta)) {\n      this.emit(TX_EVENTS.TX_DROPPED, { txId } as TX_DROPPED_EVENT_TYPE);\n      return;\n    }\n\n    try {\n      const transactionReceipt = await this.provider.request<[string], TransactionReceipt>({\n        method: METHOD_TYPES.ETH_GET_TRANSACTION_RECEIPT,\n        params: [txHash],\n      });\n      if (transactionReceipt?.blockNumber) {\n        const { baseFeePerGas, timestamp } = await this.provider.request<[string, boolean], EthereumBlock>({\n          method: METHOD_TYPES.ETH_GET_BLOCK_BY_HASH,\n          params: [transactionReceipt.blockHash, false],\n        });\n        this.emit(TX_EVENTS.TX_CONFIRMED, {\n          txId,\n          txReceipt: transactionReceipt,\n          baseFeePerGas,\n          blockTimestamp: timestamp,\n        } as TX_CONFIRMED_EVENT_TYPE);\n        return;\n      }\n    } catch (error) {\n      log.error(\"error while loading tx\", error);\n      txMeta.warning = {\n        error: (error as Error).message,\n        message: \"There was a problem loading this transaction.\",\n      };\n      this.emit(TX_EVENTS.TX_WARNING, { txMeta } as TX_WARNING_EVENT_TYPE<TransactionParams, EthereumTransactionMeta>);\n    }\n\n    if (await this._checkIfTxWasDropped(txMeta)) {\n      this.emit(TX_EVENTS.TX_DROPPED, { txId } as TX_DROPPED_EVENT_TYPE);\n    }\n  }\n\n  async _checkIfTxWasDropped(txMeta: EthereumTransactionMeta): Promise<boolean> {\n    const {\n      transactionHash: txHash,\n      transaction: { nonce, from },\n    } = txMeta;\n    const networkNextNonce = await this.provider.request<[string, string], string>({\n      method: METHOD_TYPES.ETH_GET_TRANSACTION_COUNT,\n      params: [from, \"latest\"],\n    });\n\n    if (Number.parseInt(nonce, 16) >= Number.parseInt(networkNextNonce, 16)) {\n      return false;\n    }\n\n    if (!this.droppedBlocksBufferByHash.has(txHash)) {\n      this.droppedBlocksBufferByHash.set(txHash, 0);\n    }\n\n    const currentBlockBuffer = this.droppedBlocksBufferByHash.get(txHash);\n\n    if (currentBlockBuffer < this.DROPPED_BUFFER_COUNT) {\n      this.droppedBlocksBufferByHash.set(txHash, currentBlockBuffer + 1);\n      return false;\n    }\n\n    this.droppedBlocksBufferByHash.delete(txHash);\n    return true;\n  }\n\n  _checkIfNonceIsTaken(txMeta: EthereumTransactionMeta) {\n    const address = txMeta.transaction.from;\n    const completed = this.getConfirmedTransactions(address);\n    return completed.some((otherMeta) => {\n      if (otherMeta.id === txMeta.id) {\n        return false;\n      }\n      return otherMeta.transaction.nonce === txMeta.transaction.nonce;\n    });\n  }\n}\n","import { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { BN } from \"bn.js\";\nimport { cloneDeep } from \"lodash\";\nimport log from \"loglevel\";\n\nimport PollingBlockTracker from \"../Block/PollingBlockTracker\";\nimport { EthereumTransactionMeta, TransactionParams } from \"../utils/interfaces\";\nexport default class TransactionGasUtil {\n  provider: SafeEventEmitterProvider;\n\n  blockTracker: PollingBlockTracker;\n\n  constructor(provider: SafeEventEmitterProvider, blockTracker: PollingBlockTracker) {\n    this.provider = provider;\n    this.blockTracker = blockTracker;\n  }\n\n  public async analyzeGasUsage(txMeta: EthereumTransactionMeta) {\n    const block = await this.blockTracker.getLatestBlock();\n    // fallback to block gasLimit\n    const blockGasLimitBN = new BN(stripHexPrefix(block.gasLimit), 16);\n    const saferGasLimitBN = blockGasLimitBN.mul(new BN(19)).div(new BN(20));\n    let estimatedGasHex = addHexPrefix(saferGasLimitBN.toString(\"hex\"));\n    let simulationFails: Record<string, unknown>;\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      log.warn(error);\n      simulationFails = {\n        reason: (error as Error).message,\n        errorKey: (error as Error & { errorKey: string }).errorKey,\n        debug: { blockNumber: block.idempotencyKey, blockGasLimit: block.gasLimit },\n      };\n    }\n    return { blockGasLimit: block.gasLimit, estimatedGasHex, simulationFails };\n  }\n\n  /**\n    Adds a gas buffer with out exceeding the block gas limit\n  */\n  public addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = new BN(stripHexPrefix(initialGasLimitHex), 16);\n    const blockGasLimitBn = new BN(stripHexPrefix(blockGasLimitHex), 16);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return addHexPrefix(initialGasLimitBn.toString(\"hex\"));\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return addHexPrefix(bufferedGasLimitBn.toString(\"hex\"));\n    // otherwise use blockGasLimit\n    return addHexPrefix(upperGasLimitBn.toString(\"hex\"));\n  }\n\n  /**\n    Estimates the tx's gas usage\n  */\n  private async estimateTxGas(txMeta: EthereumTransactionMeta): Promise<string> {\n    const txParams = cloneDeep(txMeta.transaction);\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n\n    return this.provider.request<[TransactionParams], string>({ method: \"eth_estimateGas\", params: [txParams] });\n  }\n}\n","import jsonDiffer, { Operation } from \"fast-json-patch\";\nimport { cloneDeep } from \"lodash\";\n\nimport { EthereumTransactionMeta } from \"../utils/interfaces\";\n\n/**\n  Generates an array of history objects sense the previous state.\n  The object has the keys\n    op (the operation performed),\n    path (the key and if a nested object then each key will be seperated with a `/`)\n    value\n  with the first entry having the note and a timestamp when the change took place\n*/\nfunction generateHistoryEntry(previousState: Record<string, unknown>, newState: Record<string, unknown>, note?: string): Record<string, unknown>[] {\n  const entry = jsonDiffer.compare(previousState, newState) as unknown as Record<string, unknown>[];\n  // Add a note to the first op, since it breaks if we append it to the entry\n  if (entry[0]) {\n    if (note) {\n      entry[0].note = note;\n    }\n\n    entry[0].timestamp = Date.now();\n  }\n  return entry;\n}\n\n/**\n  Recovers previous txMeta state obj\n*/\nfunction replayHistory(_shortHistory: Record<string, unknown>[]): Record<string, unknown> {\n  const shortHistory = cloneDeep(_shortHistory);\n  return shortHistory.reduce((val: Record<string, unknown>, entry: unknown) => jsonDiffer.applyPatch(val, entry as Operation[]).newDocument);\n}\n\nfunction snapshotFromTxMeta(txMeta: EthereumTransactionMeta): EthereumTransactionMeta {\n  const shallow = { ...txMeta };\n  delete shallow.history;\n  return cloneDeep(shallow);\n}\n\nexport { generateHistoryEntry, replayHistory, snapshotFromTxMeta };\n","import { addHexPrefix, isHexString, isValidAddress } from \"@ethereumjs/util\";\nimport { rpcErrors } from \"@metamask/rpc-errors\";\nimport { randomId, TRANSACTION_TYPE, TRANSACTION_TYPES, TransactionStatus } from \"@toruslabs/base-controllers\";\nimport { SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport { Interface } from \"ethers\";\nimport log from \"loglevel\";\n\nimport { ecr20Abi, erc721Abi, erc1155Abi } from \"../utils/abis\";\nimport {\n  CONTRACT_TYPE_ERC20,\n  CONTRACT_TYPE_ERC721,\n  CONTRACT_TYPE_ERC1155,\n  CONTRACT_TYPE_ETH,\n  METHOD_TYPES,\n  TRANSACTION_ENVELOPE_TYPES,\n} from \"../utils/constants\";\nimport { EthereumTransactionMeta, TRANSACTION_ENVELOPE_TYPES_TYPE, TransactionParams } from \"../utils/interfaces\";\n\nconst erc20Interface = new Interface(ecr20Abi);\nconst erc721Interface = new Interface(erc721Abi);\nconst erc1155Interface = new Interface(erc1155Abi);\n\n// functions that handle normalizing of that key in txParams\ntype NormalizableTransactionParams = keyof Omit<TransactionParams, \"accessList\">;\nconst normalizers: Partial<\n  Record<\n    NormalizableTransactionParams,\n    (param: NormalizableTransactionParams, ...args: unknown[]) => TransactionParams[NormalizableTransactionParams]\n  >\n> = {\n  from: (from: string, LowerCase = true) => (LowerCase ? addHexPrefix(from).toLowerCase() : addHexPrefix(from)),\n  to: (to: string, LowerCase = true) => (LowerCase ? addHexPrefix(to).toLowerCase() : addHexPrefix(to)),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  customNonceValue: (nonce: string) => addHexPrefix(nonce),\n  value: (value: string) => addHexPrefix(value),\n  data: (data: string) => addHexPrefix(data),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  type: addHexPrefix as (str: string) => TRANSACTION_ENVELOPE_TYPES_TYPE,\n  maxFeePerGas: addHexPrefix,\n  maxPriorityFeePerGas: addHexPrefix,\n};\n\n/**\n * normalizes txParams\n */\nexport function normalizeTxParameters(txParameters: TransactionParams, lowerCase = true): TransactionParams {\n  // apply only keys in the normalizers\n  const normalizedTxParameters: TransactionParams = { id: txParameters.id || randomId(), from: txParameters.from };\n  for (const key in normalizers) {\n    const currentKey = key as NormalizableTransactionParams;\n    if (txParameters[currentKey])\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      normalizedTxParameters[currentKey] = normalizers[currentKey](txParameters[currentKey] as NormalizableTransactionParams, lowerCase) as any;\n  }\n  return normalizedTxParameters;\n}\n\nexport function transactionMatchesNetwork(transaction: EthereumTransactionMeta, chainId: string) {\n  if (typeof transaction.chainId !== \"undefined\") {\n    return transaction.chainId === chainId;\n  }\n  return false;\n}\n\n/**\n * Determines if the maxFeePerGas and maxPriorityFeePerGas fields are supplied\n * and valid inputs. This will return false for non hex string inputs.\n *  the transaction to check\n * @returns true if transaction uses valid EIP1559 fields\n */\nexport function isEIP1559Transaction(transaction: Partial<EthereumTransactionMeta>) {\n  return (\n    isHexString(addHexPrefix(transaction?.transaction?.maxFeePerGas)) && isHexString(addHexPrefix(transaction?.transaction?.maxPriorityFeePerGas))\n  );\n}\n\n/**\n * Determine if the maxFeePerGas and maxPriorityFeePerGas fields are not\n * supplied and that the gasPrice field is valid if it is provided. This will\n * return false if gasPrice is a non hex string.\n * transaction -\n *  the transaction to check\n * @returns true if transaction uses valid Legacy fields OR lacks\n *  EIP1559 fields\n */\nexport function isLegacyTransaction(transaction: EthereumTransactionMeta) {\n  return (\n    typeof transaction.transaction.maxFeePerGas === \"undefined\" &&\n    typeof transaction.transaction.maxPriorityFeePerGas === \"undefined\" &&\n    (typeof transaction.transaction.gasPrice === \"undefined\" || isHexString(addHexPrefix(transaction.transaction.gasPrice)))\n  );\n}\n\n/**\n * Given two fields, ensure that the second field is not included in txParams,\n * and if it is throw an invalidParams error.\n */\nexport function ensureMutuallyExclusiveFieldsNotProvided(\n  txParams: TransactionParams,\n  fieldBeingValidated: NormalizableTransactionParams,\n  mutuallyExclusiveField: NormalizableTransactionParams\n) {\n  if (typeof txParams[mutuallyExclusiveField] !== \"undefined\") {\n    throw rpcErrors.invalidParams(\n      `Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`\n    );\n  }\n}\n\n/**\n * Ensures that the provided value for field is a string, throws an\n * invalidParams error if field is not a string.\n */\nexport function ensureFieldIsString(txParams: TransactionParams, field: NormalizableTransactionParams) {\n  if (typeof txParams[field] !== \"string\") {\n    throw rpcErrors.invalidParams(`Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`);\n  }\n}\n\n/**\n * Ensures that the provided txParams has the proper 'type' specified for the\n * given field, if it is provided. If types do not match throws an\n * invalidParams error.\n */\nfunction ensureProperTransactionEnvelopeTypeProvided(txParams: TransactionParams, field: NormalizableTransactionParams) {\n  switch (field) {\n    case \"maxFeePerGas\":\n    case \"maxPriorityFeePerGas\":\n      if (txParams.type && txParams.type !== TRANSACTION_ENVELOPE_TYPES.FEE_MARKET) {\n        throw rpcErrors.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but ` +\n            `including maxFeePerGas and maxPriorityFeePerGas requires type: \"${TRANSACTION_ENVELOPE_TYPES.FEE_MARKET}\"`\n        );\n      }\n      break;\n    case \"gasPrice\":\n    default:\n      if (txParams.type && txParams.type === TRANSACTION_ENVELOPE_TYPES.FEE_MARKET) {\n        throw rpcErrors.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but ` +\n            \"included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas\"\n        );\n      }\n  }\n}\n\n/**\n * validates the from field in  txParams\n */\nexport function validateFrom(txParams: TransactionParams) {\n  if (!(typeof txParams.from === \"string\")) {\n    throw rpcErrors.invalidParams(`Invalid \"from\" address \"${txParams.from}\": not a string.`);\n  }\n  if (!isValidAddress(txParams.from)) {\n    throw rpcErrors.invalidParams('Invalid \"from\" address.');\n  }\n}\n\n/**\n * validates the to field in  txParams\n */\nexport function validateRecipient(txParameters: TransactionParams) {\n  if (txParameters.to === \"0x\" || txParameters.to === null) {\n    if (txParameters.data) {\n      delete txParameters.to;\n    } else {\n      throw rpcErrors.invalidParams('Invalid \"to\" address.');\n    }\n  } else if (txParameters.to !== undefined && !isValidAddress(txParameters.to)) {\n    throw rpcErrors.invalidParams('Invalid \"to\" address.');\n  }\n  return txParameters;\n}\n\n/**\n * Validates the given tx parameters\n * @throws if the tx params contains invalid fields\n */\nexport function validateTxParameters(txParams: TransactionParams, eip1559Compatibility = true) {\n  if (!txParams || typeof txParams !== \"object\" || Array.isArray(txParams)) {\n    throw rpcErrors.invalidParams(\"Invalid transaction params: must be an object.\");\n  }\n  if (!txParams.to && !txParams.data) {\n    throw rpcErrors.invalidParams(\n      'Invalid transaction params: must specify \"data\" for contract deployments, or \"to\" (and optionally \"data\") for all other types of transactions.'\n    );\n  }\n\n  if (isEIP1559Transaction({ transaction: txParams }) && !eip1559Compatibility) {\n    throw rpcErrors.invalidParams(\n      \"Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559\"\n    );\n  }\n\n  Object.entries(txParams).forEach(([key, value]) => {\n    // validate types\n    switch (key) {\n      case \"from\":\n        validateFrom(txParams);\n        break;\n      case \"to\":\n        validateRecipient(txParams);\n        break;\n      case \"gasPrice\":\n        ensureProperTransactionEnvelopeTypeProvided(txParams, \"gasPrice\");\n        ensureMutuallyExclusiveFieldsNotProvided(txParams, \"gasPrice\", \"maxFeePerGas\");\n        ensureMutuallyExclusiveFieldsNotProvided(txParams, \"gasPrice\", \"maxPriorityFeePerGas\");\n        ensureFieldIsString(txParams, \"gasPrice\");\n        break;\n      case \"maxFeePerGas\":\n        ensureProperTransactionEnvelopeTypeProvided(txParams, \"maxFeePerGas\");\n        ensureMutuallyExclusiveFieldsNotProvided(txParams, \"maxFeePerGas\", \"gasPrice\");\n        ensureFieldIsString(txParams, \"maxFeePerGas\");\n        break;\n      case \"maxPriorityFeePerGas\":\n        ensureProperTransactionEnvelopeTypeProvided(txParams, \"maxPriorityFeePerGas\");\n        ensureMutuallyExclusiveFieldsNotProvided(txParams, \"maxPriorityFeePerGas\", \"gasPrice\");\n        ensureFieldIsString(txParams, \"maxPriorityFeePerGas\");\n        break;\n      case \"value\":\n        ensureFieldIsString(txParams, \"value\");\n        if (value.toString().includes(\"-\")) {\n          throw rpcErrors.invalidParams(`Invalid transaction value \"${value}\": not a positive number.`);\n        }\n\n        if (value.toString().includes(\".\")) {\n          throw rpcErrors.invalidParams(`Invalid transaction value of \"${value}\": number must be in wei.`);\n        }\n        break;\n      case \"chainId\":\n        if (typeof value !== \"number\" && typeof value !== \"string\") {\n          throw rpcErrors.invalidParams(`Invalid transaction params: ${key} is not a Number or hex string. got: (${value})`);\n        }\n        break;\n      default:\n        ensureFieldIsString(txParams, key as NormalizableTransactionParams);\n    }\n  });\n}\n\nexport function normalizeAndValidateTxParams(txParams: TransactionParams, lowerCase = true) {\n  const normalizedTxParams = normalizeTxParameters(txParams, lowerCase);\n  validateTxParameters(normalizedTxParams);\n  return normalizedTxParams;\n}\n\n/**\n * @returns an array of states that can be considered final\n */\nexport function getFinalStates() {\n  return [\n    TransactionStatus.rejected, // the user has responded no!\n    TransactionStatus.confirmed, // the tx has been included in a block.\n    TransactionStatus.failed, // the tx failed for some reason, included on tx data.\n    TransactionStatus.dropped, // the tx nonce was already used\n  ];\n}\n\nexport function parseStandardTokenTransactionData(data: string) {\n  try {\n    const txDesc = erc20Interface.parseTransaction({ data });\n    if (txDesc) return { name: txDesc.name, methodParams: txDesc.args.toArray(), type: CONTRACT_TYPE_ERC20 };\n  } catch {\n    // ignore and next try to parse with erc721 ABI\n  }\n\n  try {\n    const txDesc = erc721Interface.parseTransaction({ data });\n    if (txDesc) return { name: txDesc.name, methodParams: txDesc.args.toArray(), type: CONTRACT_TYPE_ERC721 };\n  } catch {\n    // ignore and next try to parse with erc1155 ABI\n  }\n\n  try {\n    const txDesc = erc1155Interface.parseTransaction({ data });\n    if (txDesc) return { name: txDesc.name, methodParams: txDesc.args.toArray(), type: CONTRACT_TYPE_ERC1155 };\n  } catch {\n    // ignore and return undefined\n  }\n\n  return undefined;\n}\n\nexport const readAddressAsContract = async (\n  provider: SafeEventEmitterProvider,\n  address: string\n): Promise<{ contractCode: string; isContractAddress: boolean }> => {\n  let contractCode;\n  try {\n    contractCode = await provider.request<[string, string], string>({ method: METHOD_TYPES.ETH_GET_CODE, params: [address, \"latest\"] });\n  } catch (e) {\n    contractCode = null;\n  }\n\n  const isContractAddress = contractCode ? contractCode !== \"0x\" && contractCode !== \"0x0\" : false;\n  return { contractCode, isContractAddress };\n};\n\nexport async function determineTransactionType(txParams: TransactionParams, provider: SafeEventEmitterProvider) {\n  const { data, to } = txParams;\n  let name: string = \"\";\n  let methodParams = [];\n  let type = \"\";\n  try {\n    ({ name, methodParams, type } = (data && parseStandardTokenTransactionData(data)) || {});\n  } catch (error) {\n    log.debug(\"Failed to parse transaction data\", error);\n  }\n  let result: TRANSACTION_TYPE;\n  let contractCode = \"\";\n  if (data && !to) {\n    result = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n  } else {\n    const { contractCode: resultCode, isContractAddress } = await readAddressAsContract(provider, to);\n    contractCode = resultCode;\n    if (isContractAddress) {\n      const valueExists = txParams.value && Number(txParams.value) !== 0;\n      const tokenMethodName: TRANSACTION_TYPE = [\n        TRANSACTION_TYPES.TOKEN_METHOD_APPROVE,\n        TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER,\n        TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM,\n        TRANSACTION_TYPES.COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM,\n        TRANSACTION_TYPES.SET_APPROVAL_FOR_ALL,\n      ].find((x) => x.toLowerCase() === name?.toLowerCase());\n\n      result = data && tokenMethodName && !valueExists ? tokenMethodName : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    } else {\n      result = TRANSACTION_TYPES.SENT_ETHER;\n    }\n  }\n  return { type: type || CONTRACT_TYPE_ETH, category: result, methodParams, getCodeResponse: contractCode };\n}\n","import {\n  BaseTransactionStateManager,\n  ITransactionStateManager,\n  randomId,\n  TransactionConfig,\n  transactionMatchesNetwork,\n  TransactionState,\n  TransactionStatus,\n  TX_EVENTS,\n  TX_STATUS_UPDATE_EVENT_TYPE,\n} from \"@toruslabs/base-controllers\";\nimport { keyBy, mapValues, omitBy, pickBy, sortBy } from \"lodash\";\n\nimport NetworkController from \"../Network/NetworkController\";\nimport { DappSuggestedGasFees, EthereumTransactionMeta, TransactionParams } from \"../utils/interfaces\";\nimport { generateHistoryEntry, replayHistory, snapshotFromTxMeta } from \"./TransactionStateHistoryHelper\";\nimport { getFinalStates, normalizeAndValidateTxParams } from \"./TransactionUtils\";\n\nexport default class TransactionStateManager\n  extends BaseTransactionStateManager<TransactionParams, EthereumTransactionMeta>\n  implements ITransactionStateManager<TransactionParams>\n{\n  constructor({\n    config,\n    state,\n    getCurrentChainId,\n  }: {\n    config?: Partial<TransactionConfig>;\n    state?: Partial<TransactionState<TransactionParams, EthereumTransactionMeta>>;\n    getCurrentChainId: NetworkController[\"getNetworkIdentifier\"];\n  }) {\n    super({ config, state, getCurrentChainId });\n  }\n\n  generateTxMeta(opts: Partial<EthereumTransactionMeta> = {}): EthereumTransactionMeta {\n    const chainId = this.getCurrentChainId();\n    if (chainId === \"loading\") throw new Error(\"Torus is having trouble connecting to the network\");\n    let dappSuggestedGasFees: DappSuggestedGasFees = null;\n\n    // If we are dealing with a transaction suggested by a dapp and not\n    // an internally created transaction, we need to keep record of\n    // the originally submitted gasParams.\n    if (opts.transaction && typeof opts.origin === \"string\" && opts.origin !== \"torus\") {\n      if (typeof opts.transaction.gasPrice !== \"undefined\") {\n        dappSuggestedGasFees = {\n          gasPrice: opts.transaction.gasPrice,\n        };\n      } else if (typeof opts.transaction.maxFeePerGas !== \"undefined\" || typeof opts.transaction.maxPriorityFeePerGas !== \"undefined\") {\n        dappSuggestedGasFees = {\n          maxPriorityFeePerGas: opts.transaction.maxPriorityFeePerGas,\n          maxFeePerGas: opts.transaction.maxFeePerGas,\n        };\n      }\n\n      if (typeof opts.transaction.gas !== \"undefined\") {\n        dappSuggestedGasFees = {\n          ...dappSuggestedGasFees,\n          gas: opts.transaction.gas,\n        };\n      }\n    }\n\n    return {\n      id: opts.transaction.id || randomId(),\n      time: Date.now(),\n      status: TransactionStatus.unapproved,\n      loadingDefaults: true,\n      chainId,\n      dappSuggestedGasFees,\n      ...opts,\n    } as EthereumTransactionMeta;\n  }\n\n  addTransactionToState(txMeta: EthereumTransactionMeta): EthereumTransactionMeta {\n    if (txMeta.transaction) {\n      txMeta.transaction = normalizeAndValidateTxParams(txMeta.transaction, false);\n    }\n    this.once(`${txMeta.id}:signed`, () => {\n      this.removeAllListeners(`${txMeta.id}:rejected`);\n    });\n    this.once(`${txMeta.id}:rejected`, () => {\n      this.removeAllListeners(`${txMeta.id}:signed`);\n    });\n    // initialize history\n    txMeta.history = [];\n    // capture initial snapshot of txMeta for history\n    const snapshot = snapshotFromTxMeta(txMeta);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    txMeta.history.push(snapshot as any);\n\n    const transactions = this.getTransactions({\n      filterToCurrentNetwork: false,\n    });\n    const { txHistoryLimit } = this.config;\n\n    // checks if the length of the tx history is longer then desired persistence\n    // limit and then if it is removes the oldest confirmed or rejected tx.\n    // Pending or unapproved transactions will not be removed by this\n    // operation. For safety of presenting a fully functional transaction UI\n    // representation, this function will not break apart transactions with the\n    // same nonce, per network. Not accounting for transactions of the same\n    // nonce and network combo can result in confusing or broken experiences\n    // in the UI.\n    //\n    // we will send UI only collected groups of transactions *per page* so at\n    // some point in the future, this persistence limit can be adjusted. When\n    // we do that I think we should figure out a better storage solution for\n    // transaction history entries.\n    const nonceNetworkSet = new Set();\n\n    const txsToDelete = transactions\n      .reverse()\n      .filter((tx) => {\n        const { nonce } = tx.transaction;\n        const { chainId, status } = tx;\n        const key = `${nonce}-${chainId}`;\n        if (nonceNetworkSet.has(key)) {\n          return false;\n        }\n        if (nonceNetworkSet.size < txHistoryLimit - 1 || getFinalStates().includes(status) === false) {\n          nonceNetworkSet.add(key);\n          return false;\n        }\n        return true;\n      })\n      .map((tx) => tx.id);\n\n    this._deleteTransactions(txsToDelete);\n    this._addTransactionsToState([txMeta]);\n    return txMeta;\n  }\n\n  /**\n    Removes transaction from the given address for the current network\n    from the txList\n  */\n  wipeTransactions(address: string): void {\n    const { transactions } = this.state;\n    const chainId = this.getCurrentChainId();\n\n    this.update({\n      transactions: omitBy(transactions, (txMeta: EthereumTransactionMeta) => {\n        const transactionMatch = transactionMatchesNetwork(txMeta, chainId);\n        return txMeta.transaction.from === address && transactionMatch;\n      }),\n    });\n  }\n\n  getTransactions({\n    searchCriteria = {},\n    initialList = undefined,\n    filterToCurrentNetwork = true,\n    limit = undefined,\n  }: {\n    searchCriteria?: Record<string, (val: unknown) => boolean> | Record<string, unknown>;\n    initialList?: EthereumTransactionMeta[];\n    filterToCurrentNetwork?: boolean;\n    limit?: number;\n  } = {}): EthereumTransactionMeta[] {\n    const chainId = this.getCurrentChainId();\n    // searchCriteria is an object that might have values that aren't predicate\n    // methods. When providing any other value type (string, number, etc), we\n    // consider this shorthand for \"check the value at key for strict equality\n    // with the provided value\". To conform this object to be only methods, we\n    // mapValues (lodash) such that every value on the object is a method that\n    // returns a boolean.\n    const predicateMethods: unknown = mapValues(searchCriteria, (predicate) =>\n      typeof predicate === \"function\" ? predicate : (v: unknown) => v === predicate\n    );\n\n    // If an initial list is provided we need to change it back into an object\n    // first, so that it matches the shape of our state. This is done by the\n    // lodash keyBy method. This is the edge case for this method, typically\n    // initialList will be undefined.\n    const transactionsToFilter = initialList ? keyBy(initialList, \"id\") : this.state.transactions;\n\n    // Combine sortBy and pickBy to transform our state object into an array of\n    // matching transactions that are sorted by time.\n    const filteredTransactions = sortBy(\n      pickBy(transactionsToFilter, (txMeta) => {\n        // default matchesCriteria to the value of transactionMatchesNetwork\n        // when filterToCurrentNetwork is true.\n        const transactionMatches = transactionMatchesNetwork(txMeta, chainId);\n        if (filterToCurrentNetwork && !transactionMatches) {\n          return false;\n        }\n        // iterate over the predicateMethods keys to check if the transaction\n        // matches the searchCriteria\n        for (const [key, predicate] of Object.entries(predicateMethods)) {\n          // We return false early as soon as we know that one of the specified\n          // search criteria do not match the transaction. This prevents\n          // needlessly checking all criteria when we already know the criteria\n          // are not fully satisfied. We check both txParams and the base\n          // object as predicate keys can be either.\n          if (key in txMeta.transaction) {\n            if (predicate(txMeta.transaction[key as keyof TransactionParams]) === false) {\n              return false;\n            }\n          } else if (predicate(txMeta[key as keyof EthereumTransactionMeta]) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }),\n      \"time\"\n    );\n\n    if (limit !== undefined) {\n      // We need to have all transactions of a given nonce in order to display\n      // necessary details in the UI. We use the size of this set to determine\n      // whether we have reached the limit provided, thus ensuring that all\n      // transactions of nonces we include will be sent to the UI.\n      const nonces = new Set();\n      const txs = [];\n      // By default, the transaction list we filter from is sorted by time ASC.\n      // To ensure that filtered results prefers the newest transactions we\n      // iterate from right to left, inserting transactions into front of a new\n      // array. The original order is preserved, but we ensure that newest txs\n      // are preferred.\n      for (let i = filteredTransactions.length - 1; i > -1; i -= 1) {\n        const txMeta = filteredTransactions[i];\n        const { nonce } = txMeta.transaction;\n        if (!nonces.has(nonce)) {\n          if (nonces.size < limit) {\n            nonces.add(nonce);\n          } else {\n            continue;\n          }\n        }\n        // Push transaction into the beginning of our array to ensure the\n        // original order is preserved.\n        txs.unshift(txMeta);\n      }\n      return txs;\n    }\n\n    return filteredTransactions;\n  }\n\n  getApprovedTransactions(address?: string): EthereumTransactionMeta[] {\n    const searchCriteria: { status: TransactionStatus; from?: string } = { status: TransactionStatus.approved };\n    if (address) {\n      searchCriteria.from = address;\n    }\n    return this.getTransactions({ searchCriteria });\n  }\n\n  getSubmittedTransactions(address?: string): EthereumTransactionMeta[] {\n    const searchCriteria: { status: TransactionStatus; from?: string } = { status: TransactionStatus.submitted };\n    if (address) {\n      searchCriteria.from = address;\n    }\n    return this.getTransactions({ searchCriteria });\n  }\n\n  getPendingTransactions(address?: string): EthereumTransactionMeta[] {\n    const submitted = this.getSubmittedTransactions(address);\n    const approved = this.getApprovedTransactions(address);\n    return [...submitted, ...approved];\n  }\n\n  getConfirmedTransactions(address?: string): EthereumTransactionMeta[] {\n    const searchCriteria: { status: TransactionStatus; from?: string } = { status: TransactionStatus.confirmed };\n    if (address) {\n      searchCriteria.from = address;\n    }\n    return this.getTransactions({ searchCriteria });\n  }\n\n  getUnapprovedTxList(): Record<string, EthereumTransactionMeta> {\n    const chainId = this.getCurrentChainId();\n\n    return pickBy(this.state.transactions, (transaction) => {\n      const transactionMatches = transactionMatchesNetwork(transaction, chainId);\n      return transaction.status === TransactionStatus.unapproved && transactionMatches;\n    });\n  }\n\n  updateTransactionInState(txMeta: EthereumTransactionMeta, note?: string) {\n    // validate txParams\n    if (txMeta.transaction) {\n      txMeta.transaction = normalizeAndValidateTxParams(txMeta.transaction, false);\n    }\n\n    // create txMeta snapshot for history\n    const currentState = snapshotFromTxMeta(txMeta);\n    // recover previous tx state obj\n    const previousState = replayHistory(txMeta.history);\n    // generate history entry and add to history\n    const entry = generateHistoryEntry(previousState, currentState as unknown as Record<string, unknown>, note);\n    if (entry.length > 0) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      txMeta.history.push(entry as any);\n    }\n\n    // commit txMeta to state\n    this.updateTransaction(txMeta);\n  }\n\n  protected override _setTransactionStatus(txId: string, status: TransactionStatus, isFinalStep?: boolean): void {\n    const txMeta = this.getTransaction(txId);\n    if (!txMeta) {\n      return;\n    }\n    txMeta.status = status;\n    this.updateTransactionInState(txMeta);\n    this.emit(TX_EVENTS.TX_STATUS_UPDATE, { txId, status } as TX_STATUS_UPDATE_EVENT_TYPE);\n    if (this.isFinalState(status) || isFinalStep) {\n      this.emit(`${txMeta.id}:finished`, txMeta);\n    } else {\n      this.emit(`${txMeta.id}:${status}`, txId);\n    }\n  }\n}\n","import { Common, Hardfork } from \"@ethereumjs/common\";\nimport { TransactionFactory, TypedTransaction } from \"@ethereumjs/tx\";\nimport { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport {\n  ITransactionController,\n  TRANSACTION_TYPES,\n  TransactionConfig,\n  TransactionState,\n  TransactionStatus,\n  TX_CONFIRMED_EVENT_TYPE,\n  TX_DROPPED_EVENT_TYPE,\n  TX_EVENTS,\n  TX_FAILED_EVENT_TYPE,\n  TX_WARNING_EVENT_TYPE,\n} from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, SafeEventEmitterProvider } from \"@toruslabs/openlogin-jrpc\";\nimport BigNumber from \"bignumber.js\";\nimport { keccak256 } from \"ethers\";\nimport log from \"loglevel\";\n\nimport PollingBlockTracker from \"../Block/PollingBlockTracker\";\nimport GasFeeController from \"../Gas/GasFeeController\";\nimport { type EthereumGasFeeEstimates, EthereumLegacyGasFeeEstimates } from \"../Gas/IGasFeeController\";\nimport KeyringController from \"../Keyring/KeyringController\";\nimport NetworkController from \"../Network/NetworkController\";\nimport PreferencesController from \"../Preferences/PreferencesController\";\nimport { CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP, GAS_ESTIMATE_TYPES, METHOD_TYPES, TRANSACTION_ENVELOPE_TYPES } from \"../utils/constants\";\nimport { decGWEIToHexWEI } from \"../utils/conversionUtils\";\nimport { bnLessThan, GAS_LIMITS, getChainType } from \"../utils/helpers\";\nimport {\n  EthereumBlock,\n  EthereumTransactionMeta,\n  NonceLockRes,\n  TransactionParams,\n  TransactionReceipt,\n  UserRequestApprovalParams,\n} from \"../utils/interfaces\";\nimport NonceTracker from \"./NonceTracker\";\nimport PendingTransactionTracker from \"./PendingTransactionTracker\";\nimport TransactionGasUtil from \"./TransactionGasUtil\";\nimport TransactionStateManager from \"./TransactionStateManager\";\nimport { determineTransactionType, isEIP1559Transaction, normalizeTxParameters, validateTxParameters } from \"./TransactionUtils\";\n\nexport default class TransactionController extends TransactionStateManager implements ITransactionController<TransactionParams> {\n  getSelectedAddress: PreferencesController[\"getSelectedAddress\"];\n\n  getEIP1559GasFeeEstimates: GasFeeController[\"fetchGasFeeEstimates\"];\n\n  public nonceTracker: NonceTracker;\n\n  public pendingTxTracker: PendingTransactionTracker;\n\n  public txGasUtil: TransactionGasUtil;\n\n  private _getCurrentNetworkEIP1559Compatibility: NetworkController[\"getEIP1559Compatibility\"];\n\n  private _getCurrentAccountEIP1559Compatibility: (address?: string) => Promise<boolean>;\n\n  private getProviderConfig: NetworkController[\"getProviderConfig\"];\n\n  private signEthTx: KeyringController[\"signTransaction\"];\n\n  private provider: SafeEventEmitterProvider;\n\n  private blockTracker: PollingBlockTracker;\n\n  private inProcessOfSigning: Set<string> = new Set();\n\n  constructor({\n    config,\n    state,\n    provider,\n    blockTracker,\n    signEthTx,\n    getCurrentChainId,\n    getCurrentNetworkEIP1559Compatibility,\n    getProviderConfig,\n    getCurrentAccountEIP1559Compatibility,\n    getSelectedAddress,\n    getEIP1559GasFeeEstimates,\n  }: {\n    config?: Partial<TransactionConfig>;\n    state?: Partial<TransactionState<TransactionParams, EthereumTransactionMeta>>;\n    provider: SafeEventEmitterProvider;\n    blockTracker: PollingBlockTracker;\n    signEthTx: KeyringController[\"signTransaction\"];\n    getCurrentChainId: NetworkController[\"getNetworkIdentifier\"];\n    getProviderConfig: NetworkController[\"getProviderConfig\"];\n    getCurrentNetworkEIP1559Compatibility: NetworkController[\"getEIP1559Compatibility\"];\n    getCurrentAccountEIP1559Compatibility: (address?: string) => Promise<boolean>; // used only if keyring supports EIP-1559\n    getSelectedAddress: PreferencesController[\"getSelectedAddress\"];\n    getEIP1559GasFeeEstimates: GasFeeController[\"fetchGasFeeEstimates\"];\n  }) {\n    super({ config, state, getCurrentChainId });\n    this.blockTracker = blockTracker;\n    this.getProviderConfig = getProviderConfig;\n    this._getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;\n    this._getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility;\n    this.getSelectedAddress = getSelectedAddress;\n    this.getEIP1559GasFeeEstimates = getEIP1559GasFeeEstimates;\n    this.signEthTx = signEthTx;\n    this.provider = provider;\n    this.txGasUtil = new TransactionGasUtil(this.provider, this.blockTracker);\n    this.nonceTracker = new NonceTracker({\n      provider,\n      blockTracker,\n      getConfirmedTransactions: this.getConfirmedTransactions.bind(this),\n      getPendingTransactions: this.getSubmittedTransactions.bind(this), // nonce tracker should only care about submitted transactions\n    });\n    this.pendingTxTracker = new PendingTransactionTracker({\n      provider,\n      nonceTracker: this.nonceTracker,\n      getPendingTransactions: this.getPendingTransactions.bind(this), // pending tx tracker should only care about submitted and approved transactions\n      getConfirmedTransactions: this.getConfirmedTransactions.bind(this),\n      approveTransaction: this.approveTransaction.bind(this),\n      publishTransaction: (rawTx) => this.provider.request<[string], string>({ method: METHOD_TYPES.ETH_SEND_RAW_TRANSACTION, params: [rawTx] }),\n    });\n    this._setupListeners();\n  }\n\n  addTransactionUnapproved(txMeta: EthereumTransactionMeta) {\n    this.addTransactionToState(txMeta);\n    this.emit(`${txMeta.id}:unapproved`, txMeta);\n  }\n\n  async addNewUnapprovedTransaction(\n    txParams: TransactionParams,\n    req: JRPCRequest<TransactionParams> & UserRequestApprovalParams & { origin: string }\n  ): Promise<string> {\n    const txMeta = await this.createTransaction(txParams, req);\n    return this.processApproval(txMeta);\n  }\n\n  async processApproval(txMeta: EthereumTransactionMeta): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const handleFinished = (msg: EthereumTransactionMeta) => {\n        if (msg.status === TransactionStatus.rejected) {\n          return reject(providerErrors.userRejectedRequest(`Transaction Signature: User denied message signature`));\n        }\n        if (msg.status === TransactionStatus.failed) {\n          return reject(rpcErrors.internal(`Transaction Signature: failed to sign message ${msg.error}`));\n        }\n        if (msg.status === TransactionStatus.submitted) {\n          return resolve(msg.transactionHash);\n        }\n\n        return reject(rpcErrors.internal(`Transaction Signature: Unknown problem: ${JSON.stringify(txMeta.transaction)}`));\n      };\n      this.once(`${txMeta.id}:finished`, handleFinished);\n    });\n  }\n\n  async approveTransaction(transactionID: string): Promise<void> {\n    const txMeta = this.getTransaction(transactionID);\n    if (this.inProcessOfSigning.has(transactionID)) {\n      return;\n    }\n    this.inProcessOfSigning.add(transactionID);\n    let nonceLock: NonceLockRes;\n    try {\n      this.setTxStatusApproved(transactionID);\n      const fromAddress = txMeta.transaction.from;\n      const { customNonceValue } = txMeta.transaction;\n      const customNonceValueNumber = Number(customNonceValue);\n      nonceLock = await this.nonceTracker.getNonceLock(fromAddress);\n      // add nonce to txParams\n      // if txMeta has previousGasParams then it is a retry at same nonce with\n      // higher gas settings and therefor the nonce should not be recalculated\n      const nonce = nonceLock.nextNonce;\n      const customOrNonce = customNonceValueNumber === 0 ? customNonceValue : customNonceValue || nonce;\n      txMeta.transaction.nonce = addHexPrefix(customOrNonce.toString(16));\n      // add nonce debugging information to txMeta\n      txMeta.nonceDetails = nonceLock.nonceDetails;\n      this.updateTransactionInState(txMeta, \"transactions#approveTransaction\");\n      // sign transaction\n      const rawTx = await this.signTransaction(transactionID);\n      await this.publishTransaction(transactionID, rawTx);\n      nonceLock.releaseLock();\n    } catch (err) {\n      try {\n        this.setTxStatusFailed(transactionID, err as Error);\n      } catch (err2) {\n        log.error(err2);\n      }\n      // must set transaction to submitted/failed before releasing lock\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      // continue with error chain\n      throw err;\n    } finally {\n      this.inProcessOfSigning.delete(transactionID);\n    }\n  }\n\n  async signTransaction(txId: string): Promise<string> {\n    const txMeta = this.getTransaction(txId);\n    const chainId = this.getCurrentChainId();\n    const type = isEIP1559Transaction(txMeta) ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    const txParams: TransactionParams = {\n      ...txMeta.transaction,\n      type,\n      chainId,\n      gasLimit: txMeta.transaction.gas,\n    };\n    const fromAddress = txParams.from;\n    const common = await this.getCommonConfiguration(fromAddress);\n    const unsignedEthTx = TransactionFactory.fromTxData(txParams, { common });\n    const signedEthTx = await this.signEthTx<TypedTransaction, TypedTransaction>(unsignedEthTx, fromAddress);\n    txMeta.r = addHexPrefix(signedEthTx.r.toString(16));\n    txMeta.s = addHexPrefix(signedEthTx.s.toString(16));\n    txMeta.v = addHexPrefix(signedEthTx.v.toString(16));\n    this.updateTransactionInState(txMeta, \"transactions#signTransaction: add r, s, v values\");\n    this.setTxStatusSigned(txId);\n    const rawTx = addHexPrefix(Buffer.from(signedEthTx.serialize()).toString(\"hex\"));\n    return rawTx;\n  }\n\n  async publishTransaction(txId: string, rawTx: string): Promise<void> {\n    const txMeta = this.getTransaction(txId);\n    txMeta.rawTransaction = rawTx;\n    this.updateTransactionInState(txMeta, \"transactions#publishTransaction\");\n    let txHash: string;\n    try {\n      txHash = await this.provider.request<[string], string>({ method: METHOD_TYPES.ETH_SEND_RAW_TRANSACTION, params: [rawTx] });\n    } catch (error) {\n      if ((error as Error).message.toLowerCase().includes(\"known transaction\")) {\n        txHash = keccak256(addHexPrefix(rawTx));\n        txHash = addHexPrefix(txHash);\n      } else {\n        throw error;\n      }\n    }\n    this.setTxHash(txId, txHash);\n    this.setTxStatusSubmitted(txId);\n  }\n\n  async confirmTransaction(params: TX_CONFIRMED_EVENT_TYPE): Promise<void> {\n    const { txId, txReceipt } = params as TX_CONFIRMED_EVENT_TYPE & {\n      baseFeePerGas?: string;\n      blockTimestamp?: string;\n      txReceipt: TransactionReceipt;\n    };\n    log.info(params, \"confirm params\");\n    const txMeta = this.getTransaction(txId);\n    if (!txMeta) return;\n    try {\n      txMeta.txReceipt = {\n        ...txReceipt,\n      };\n      this.setTxStatusConfirmed(txId);\n      this.markNonceDuplicatesDropped(txId);\n      this.updateTransactionInState(txMeta, \"transactions#confirmTransaction - add txReceipt\");\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  cancelTransaction?(transactionID: string): Promise<void> {\n    throw new Error(`Method not implemented. ${transactionID}`);\n  }\n\n  async getEIP1559Compatibility(fromAddress?: string) {\n    const currentNetworkIsCompatible = await this._getCurrentNetworkEIP1559Compatibility();\n    const fromAccountIsCompatible = await this._getCurrentAccountEIP1559Compatibility(fromAddress);\n    return currentNetworkIsCompatible && fromAccountIsCompatible;\n  }\n\n  async addTransactionGasDefaults(txMeta: EthereumTransactionMeta) {\n    let updateTxMeta = txMeta;\n    try {\n      updateTxMeta = await this.addTxGasDefaults(txMeta);\n    } catch (error) {\n      log.warn(error);\n      updateTxMeta = this.getTransaction(txMeta.id);\n      updateTxMeta.loadingDefaults = false;\n      this.updateTransactionInState(txMeta, \"Failed to calculate gas defaults.\");\n      throw error;\n    }\n    updateTxMeta.loadingDefaults = false;\n\n    this.updateTransactionInState(updateTxMeta, \"Added new unapproved transaction.\");\n\n    return updateTxMeta;\n  }\n\n  async addTxGasDefaults(txMeta: EthereumTransactionMeta) {\n    const eip1559Compatibility = txMeta.transaction.type !== TRANSACTION_ENVELOPE_TYPES.LEGACY && (await this.getEIP1559Compatibility());\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(txMeta, eip1559Compatibility);\n    const { gasLimit: defaultGasLimit, simulationFails } = await this.getDefaultGasLimit(txMeta);\n\n    txMeta = this.getTransaction(txMeta.id);\n    if (simulationFails) {\n      txMeta.simulationFails = simulationFails;\n    }\n\n    if (eip1559Compatibility) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (txMeta.transaction.gasPrice && !txMeta.transaction.maxFeePerGas && !txMeta.transaction.maxPriorityFeePerGas) {\n        txMeta.transaction.maxFeePerGas = txMeta.transaction.gasPrice;\n        // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n        // then we set maxFeePerGas to the suggested gasPrice.\n\n        txMeta.transaction.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof txMeta.transaction.gasPrice === \"string\" ? stripHexPrefix(txMeta.transaction.gasPrice) : txMeta.transaction.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : txMeta.transaction.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !txMeta.transaction.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          txMeta.transaction.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !txMeta.transaction.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          txMeta.transaction.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !txMeta.transaction.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // from the gasFeeController, then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          txMeta.transaction.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (txMeta.transaction.maxFeePerGas && !txMeta.transaction.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available from the gasFeeController, then we set maxPriorityFeePerGas to\n          // txMeta.transaction.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          txMeta.transaction.maxPriorityFeePerGas = txMeta.transaction.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete txMeta.transaction.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete txMeta.transaction.maxPriorityFeePerGas;\n      delete txMeta.transaction.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on transaction, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !txMeta.transaction.gasPrice && !txMeta.transaction.maxPriorityFeePerGas && !txMeta.transaction.maxFeePerGas) {\n      txMeta.transaction.gasPrice = defaultGasPrice;\n    }\n\n    if (defaultGasLimit && !txMeta.transaction.gas) {\n      txMeta.transaction.gas = defaultGasLimit;\n    }\n    return txMeta;\n  }\n\n  setTxHash(txId: string, txHash: string) {\n    // Add the tx hash to the persisted meta-tx object\n    const txMeta = this.getTransaction(txId);\n    txMeta.transactionHash = txHash;\n    this.updateTransactionInState(txMeta, \"transactions#setTxHash\");\n  }\n\n  getUnapprovedTxCount = () => Object.keys(this.getUnapprovedTxList()).length;\n\n  getPendingTxCount = (account?: string) => this.getPendingTransactions(account).length;\n\n  async getDefaultGasFees(\n    txMeta: EthereumTransactionMeta,\n    eip1559Compatibility: boolean\n  ): Promise<{ maxFeePerGas?: string; maxPriorityFeePerGas?: string; gasPrice?: string }> {\n    if (\n      (!eip1559Compatibility && txMeta.transaction.gasPrice) ||\n      (eip1559Compatibility && txMeta.transaction.maxFeePerGas && txMeta.transaction.maxPriorityFeePerGas)\n    ) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.getEIP1559GasFeeEstimates();\n      if (eip1559Compatibility && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        // this is in dec gwei\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = <EthereumGasFeeEstimates>gasFeeEstimates;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            // send to controller in hex wei\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(new BigNumber(suggestedMaxFeePerGas)).toString(16)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(new BigNumber(suggestedMaxPriorityFeePerGas)).toString(16)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        const { medium } = <EthereumLegacyGasFeeEstimates>gasFeeEstimates;\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(new BigNumber(medium)).toString(16)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        const { gasPrice } = <{ gasPrice?: string }>gasFeeEstimates;\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI(new BigNumber(gasPrice)).toString(16)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const gasPrice = await this.provider.request<never, string>({ method: METHOD_TYPES.ETH_GET_GAS_PRICE });\n\n    return { gasPrice: gasPrice && addHexPrefix(gasPrice) };\n  }\n\n  private async getDefaultGasLimit(txMeta: EthereumTransactionMeta) {\n    const chainId = this.getCurrentChainId();\n    const customNetworkGasBuffer = CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP[chainId];\n    const chainType = getChainType(chainId);\n\n    if (txMeta.transaction.gas) {\n      return {};\n    }\n    if (txMeta.transaction.to && txMeta.transactionCategory === TRANSACTION_TYPES.SENT_ETHER && chainType !== \"custom\" && !txMeta.transaction.data) {\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return { gasLimit: GAS_LIMITS.SIMPLE };\n    }\n\n    const { blockGasLimit, estimatedGasHex, simulationFails } = await this.txGasUtil.analyzeGasUsage(txMeta);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.txGasUtil.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit, customNetworkGasBuffer);\n    return { gasLimit, simulationFails };\n  }\n\n  private async createTransaction(\n    txParameters: TransactionParams,\n    req: JRPCRequest<TransactionParams> & UserRequestApprovalParams\n  ): Promise<EthereumTransactionMeta> {\n    const normalizedTxParameters = normalizeTxParameters(txParameters);\n    const eip1559Compatibility = await this.getEIP1559Compatibility(txParameters.from);\n    validateTxParameters(normalizedTxParameters, eip1559Compatibility);\n\n    let txMeta = this.generateTxMeta({\n      transaction: normalizedTxParameters,\n      origin: req.origin,\n    });\n\n    const { type, category, methodParams } = await determineTransactionType(txParameters, this.provider);\n    txMeta.type = type;\n    txMeta.transactionCategory = category;\n    txMeta.methodParams = methodParams;\n    txMeta.transaction.value = txMeta.transaction.value ? addHexPrefix(txMeta.transaction.value) : \"0x0\";\n    this.emit(`${txMeta.id}:unapproved`, txMeta);\n    txMeta = this.addTransactionToState(txMeta);\n    txMeta = await this.addTransactionGasDefaults(txMeta);\n\n    this.emit(TX_EVENTS.TX_UNAPPROVED, { txMeta, req });\n\n    return txMeta;\n  }\n\n  private _setupListeners() {\n    this.setupBlockTrackerListener();\n    this.pendingTxTracker.on(TX_EVENTS.TX_WARNING, (data: TX_WARNING_EVENT_TYPE<TransactionParams, EthereumTransactionMeta>) => {\n      this.updateTransactionInState(data.txMeta);\n    });\n    this.pendingTxTracker.on(TX_EVENTS.TX_DROPPED, (data: TX_DROPPED_EVENT_TYPE) => this.setTxStatusDropped(data.txId));\n    this.pendingTxTracker.on(\n      TX_EVENTS.TX_BLOCK_UPDATE,\n      ({ txMeta, latestBlockNumber }: { txMeta: EthereumTransactionMeta; latestBlockNumber: string; txId: string }) => {\n        if (!txMeta.firstRetryBlockNumber) {\n          txMeta.firstRetryBlockNumber = latestBlockNumber;\n          this.updateTransactionInState(txMeta);\n        }\n      }\n    );\n    this.pendingTxTracker.on(TX_EVENTS.TX_RETRY, (txMeta) => {\n      if (!(\"retryCount\" in txMeta)) {\n        txMeta.retryCount = 0;\n      }\n      txMeta.retryCount += 1;\n      this.updateTransactionInState(txMeta);\n    });\n\n    this.pendingTxTracker.on(TX_EVENTS.TX_FAILED, (data: TX_FAILED_EVENT_TYPE) => {\n      this.setTxStatusFailed(data.txId, data.error);\n    });\n    this.pendingTxTracker.on(TX_EVENTS.TX_CONFIRMED, (data: TX_CONFIRMED_EVENT_TYPE) => this.confirmTransaction(data));\n  }\n\n  private setupBlockTrackerListener() {\n    let listenersAreActive = false;\n    const latestBlockHandler = this.onLatestBlock.bind(this);\n    this.on(TX_EVENTS.TX_STATUS_UPDATE, () => {\n      const pendingTxs = this.getPendingTransactions();\n      if (!listenersAreActive && pendingTxs.length > 0) {\n        this.blockTracker.on(\"latest\", latestBlockHandler);\n        listenersAreActive = true;\n      } else if (listenersAreActive && !pendingTxs.length) {\n        this.blockTracker.removeListener(\"latest\", latestBlockHandler);\n        listenersAreActive = false;\n      }\n    });\n  }\n\n  private async onLatestBlock(blockNumber: EthereumBlock) {\n    try {\n      await this.pendingTxTracker.updatePendingTxs();\n    } catch (error) {\n      log.error(error);\n    }\n\n    try {\n      await this.pendingTxTracker.resubmitPendingTxs(blockNumber);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  private async getCommonConfiguration(fromAddress: string) {\n    const { chainId, displayName } = this.getProviderConfig();\n    const supportsEIP1559 = await this.getEIP1559Compatibility(fromAddress);\n    const hardfork = supportsEIP1559 ? Hardfork.Paris : Hardfork.Berlin;\n    return Common.custom({\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n      name: displayName,\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n    });\n  }\n\n  private markNonceDuplicatesDropped(txId: string) {\n    const txMeta = this.getTransaction(txId);\n    const { nonce, from } = txMeta.transaction;\n    const sameNonceTxs = this.getTransactions({ searchCriteria: { from, nonce } });\n    if (!sameNonceTxs.length) return;\n    sameNonceTxs.forEach((tx) => {\n      if (tx.id === txId) return;\n      this.updateTransactionInState(txMeta, \"transactions/pending-tx-tracker#event: tx:confirmed reference to confirmed txHash with same nonce\");\n      if (tx.status !== TransactionStatus.failed) this.setTxStatusDropped(tx.id);\n    });\n  }\n}\n"],"names":["ecr20Abi","constant","inputs","name","outputs","type","payable","erc721Abi","stateMutability","erc1155Abi","internalType","singleBalanceCheckerAbi","LOCALHOST","CONTRACT_TYPE_ETH","CONTRACT_TYPE_ERC20","CONTRACT_TYPE_ERC721","CONTRACT_TYPE_ERC1155","ERC1155_INTERFACE_ID","ERC721_INTERFACE_ID","ERC721_METADATA_INTERFACE_ID","ERC721_ENUMERABLE_INTERFACE_ID","MAINNET_CHAIN_ID","POLYGON_CHAIN_ID","BSC_MAINNET_CHAIN_ID","AVALANCHE_MAINNET_CHAIN_ID","XDAI_CHAIN_ID","ARBITRUM_MAINNET_CHAIN_ID","OPTIMISM_MAINNET_CHAIN_ID","CELO_MAINNET_CHAIN_ID","GOERLI_CHAIN_ID","SEPOLIA_CHAIN_ID","POLYGON_MUMBAI_CHAIN_ID","BSC_TESTNET_CHAIN_ID","AVALANCHE_TESTNET_CHAIN_ID","ARBITRUM_TESTNET_CHAIN_ID","OPTIMISM_TESTNET_CHAIN_ID","SUPPORTED_NETWORKS","blockExplorerUrl","chainId","displayName","logo","rpcTarget","process","env","VITE_APP_INFURA_PROJECT_KEY","ticker","tickerName","isTestnet","METHOD_TYPES","GET_ACCOUNTS","ETH_TRANSACTION","ETH_REQUEST_ACCOUNTS","ETH_SEND_RAW_TRANSACTION","ETH_SIGN","ETH_SIGN_TYPED_DATA","ETH_SIGN_TYPED_DATA_V3","ETH_SIGN_TYPED_DATA_V4","PERSONAL_SIGN","ETH_GET_TRANSACTION_COUNT","ETH_GET_TRANSACTION_BY_HASH","ETH_GET_ENCRYPTION_PUBLIC_KEY","ETH_DECRYPT","ETH_GET_TRANSACTION_RECEIPT","WATCH_ASSET","ETH_GET_BLOCK_BY_HASH","ETH_GET_CODE","ETH_GET_GAS_PRICE","SWITCH_CHAIN","ADD_CHAIN","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP","OLD_ERC721_LIST","erc20","symbol","decimals","TEST_CHAINS","ETHERSCAN_SUPPORTED_CHAINS","SIMPLEHASH_SUPPORTED_CHAINS","COINGECKO_SUPPORTED_CURRENCIES","Set","COINGECKO_PLATFORMS_CHAIN_CODE_MAP","platform","currency","MessageStatus","UNAPPROVED","SIGNED","PENDING","APPROVED","REJECTED","FAILED","MESSAGE_EVENTS","UNAPPROVED_MESSAGE","SINGLE_CALL_BALANCES_ADDRESSES","ZERO_ADDRESS","AccountTrackerController","BaseController","constructor","_ref","config","state","provider","blockTracker","getIdentities","onPreferencesStateChange","getCurrentChainId","_defineProperty","Mutex","defaultState","accounts","defaultConfig","_currentBlock","initialize","ethersProvider","BrowserProvider","on","block","configure","refresh","log","info","refreshNeeded","syncAccounts","addresses","Object","keys","existing","newAddresses","filter","address","indexOf","oldAddresses","isUpdated","forEach","balance","update","_objectSpread","releaseLock","mutex","acquire","currentBlock","_updateAccounts","error","length","_updateAccountsViaBalanceChecker","Promise","all","map","x","_updateAccount","request","method","params","toQuantity","deployedContractAddress","ethContract","Contract","result","balances","index","warn","getEtherScanHashLink","txHash","formatPastTx","lowerCaseSelectedAddress","_x$to","totalAmountString","formatSmallNumbers","Number","parseFloat","total_amount","type_name","currencyAmountString","currency_amount","selected_currency","finalObject","id","created_at","toString","date","Date","from","from_aa_address","slicedFrom","addressSlicer","to","slicedTo","action","toLowerCase","ACTIVITY_ACTION_RECEIVE","ACTIVITY_ACTION_SEND","totalAmount","currencyAmount","amount","status","etherscanLink","transaction_hash","network","networkType","ethRate","significantDigits","currencyUsed","type_image_link","transaction_category","contract_address","nonce","is_cancel","gas","gasPrice","getEthTxStatus","hash","TransactionStatus","submitted","confirmed","rejected","undefined","err","formatDate","inputDate","monthList","day","getDate","month","getMonth","year","getFullYear","formatTime","time","toTimeString","slice","idleTimeTracker","activityThresholdTime","isIdle","idleTimeout","resetTimer","window","clearTimeout","setTimeout","addEventListener","document","checkIfIdle","isAddressByChainId","_chainId","isValidAddress","toChecksumAddressByChainId","toChecksumAddress","GAS_LIMITS","SIMPLE","addHexPrefix","BASE_TOKEN_ESTIMATE","bnLessThan","a","b","BigNumber","lt","getIpfsEndpoint","path","sanitizeNftMetdataUrl","url","finalUri","startsWith","ipfsPath","split","getChainType","includes","DEFAULT_POLLING_INTERVAL","DEFAULT_RETRY_TIMEOUT","SEC","PollingBlockTracker","BaseBlockTracker","Error","pollingInterval","retryTimeout","setSkipCacheFlag","checkForLatestBlock","_updateLatestBlock","getLatestBlock","_start","_synchronize","catch","emit","_isRunning","timeout","newErr","stack","emitErr","latestBlock","_fetchLatestBlock","_newPotentialLatest","blockHash","idempotencyKey","number","timestamp","baseFeePerGas","gasLimit","message","CurrencyController","BaseCurrencyController","onNetworkChanged","commonDenomination","commonDenominatorPrice","networkState","providerConfig","toUpperCase","nativeCurrency","setNativeCurrency","updateConversionRate","setCommonDenomination","getCommonDenomination","setCommonDenominatorPrice","getCommonDenominatorPrice","scheduleConversionInterval","conversionInterval","clearInterval","setInterval","pollInterval","currentCurrency","getCurrentCurrency","getNativeCurrency","conversionRate","retrieveConversionRate","currentCurrencyRate","commonDenominationRate","setConversionRate","setConversionDate","Math","floor","now","fromCurrency","toCurrency","apiUrl","api","parsedResponse","get","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","stripHexPrefix","dec","String","BN","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","invertConversionRate","roundDown","convertedValue","rate","ROUND_HALF_DOWN","ROUND_DOWN","conversionUtil","_ref2","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchGasEstimates","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchGasEstimatesViaEthFeeHistory","noOfBlocks","newestBlock","percentileValues","feeHistory","finalBaseFeePerGas","priorityFeeCalcs","reward","reduce","acc","curr","slow","plus","average","fast","maxWaitTimeEstimate","minWaitTimeEstimate","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","SafeGasPrice","ProposeGasPrice","FastGasPrice","fetchEthGasPriceEstimate","calculateTimeEstimate","maxPriorityFeePerGas","maxFeePerGas","gasFeeEstimates","maxPriorityFeePerGasInWEI","maxFeePerGasInWEI","estimatedBaseFeeInWEI","effectiveMaxPriorityFee","min","minus","lowMaxPriorityFeeInWEI","mediumMaxPriorityFeeInWEI","highMaxPriorityFeeInWEI","lowerTimeBound","upperTimeBound","gte","eq","GAS_FEE_API","LEGACY_GAS_PRICES_API_URL","GasFeeController","getNetworkIdentifier","getProvider","defaultFetchGasEstimates","defaultFetchEthGasPriceEstimate","defaultFetchLegacyGasPriceEstimates","defaultFetchGasEstimatesViaEthFeeHistory","getCurrentNetworkLegacyGasAPICompatibility","getCurrentNetworkEIP1559Compatibility","getCurrentAccountEIP1559Compatibility","onNetworkStateChange","interval","legacyAPIEndpoint","EIP1559APIEndpoint","estimatedGasFeeTimeBounds","gasEstimateType","currentChainId","newChainId","resetPolling","stopPolling","getGasFeeEstimatesAndStartPolling","fetchGasFeeEstimates","_fetchGasFeeEstimateData","_startPolling","disconnectPoller","destroy","intervalId","resetState","isEIP1559Compatible","isLegacyGasAPICompatible","chainIdInt","isHexString","parseInt","getEIP1559Compatibility","newState","cloneDeep","API_SUPPORTED_CHAINIDS","has","replace","getTimeEstimate","_poll","_this$getCurrentAccou","_this$getCurrentAccou2","currentNetworkIsEIP1559Compatible","currentAccountIsEIP1559Compatible","call","KeyringController","BaseKeyringController","wallets","signTransaction","tx","txPayload","wallet","_getWalletForAccount","privKey","getBufferPrivateKey","privateKey","signedTx","sign","getAccounts","w","publicKey","importAccount","accountPrivateKey","hexPrivateKey","signingKey","SigningKey","Wallet","existingWallet","find","removeAccount","newWallets","idx","findIndex","splice","stripped","Buffer","signMessage","data","messageSig","ecsign","sig","concatSig","bigIntToBytes","v","r","s","signPersonalMessage","personalSign","signTypedData","typedData","version","signEncryptionPublicKey","getEncryptionPublicKey","decryptMessage","decrypt","encryptedData","account","AbstractMessageController","unapprovedMessages","unapprovedMessagesCount","messages","getMessage","messageId","getAllMessages","setMetadata","metadata","updateMessage","getUnapprovedMessages","addMessage","push","saveMessageList","approveMessage","messageParams","setMessageStatus","prepMessageForSigning","waitForFinishStatus","msgParams","messageName","resolve","reject","handleFinished","msg","providerErrors","userRejectedRequest","rpcErrors","internal","rawSig","JSON","stringify","once","hexRe","validateAddress","propertyName","validateSignMessageData","messageData","normalizeMessageData","match","e","bytesToHex","validateTypedSignMessageDataV1","Array","isArray","typedSignatureHash","validateTypedSignMessageDataV3V4","parse","validation","validate","TYPED_MESSAGE_SCHEMA","errors","domain","activeChainId","isNaN","validateEncryptionPublicKeyMessageData","validateDecryptedMessageData","parseDecryptMessageData","buffer","validateAddChainData","rpcUrls","_web3","JsonRpcProvider","networkChainID","getNetwork","validateSwitchChainData","AddChainController","addChain","processAddChain","msgObject","addNewUnapprovedMessage","req","addUnapprovedMessage","origin","randomId","DecryptMessageController","processDecryptMessage","cleanMsgParams","parsedData","EncryptionPublicKeyController","processGetEncryptionPublicKey","MessageController","processSignMessage","PersonalMessageController","processPersonalSignMessage","SwitchChainController","switchChain","processSwitchChain","getMessageType","SignTypedDataVersion","V1","V3","V4","TypedMessageController","msgData","createGetAccountsMiddleware","createAsyncMiddleware","response","next","createProcessTransactionMiddleware","processTransaction","createProcessEthSignMessage","_ref3","processEthSignMessage","createProcessTypedMessage","_ref4","processTypedMessage","createProcessTypedMessageV3","_ref5","processTypedMessageV3","createProcessTypedMessageV4","_ref6","processTypedMessageV4","createProcessPersonalMessage","_ref7","processPersonalMessage","createPendingNonceMiddleware","_ref8","getPendingNonce","blockReference","formatTxMetaForRpcResult","txMeta","txReceipt","transaction","transactionHash","accessList","formattedTxMeta","input","blockNumber","transactionIndex","createPendingTxMiddleware","_ref9","getPendingTransactionByHash","createProcessEncryptionPublicKeyMiddleware","_ref10","processEncryptionPublicKey","createProcessDecryptMessageMiddleware","_ref11","createProcessSwitchEthereumChain","_ref12","processSwitchEthereumChain","createProcessAddEthereumChain","_ref13","processAddEthereumChain","createRequestAccountsMiddleware","_ref14","requestAccounts","createEthereumMiddleware","providerHandlers","getProviderState","mergeMiddleware","createScaffoldMiddleware","PROVIDER_JRPC_METHODS","GET_PROVIDER_STATE","createChainIdMiddleware","res","end","createProviderConfigMiddleware","createJsonRpcClient","networkConfig","fetchMiddleware","createFetchMiddleware","blockProvider","providerFromMiddleware","networkMiddleware","NetworkController","properties","EIPS_1559","mainnet","getNetworkRPCUrl","initializeProvider","baseProviderHandlers","configureProvider","lookupNetwork","providerProxy","getBlockTracker","blockTrackerProxy","getProviderConfig","setProviderConfig","refreshNetwork","supportsEIP1559","networkChainId","_this$getProviderConf","rest","_objectWithoutProperties","_excluded","configureStandardProvider","setNetworkClient","ethereumMiddleware","engine","JRPCEngine","providerFromEngine","setProvider","setTarget","createSwappableProxy","createEventEmitterProxy","eventFilter","setMaxListeners","networkClient","NftHandler","contractAddress","contractImage","contractName","contractSymbol","nftStandard","contractDescription","contractFallbackLogo","contractSupply","getNftMetadata","userAddress","tokenInfo","returnNftItem","description","image","tokenBalance","tokenId","tokenURI","getCollectibleTokenURI","fetchNftBalance","object","finalTokenMetaUri","getContractMetadata","returnNft","standard","isSpecial","checkNftStandard","abi","contract","balanceOf","owner","ownerOf","prototype","hasOwnProperty","isErc721","contractSupportsInterface","isErc1155","interfaceId","supportsInterface","arguments","DEFAULT_INTERVAL","NftsController","getCustomNfts","getSimpleHashNfts","selectedAddress","nfts","preferencesState","restartNftDetection","userSelectedAddress","userNfts","_this$state$nfts$this","_timer","detectNewNfts","refreshNftBalances","startNftDetection","nftsToDetect","customNfts","reducedNfts","newAsset","nft_id","customNftId","nft_address","assets","objToPush","nft_contract_standard","values","oldNfts","nonZeroNfts","simpleHashBalances","getNftBalancesUsingHandler","currentNetworkNfts","promiseSettledResult","allSettled","tokenInstance","contractData","assetData","y","z","nonZeroTokens","merge","PreferencesController","BasePreferencesController","signAuthMessage","defaultPreferences","formattedPastTransactions","fetchedPastTx","paymentTx","poll","_this$getAddressState","_mutex","_handle","storeSelectedAddress","getAddressState","jwtToken","sync","initPreferences","calledFromEmbed","userInfo","rehydrate","locale","signatures","web3AuthClientId","init","email","aggregateVerifier","verifier","verifierId","userExists","accountState","createUser","selectedCurrency","theme","storeUserLogin","options","getSelectedAddress","user","getUser","default_currency","defaultCurrency","contacts","public_address","userPublicAddress","default_public_address","defaultPublicAddress","customNetworks","customTokens","updateState","getWalletOrders","then","walletTx","calculatePastTx","patchNewTx","_this$getAddressState2","formattedTx","storePastTx","duplicateIndex","finalTx","cancelTxCalculate","postPastTx","recalculatePastTx","refetchEtherscanTx","_this$getAddressState3","fetchEtherscanTx","parameters","URL","key","searchParams","append","href","headers","success","getEtherScanTokens","pathname","getCustomTokens","_this$getAddressState4","_this$getAddressState5","_this$getAddressState6","_this$getAddressState7","isChainIdSupported","approveChainOptions","getChainOptions","newNetwork","chainName","blockExplorerUrls","isSuccess","addCustomNetwork","chainOptions","payload","network_name","rpc_url","chain_id","block_explorer_url","is_test_net","post","useAPIKey","deleteCustomNetwork","remove","editCustomNetwork","patch","_identities$address$c","_identities$address","identities","custom","chains","networkItem","isCustom","supported","txs","pastTx","pendingTx","pendingTxPromises","resolvedTxStatuses","element","entries","patchPastTx","updated_at","toISOString","nonceMap","latestTxs","sort","aDate","getTime","bDate","latestCancelTx","hasCancel","cancelled","cancelling","cancelDateInitiated","cancelGas","cancelGasPrice","TokenHandler","getSymbol","getDecimals","getName","getUserBalance","DEFAULT_CURRENCY","TokenRatesController","onTokensStateChange","contractExchangeRates","tokensState","tokens","currentUserTokens","updateExchangeRates","chainCodes","newContractExchangeRates","token","tokenAddress","fetchExchangeRates","contractAddresses","isNativeCurrencySupported","join","currencyResponse","currencyApi","getObjectFromArrayBasedonKey","oldArray","xkey","mergeTokenArrays","newArray","oldMap","newMap","finalArr","isEtherScan","TokensController","restartTokenDetection","userTokens","_this$state$tokens$th","detectNewTokens","refreshTokenBalances","startTokenDetection","isErc20","token_address","token_name","token_symbol","customTokenId","oldTokens","tokenAddresses","etherscanBalances","currentSingleCallAddress","_","getTokenBalancesUsingHandler","currentNetworkTokens","NonceTracker","getPendingTransactions","getConfirmedTransactions","lockMap","getGlobalLock","globalMutex","_lookupMutex","getNonceLock","_globalMutexFree","_takeMutex","nonceDetails","networkNonceResult","_getNetworkNextNonce","highestLocallyConfirmed","_getHighestLocallyConfirmed","nextNetworkNonce","highestSuggested","max","pendingTxs","localNonceResult","_getHighestContinuousFrom","local","nextNonce","lockId","baseCountStr","baseCount","details","confirmedTransactions","highest","_getHighestNonce","isInteger","txList","nonces","highestNonce","apply","startPoint","PendingTransactionTracker","SafeEventEmitter","nonceTracker","approveTransaction","publishTransaction","droppedBlocksBufferByHash","Map","updatePendingTxs","nonceGlobalLock","_checkPendingTx","resubmitPendingTxs","pending","_resubmitTx","_value","errorMessage","isKnownTx","warning","TX_EVENTS","TX_WARNING","txId","latestBlockNumber","firstRetryBlockNumber","TX_BLOCK_UPDATE","txBlockDistance","retryCount","rawTx","TX_RETRY","foundTx","noTxHashError","TX_FAILED","_checkIfNonceIsTaken","TX_DROPPED","transactionReceipt","TX_CONFIRMED","blockTimestamp","_checkIfTxWasDropped","networkNextNonce","set","currentBlockBuffer","DROPPED_BUFFER_COUNT","delete","completed","some","otherMeta","TransactionGasUtil","analyzeGasUsage","blockGasLimitBN","saferGasLimitBN","mul","estimatedGasHex","simulationFails","estimateTxGas","reason","errorKey","debug","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","txParams","generateHistoryEntry","previousState","note","entry","jsonDiffer","compare","replayHistory","_shortHistory","shortHistory","val","applyPatch","newDocument","snapshotFromTxMeta","shallow","history","erc20Interface","Interface","erc721Interface","erc1155Interface","normalizers","LowerCase","customNonceValue","normalizeTxParameters","txParameters","lowerCase","normalizedTxParameters","currentKey","transactionMatchesNetwork","isEIP1559Transaction","_transaction$transact","_transaction$transact2","isLegacyTransaction","ensureMutuallyExclusiveFieldsNotProvided","fieldBeingValidated","mutuallyExclusiveField","invalidParams","ensureFieldIsString","field","ensureProperTransactionEnvelopeTypeProvided","validateFrom","validateRecipient","validateTxParameters","eip1559Compatibility","normalizeAndValidateTxParams","normalizedTxParams","getFinalStates","failed","dropped","parseStandardTokenTransactionData","txDesc","parseTransaction","methodParams","args","toArray","readAddressAsContract","contractCode","isContractAddress","determineTransactionType","TRANSACTION_TYPES","DEPLOY_CONTRACT","resultCode","valueExists","tokenMethodName","TOKEN_METHOD_APPROVE","TOKEN_METHOD_TRANSFER","TOKEN_METHOD_TRANSFER_FROM","COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM","SET_APPROVAL_FOR_ALL","_name","CONTRACT_INTERACTION","SENT_ETHER","category","getCodeResponse","TransactionStateManager","BaseTransactionStateManager","generateTxMeta","opts","dappSuggestedGasFees","unapproved","loadingDefaults","addTransactionToState","removeAllListeners","snapshot","transactions","getTransactions","filterToCurrentNetwork","txHistoryLimit","nonceNetworkSet","txsToDelete","reverse","size","add","_deleteTransactions","_addTransactionsToState","wipeTransactions","omitBy","transactionMatch","searchCriteria","initialList","limit","predicateMethods","mapValues","predicate","transactionsToFilter","keyBy","filteredTransactions","sortBy","pickBy","transactionMatches","i","unshift","getApprovedTransactions","approved","getSubmittedTransactions","getUnapprovedTxList","updateTransactionInState","currentState","updateTransaction","_setTransactionStatus","isFinalStep","getTransaction","TX_STATUS_UPDATE","isFinalState","TransactionController","signEthTx","getEIP1559GasFeeEstimates","_getCurrentNetworkEIP1559Compatibility","_getCurrentAccountEIP1559Compatibility","txGasUtil","bind","pendingTxTracker","_setupListeners","addTransactionUnapproved","addNewUnapprovedTransaction","createTransaction","processApproval","transactionID","inProcessOfSigning","nonceLock","setTxStatusApproved","fromAddress","customNonceValueNumber","customOrNonce","setTxStatusFailed","err2","common","getCommonConfiguration","unsignedEthTx","TransactionFactory","fromTxData","signedEthTx","setTxStatusSigned","serialize","rawTransaction","keccak256","setTxHash","setTxStatusSubmitted","confirmTransaction","setTxStatusConfirmed","markNonceDuplicatesDropped","cancelTransaction","currentNetworkIsCompatible","fromAccountIsCompatible","addTransactionGasDefaults","updateTxMeta","addTxGasDefaults","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","defaultGasLimit","getDefaultGasLimit","customNetworkGasBuffer","chainType","transactionCategory","TX_UNAPPROVED","setupBlockTrackerListener","setTxStatusDropped","listenersAreActive","latestBlockHandler","onLatestBlock","removeListener","hardfork","Hardfork","Paris","Berlin","Common","defaultHardfork","networkId","sameNonceTxs"],"mappings":"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"}