import { METHOD_TYPES_TYPE } from "@toruslabs/ethereum-controllers";
import CommunicationProvider from "./communicationProvider";
import TorusInPageProvider from "./inPageProvider";
import { BUTTON_POSITION_TYPE, CtorArgs, LOGIN_PROVIDER_TYPE, UserInfo, WsEmbedParams } from "./interfaces";
export declare const COMMUNICATION_UNSAFE_METHODS: Set<string>;
export declare const PROVIDER_UNSAFE_METHODS: Set<Partial<METHOD_TYPES_TYPE>>;
declare class WsEmbed {
    isInitialized: boolean;
    modalZIndex: number;
    provider: TorusInPageProvider;
    widgetVisibility: boolean;
    communicationProvider: CommunicationProvider;
    buttonPosition: BUTTON_POSITION_TYPE;
    private walletIframe;
    constructor({ modalZIndex }?: CtorArgs);
    init({ buildEnv, enableLogging, chainConfig, showWidgetButton: showTorusButton, buttonPosition, walletUrls, }?: WsEmbedParams): Promise<void>;
    login(params?: {
        loginProvider?: LOGIN_PROVIDER_TYPE;
        login_hint?: string;
    }): Promise<string[]>;
    logout(): Promise<void>;
    cleanUp(): Promise<void>;
    clearInit(): void;
    hideTorusButton(): void;
    showTorusButton(): void;
    getUserInfo(): Promise<UserInfo>;
    showWalletConnectScanner(): Promise<void>;
    showWalletUi(): Promise<void>;
    showCheckout(): Promise<void>;
    private setupWeb3;
}
export default WsEmbed;
