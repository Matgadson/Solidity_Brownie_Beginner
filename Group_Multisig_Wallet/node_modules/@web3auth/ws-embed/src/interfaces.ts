import type { EthereumProviderConfig } from "@toruslabs/ethereum-controllers";
import { JRPCRequest } from "@toruslabs/openlogin-jrpc";
import { LogLevelDesc } from "loglevel";

export const WS_EMBED_BUILD_ENV = {
  PRODUCTION: "production",
  DEVELOPMENT: "development",
  TESTING: "testing",
} as const;

export type WS_EMBED_BUILD_ENV_TYPE = (typeof WS_EMBED_BUILD_ENV)[keyof typeof WS_EMBED_BUILD_ENV];

export const BUTTON_POSITION = {
  BOTTOM_LEFT: "bottom-left",
  TOP_LEFT: "top-left",
  BOTTOM_RIGHT: "bottom-right",
  TOP_RIGHT: "top-right",
} as const;
export type BUTTON_POSITION_TYPE = (typeof BUTTON_POSITION)[keyof typeof BUTTON_POSITION];

export const LOGIN_PROVIDER = {
  GOOGLE: "google",
  FACEBOOK: "facebook",
  REDDIT: "reddit",
  DISCORD: "discord",
  TWITCH: "twitch",
  APPLE: "apple",
  LINE: "line",
  GITHUB: "github",
  KAKAO: "kakao",
  LINKEDIN: "linkedin",
  TWITTER: "twitter",
  WEIBO: "weibo",
  WECHAT: "wechat",
  EMAIL_PASSWORDLESS: "email_passwordless",
} as const;

export type LOGIN_PROVIDER_TYPE = (typeof LOGIN_PROVIDER)[keyof typeof LOGIN_PROVIDER];

export interface CtorArgs {
  /**
   * Z-index of the modal and iframe
   * @defaultValue 99999
   */
  modalZIndex?: number;
}

export interface PaymentParams {
  /**
   * Address to send the funds to
   */
  selectedAddress?: string;
  /**
   * Default fiat currency for the user to make the payment in
   */
  selectedCurrency?: string;
  /**
   * Amount to buy in the selectedCurrency
   */
  fiatValue?: number;
  /**
   * Cryptocurrency to buy
   */
  selectedCryptoCurrency?: string;
}

export interface LoginParams {
  loginProvider?: string;
}

export interface UserInfo {
  /**
   * Email of the logged in user
   */
  email: string;
  /**
   * Full name of the logged in user
   */
  name: string;
  /**
   * Profile image of the logged in user
   */
  profileImage: string;
  /**
   * verifier of the logged in user (google, facebook etc)
   */
  verifier: string;
  /**
   * Verifier Id of the logged in user
   *
   * email for google,
   * id for facebook,
   * username for reddit,
   * id for twitch,
   * id for discord
   */
  verifierId: string;
}

export interface WalletUrlConfig {
  url?: string;
  logLevel?: LogLevelDesc;
}
export interface WsEmbedParams {
  /**
   * Determines where the wsEmbed widget is visible on the page.
   * @defaultValue bottom-left
   */
  buttonPosition?: BUTTON_POSITION_TYPE;

  /**
   * Chain to connect with
   */
  chainConfig?: EthereumProviderConfig;
  /**
   * Build Environment of WsEmbed.
   *
   * production uses https://casper.tor.us,
   *
   * development uses http://localhost:4050 (expects wallet-service-website to be run locally),
   *
   * testing uses https://casper-testing.tor.us (latest internal build)
   * @defaultValue production
   */
  buildEnv?: WS_EMBED_BUILD_ENV_TYPE;
  /**
   * Enables or disables logging.
   *
   * Defaults to false in prod and true in other environments
   */
  enableLogging?: boolean;
  /**
   * whether to show/hide ws-embed widget.
   *
   * Defaults to true
   * @defaultValue true
   */
  showWidgetButton?: boolean;
  /**
   * whether to show/hide ws-embed widget.
   *
   * Defaults to true
   * @defaultValue true
   */
  walletUrls?: Partial<Record<WS_EMBED_BUILD_ENV_TYPE, WalletUrlConfig>>;
}

export interface ProviderOptions {
  /**
   * The name of the stream used to connect to the wallet.
   */
  jsonRpcStreamName?: string;

  /**
   * The maximum number of event listeners.
   */
  maxEventListeners?: number;
}

export interface BaseProviderState {
  isConnected: boolean;
  initialized: boolean;
  isPermanentlyDisconnected: boolean;
  hasEmittedConnection: boolean;
}

export interface InPageProviderState extends BaseProviderState {
  accounts: null | string[];
  isUnlocked: boolean;
}

export interface CommunicationProviderState extends BaseProviderState {
  buttonPosition: string;
  isLoggedIn: boolean;
  widgetVisibility: boolean;
  currentLoginProvider: LOGIN_PROVIDER_TYPE;
  isIFrameFullScreen: boolean;
}

export type Maybe<T> = Partial<T> | T | null | undefined;

export interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {
  windowId?: string;
}
